package ast // TypeScriptParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 135, 1664,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 5, 3, 292, 10, 3, 3, 4, 3,
	4, 5, 4, 296, 10, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 7, 5, 303, 10, 5, 12,
	5, 14, 5, 306, 11, 5, 3, 6, 3, 6, 5, 6, 310, 10, 6, 3, 6, 5, 6, 313, 10,
	6, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 5, 8, 320, 10, 8, 3, 8, 3, 8, 3, 9, 3,
	9, 3, 9, 7, 9, 327, 10, 9, 12, 9, 14, 9, 330, 11, 9, 3, 10, 3, 10, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 339, 10, 11, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 350, 10, 12, 12, 12, 14,
	12, 353, 11, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5,
	13, 373, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13, 379, 10, 13, 12, 13,
	14, 13, 382, 11, 13, 3, 14, 3, 14, 3, 15, 3, 15, 5, 15, 388, 10, 15, 3,
	16, 3, 16, 5, 16, 392, 10, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 407, 10, 18, 3,
	19, 3, 19, 5, 19, 411, 10, 19, 3, 20, 3, 20, 5, 20, 415, 10, 20, 3, 20,
	3, 20, 3, 21, 3, 21, 5, 21, 421, 10, 21, 3, 22, 3, 22, 3, 22, 7, 22, 426,
	10, 22, 12, 22, 14, 22, 429, 11, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 5, 23, 438, 10, 23, 5, 23, 440, 10, 23, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 7, 26,
	454, 10, 26, 12, 26, 14, 26, 457, 11, 26, 3, 27, 5, 27, 460, 10, 27, 3,
	27, 3, 27, 5, 27, 464, 10, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 28, 3, 28,
	5, 28, 472, 10, 28, 3, 28, 3, 28, 5, 28, 476, 10, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 6, 30, 489,
	10, 30, 13, 30, 14, 30, 490, 3, 30, 3, 30, 5, 30, 495, 10, 30, 3, 31, 5,
	31, 498, 10, 31, 3, 31, 3, 31, 5, 31, 502, 10, 31, 3, 31, 5, 31, 505, 10,
	31, 3, 31, 3, 31, 5, 31, 509, 10, 31, 3, 32, 3, 32, 3, 32, 3, 33, 5, 33,
	515, 10, 33, 3, 33, 3, 33, 5, 33, 519, 10, 33, 3, 33, 3, 33, 5, 33, 523,
	10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 529, 10, 34, 12, 34, 14, 34,
	532, 11, 34, 3, 34, 3, 34, 5, 34, 536, 10, 34, 5, 34, 538, 10, 34, 3, 35,
	3, 35, 3, 35, 7, 35, 543, 10, 35, 12, 35, 14, 35, 546, 11, 35, 3, 36, 3,
	36, 5, 36, 550, 10, 36, 3, 37, 5, 37, 553, 10, 37, 3, 37, 5, 37, 556, 10,
	37, 3, 37, 3, 37, 3, 37, 5, 37, 561, 10, 37, 3, 37, 5, 37, 564, 10, 37,
	3, 37, 5, 37, 567, 10, 37, 3, 38, 3, 38, 3, 38, 5, 38, 572, 10, 38, 3,
	39, 5, 39, 575, 10, 39, 3, 39, 5, 39, 578, 10, 39, 3, 39, 3, 39, 5, 39,
	582, 10, 39, 3, 40, 3, 40, 3, 41, 3, 41, 5, 41, 588, 10, 41, 3, 42, 3,
	42, 5, 42, 592, 10, 42, 3, 42, 3, 42, 5, 42, 596, 10, 42, 3, 42, 3, 42,
	5, 42, 600, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	44, 3, 44, 5, 44, 611, 10, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 5, 45,
	618, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 5, 46, 625, 10, 46, 3,
	46, 3, 46, 3, 46, 5, 46, 630, 10, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 5, 46, 638, 10, 46, 3, 47, 5, 47, 641, 10, 47, 3, 47, 5, 47, 644,
	10, 47, 3, 47, 3, 47, 3, 47, 5, 47, 649, 10, 47, 3, 47, 5, 47, 652, 10,
	47, 3, 47, 3, 47, 5, 47, 656, 10, 47, 3, 48, 3, 48, 3, 48, 3, 49, 3, 49,
	3, 49, 7, 49, 664, 10, 49, 12, 49, 14, 49, 667, 11, 49, 3, 50, 5, 50, 670,
	10, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 676, 10, 50, 3, 50, 3, 50, 3,
	51, 3, 51, 5, 51, 682, 10, 51, 3, 52, 3, 52, 3, 52, 7, 52, 687, 10, 52,
	12, 52, 14, 52, 690, 11, 52, 3, 53, 3, 53, 3, 53, 5, 53, 695, 10, 53, 3,
	54, 3, 54, 3, 54, 3, 54, 5, 54, 701, 10, 54, 3, 54, 3, 54, 3, 55, 3, 55,
	6, 55, 707, 10, 55, 13, 55, 14, 55, 708, 3, 55, 7, 55, 712, 10, 55, 12,
	55, 14, 55, 715, 11, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 57, 6, 57,
	723, 10, 57, 13, 57, 14, 57, 724, 3, 58, 3, 58, 3, 58, 5, 58, 730, 10,
	58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 738, 10, 59, 3, 59,
	3, 59, 3, 59, 7, 59, 743, 10, 59, 12, 59, 14, 59, 746, 11, 59, 3, 60, 3,
	60, 3, 60, 3, 61, 5, 61, 752, 10, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3,
	62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 784, 10, 62, 3, 63, 3, 63, 5, 63, 788,
	10, 63, 3, 63, 3, 63, 3, 64, 6, 64, 793, 10, 64, 13, 64, 14, 64, 794, 3,
	65, 3, 65, 3, 65, 3, 65, 5, 65, 801, 10, 65, 3, 65, 3, 65, 3, 66, 3, 66,
	3, 66, 5, 66, 808, 10, 66, 3, 67, 3, 67, 5, 67, 812, 10, 67, 3, 67, 3,
	67, 5, 67, 816, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 68,
	5, 68, 825, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 831, 10, 68, 12,
	68, 14, 68, 834, 11, 68, 3, 68, 3, 68, 3, 69, 3, 69, 5, 69, 840, 10, 69,
	3, 69, 3, 69, 5, 69, 844, 10, 69, 3, 70, 3, 70, 5, 70, 848, 10, 70, 3,
	70, 3, 70, 5, 70, 852, 10, 70, 3, 70, 5, 70, 855, 10, 70, 3, 70, 5, 70,
	858, 10, 70, 3, 70, 5, 70, 861, 10, 70, 3, 70, 3, 70, 5, 70, 865, 10, 70,
	3, 70, 3, 70, 5, 70, 869, 10, 70, 3, 70, 3, 70, 5, 70, 873, 10, 70, 5,
	70, 875, 10, 70, 3, 71, 3, 71, 3, 71, 7, 71, 880, 10, 71, 12, 71, 14, 71,
	883, 11, 71, 3, 72, 3, 72, 3, 72, 5, 72, 888, 10, 72, 3, 72, 5, 72, 891,
	10, 72, 3, 72, 5, 72, 894, 10, 72, 3, 72, 3, 72, 5, 72, 898, 10, 72, 3,
	72, 5, 72, 901, 10, 72, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 5, 74, 908,
	10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 917, 10,
	75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 936, 10, 76, 3,
	76, 3, 76, 5, 76, 940, 10, 76, 3, 76, 3, 76, 5, 76, 944, 10, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 954, 10, 76, 3,
	76, 3, 76, 5, 76, 958, 10, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 5, 76, 969, 10, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3,
	76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 982, 10, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 5, 76, 988, 10, 76, 3, 77, 3, 77, 3, 78, 3, 78, 3,
	78, 5, 78, 995, 10, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 5, 79, 1002,
	10, 79, 3, 79, 3, 79, 3, 80, 3, 80, 3, 80, 5, 80, 1009, 10, 80, 3, 80,
	3, 80, 3, 81, 3, 81, 3, 81, 5, 81, 1016, 10, 81, 3, 81, 3, 81, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	3, 84, 3, 84, 5, 84, 1034, 10, 84, 3, 84, 3, 84, 5, 84, 1038, 10, 84, 5,
	84, 1040, 10, 84, 3, 84, 3, 84, 3, 85, 6, 85, 1045, 10, 85, 13, 85, 14,
	85, 1046, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1053, 10, 86, 3, 87, 3, 87,
	3, 87, 5, 87, 1058, 10, 87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 89, 3, 89, 3,
	89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1073, 10, 90, 3, 90,
	5, 90, 1076, 10, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 92, 3,
	92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94,
	3, 94, 3, 94, 5, 94, 1098, 10, 94, 3, 95, 5, 95, 1101, 10, 95, 3, 95, 3,
	95, 3, 95, 5, 95, 1106, 10, 95, 3, 95, 3, 95, 3, 95, 3, 96, 5, 96, 1112,
	10, 96, 3, 96, 5, 96, 1115, 10, 96, 3, 97, 3, 97, 7, 97, 1119, 10, 97,
	12, 97, 14, 97, 1122, 11, 97, 3, 97, 3, 97, 3, 98, 3, 98, 3, 98, 3, 99,
	3, 99, 3, 99, 3, 100, 3, 100, 5, 100, 1134, 10, 100, 3, 100, 3, 100, 3,
	100, 5, 100, 1139, 10, 100, 3, 101, 3, 101, 3, 101, 5, 101, 1144, 10, 101,
	3, 101, 5, 101, 1147, 10, 101, 3, 101, 5, 101, 1150, 10, 101, 3, 101, 3,
	101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 5,
	101, 1162, 10, 101, 3, 101, 3, 101, 3, 101, 5, 101, 1167, 10, 101, 3, 101,
	5, 101, 1170, 10, 101, 3, 102, 5, 102, 1173, 10, 102, 3, 102, 5, 102, 1176,
	10, 102, 3, 102, 5, 102, 1179, 10, 102, 3, 102, 5, 102, 1182, 10, 102,
	3, 103, 3, 103, 3, 103, 3, 104, 5, 104, 1188, 10, 104, 3, 104, 3, 104,
	3, 104, 5, 104, 1193, 10, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104,
	3, 105, 3, 105, 3, 105, 5, 105, 1203, 10, 105, 3, 105, 3, 105, 5, 105,
	1207, 10, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 106, 3, 106,
	3, 106, 3, 106, 7, 106, 1218, 10, 106, 12, 106, 14, 106, 1221, 11, 106,
	3, 106, 5, 106, 1224, 10, 106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107,
	3, 108, 3, 108, 3, 108, 3, 108, 7, 108, 1235, 10, 108, 12, 108, 14, 108,
	1238, 11, 108, 3, 108, 5, 108, 1241, 10, 108, 3, 108, 3, 108, 3, 109, 3,
	109, 3, 109, 3, 109, 3, 109, 5, 109, 1250, 10, 109, 3, 109, 3, 109, 3,
	109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 7, 110, 1260, 10, 110, 12,
	110, 14, 110, 1263, 11, 110, 3, 110, 3, 110, 5, 110, 1267, 10, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 5, 110, 1274, 10, 110, 5, 110, 1276,
	10, 110, 3, 111, 5, 111, 1279, 10, 111, 3, 111, 5, 111, 1282, 10, 111,
	3, 111, 3, 111, 5, 111, 1286, 10, 111, 3, 111, 5, 111, 1289, 10, 111, 3,
	111, 3, 111, 5, 111, 1293, 10, 111, 3, 112, 3, 112, 3, 112, 3, 113, 5,
	113, 1299, 10, 113, 3, 114, 3, 114, 5, 114, 1303, 10, 114, 3, 114, 3, 114,
	3, 115, 3, 115, 6, 115, 1309, 10, 115, 13, 115, 14, 115, 1310, 3, 115,
	7, 115, 1314, 10, 115, 12, 115, 14, 115, 1317, 11, 115, 3, 116, 5, 116,
	1320, 10, 116, 3, 116, 3, 116, 5, 116, 1324, 10, 116, 3, 116, 5, 116, 1327,
	10, 116, 3, 117, 3, 117, 3, 117, 3, 117, 7, 117, 1333, 10, 117, 12, 117,
	14, 117, 1336, 11, 117, 3, 117, 5, 117, 1339, 10, 117, 5, 117, 1341, 10,
	117, 3, 117, 3, 117, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3,
	118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 5,
	118, 1360, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 1366, 10, 119,
	3, 119, 3, 119, 3, 119, 3, 119, 3, 120, 3, 120, 3, 120, 3, 120, 5, 120,
	1376, 10, 120, 3, 120, 5, 120, 1379, 10, 120, 3, 120, 3, 120, 3, 120, 3,
	120, 3, 120, 3, 121, 3, 121, 3, 121, 5, 121, 1389, 10, 121, 3, 122, 3,
	122, 3, 122, 5, 122, 1394, 10, 122, 5, 122, 1396, 10, 122, 3, 122, 3, 122,
	3, 123, 3, 123, 3, 123, 7, 123, 1403, 10, 123, 12, 123, 14, 123, 1406,
	11, 123, 3, 124, 5, 124, 1409, 10, 124, 3, 124, 3, 124, 5, 124, 1413, 10,
	124, 3, 125, 3, 125, 3, 125, 7, 125, 1418, 10, 125, 12, 125, 14, 125, 1421,
	11, 125, 3, 126, 3, 126, 5, 126, 1425, 10, 126, 3, 126, 3, 126, 5, 126,
	1429, 10, 126, 3, 126, 3, 126, 5, 126, 1433, 10, 126, 3, 126, 3, 126, 3,
	126, 3, 126, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 5, 127, 1444, 10,
	127, 3, 127, 3, 127, 3, 127, 3, 127, 5, 127, 1450, 10, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 127, 5, 127, 1457, 10, 127, 3, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 127, 3, 127, 5, 127, 1484, 10, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 5,
	127, 1496, 10, 127, 5, 127, 1498, 10, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	5, 127, 1558, 10, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 7, 127, 1573, 10,
	127, 12, 127, 14, 127, 1576, 11, 127, 3, 128, 3, 128, 3, 128, 5, 128, 1581,
	10, 128, 3, 128, 5, 128, 1584, 10, 128, 3, 129, 5, 129, 1587, 10, 129,
	3, 129, 3, 129, 5, 129, 1591, 10, 129, 3, 129, 3, 129, 3, 129, 3, 130,
	3, 130, 3, 130, 5, 130, 1599, 10, 130, 3, 130, 5, 130, 1602, 10, 130, 3,
	131, 3, 131, 3, 131, 3, 131, 3, 131, 5, 131, 1609, 10, 131, 3, 132, 3,
	132, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 5, 133, 1619, 10,
	133, 3, 134, 3, 134, 7, 134, 1623, 10, 134, 12, 134, 14, 134, 1626, 11,
	134, 3, 134, 3, 134, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 1635,
	10, 135, 3, 136, 3, 136, 3, 137, 3, 137, 5, 137, 1641, 10, 137, 3, 138,
	3, 138, 3, 139, 3, 139, 3, 139, 5, 139, 1648, 10, 139, 3, 140, 3, 140,
	3, 141, 3, 141, 3, 141, 3, 142, 3, 142, 3, 142, 3, 143, 3, 143, 3, 143,
	3, 143, 5, 143, 1662, 10, 143, 3, 143, 2, 6, 22, 24, 116, 252, 144, 2,
	4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76,
	78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110,
	112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
	142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170,
	172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200,
	202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230,
	232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,
	262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 2, 17, 4, 2,
	75, 75, 110, 114, 3, 2, 13, 14, 4, 2, 103, 104, 107, 107, 4, 2, 111, 111,
	113, 113, 5, 2, 71, 71, 98, 98, 102, 102, 4, 2, 15, 15, 17, 17, 3, 2, 26,
	28, 3, 2, 22, 23, 3, 2, 29, 31, 3, 2, 32, 35, 3, 2, 36, 39, 3, 2, 45, 55,
	3, 2, 59, 63, 5, 2, 115, 115, 120, 120, 126, 126, 7, 2, 64, 89, 91, 109,
	113, 113, 115, 117, 120, 120, 2, 1836, 2, 286, 3, 2, 2, 2, 4, 291, 3, 2,
	2, 2, 6, 293, 3, 2, 2, 2, 8, 299, 3, 2, 2, 2, 10, 312, 3, 2, 2, 2, 12,
	314, 3, 2, 2, 2, 14, 317, 3, 2, 2, 2, 16, 323, 3, 2, 2, 2, 18, 331, 3,
	2, 2, 2, 20, 338, 3, 2, 2, 2, 22, 340, 3, 2, 2, 2, 24, 372, 3, 2, 2, 2,
	26, 383, 3, 2, 2, 2, 28, 385, 3, 2, 2, 2, 30, 391, 3, 2, 2, 2, 32, 393,
	3, 2, 2, 2, 34, 397, 3, 2, 2, 2, 36, 410, 3, 2, 2, 2, 38, 412, 3, 2, 2,
	2, 40, 418, 3, 2, 2, 2, 42, 422, 3, 2, 2, 2, 44, 439, 3, 2, 2, 2, 46, 441,
	3, 2, 2, 2, 48, 446, 3, 2, 2, 2, 50, 450, 3, 2, 2, 2, 52, 459, 3, 2, 2,
	2, 54, 469, 3, 2, 2, 2, 56, 481, 3, 2, 2, 2, 58, 494, 3, 2, 2, 2, 60, 497,
	3, 2, 2, 2, 62, 510, 3, 2, 2, 2, 64, 514, 3, 2, 2, 2, 66, 537, 3, 2, 2,
	2, 68, 539, 3, 2, 2, 2, 70, 549, 3, 2, 2, 2, 72, 552, 3, 2, 2, 2, 74, 568,
	3, 2, 2, 2, 76, 574, 3, 2, 2, 2, 78, 583, 3, 2, 2, 2, 80, 587, 3, 2, 2,
	2, 82, 589, 3, 2, 2, 2, 84, 601, 3, 2, 2, 2, 86, 608, 3, 2, 2, 2, 88, 614,
	3, 2, 2, 2, 90, 624, 3, 2, 2, 2, 92, 640, 3, 2, 2, 2, 94, 657, 3, 2, 2,
	2, 96, 660, 3, 2, 2, 2, 98, 669, 3, 2, 2, 2, 100, 679, 3, 2, 2, 2, 102,
	683, 3, 2, 2, 2, 104, 691, 3, 2, 2, 2, 106, 696, 3, 2, 2, 2, 108, 704,
	3, 2, 2, 2, 110, 716, 3, 2, 2, 2, 112, 722, 3, 2, 2, 2, 114, 726, 3, 2,
	2, 2, 116, 737, 3, 2, 2, 2, 118, 747, 3, 2, 2, 2, 120, 751, 3, 2, 2, 2,
	122, 783, 3, 2, 2, 2, 124, 785, 3, 2, 2, 2, 126, 792, 3, 2, 2, 2, 128,
	796, 3, 2, 2, 2, 130, 804, 3, 2, 2, 2, 132, 811, 3, 2, 2, 2, 134, 824,
	3, 2, 2, 2, 136, 837, 3, 2, 2, 2, 138, 874, 3, 2, 2, 2, 140, 876, 3, 2,
	2, 2, 142, 887, 3, 2, 2, 2, 144, 902, 3, 2, 2, 2, 146, 904, 3, 2, 2, 2,
	148, 909, 3, 2, 2, 2, 150, 987, 3, 2, 2, 2, 152, 989, 3, 2, 2, 2, 154,
	991, 3, 2, 2, 2, 156, 998, 3, 2, 2, 2, 158, 1005, 3, 2, 2, 2, 160, 1012,
	3, 2, 2, 2, 162, 1019, 3, 2, 2, 2, 164, 1025, 3, 2, 2, 2, 166, 1031, 3,
	2, 2, 2, 168, 1044, 3, 2, 2, 2, 170, 1048, 3, 2, 2, 2, 172, 1054, 3, 2,
	2, 2, 174, 1059, 3, 2, 2, 2, 176, 1063, 3, 2, 2, 2, 178, 1068, 3, 2, 2,
	2, 180, 1077, 3, 2, 2, 2, 182, 1083, 3, 2, 2, 2, 184, 1086, 3, 2, 2, 2,
	186, 1089, 3, 2, 2, 2, 188, 1100, 3, 2, 2, 2, 190, 1111, 3, 2, 2, 2, 192,
	1116, 3, 2, 2, 2, 194, 1125, 3, 2, 2, 2, 196, 1128, 3, 2, 2, 2, 198, 1138,
	3, 2, 2, 2, 200, 1169, 3, 2, 2, 2, 202, 1172, 3, 2, 2, 2, 204, 1183, 3,
	2, 2, 2, 206, 1187, 3, 2, 2, 2, 208, 1199, 3, 2, 2, 2, 210, 1213, 3, 2,
	2, 2, 212, 1227, 3, 2, 2, 2, 214, 1230, 3, 2, 2, 2, 216, 1244, 3, 2, 2,
	2, 218, 1275, 3, 2, 2, 2, 220, 1278, 3, 2, 2, 2, 222, 1294, 3, 2, 2, 2,
	224, 1298, 3, 2, 2, 2, 226, 1300, 3, 2, 2, 2, 228, 1306, 3, 2, 2, 2, 230,
	1319, 3, 2, 2, 2, 232, 1328, 3, 2, 2, 2, 234, 1359, 3, 2, 2, 2, 236, 1361,
	3, 2, 2, 2, 238, 1371, 3, 2, 2, 2, 240, 1388, 3, 2, 2, 2, 242, 1390, 3,
	2, 2, 2, 244, 1399, 3, 2, 2, 2, 246, 1408, 3, 2, 2, 2, 248, 1414, 3, 2,
	2, 2, 250, 1422, 3, 2, 2, 2, 252, 1497, 3, 2, 2, 2, 254, 1583, 3, 2, 2,
	2, 256, 1586, 3, 2, 2, 2, 258, 1601, 3, 2, 2, 2, 260, 1608, 3, 2, 2, 2,
	262, 1610, 3, 2, 2, 2, 264, 1618, 3, 2, 2, 2, 266, 1620, 3, 2, 2, 2, 268,
	1634, 3, 2, 2, 2, 270, 1636, 3, 2, 2, 2, 272, 1640, 3, 2, 2, 2, 274, 1642,
	3, 2, 2, 2, 276, 1647, 3, 2, 2, 2, 278, 1649, 3, 2, 2, 2, 280, 1651, 3,
	2, 2, 2, 282, 1654, 3, 2, 2, 2, 284, 1661, 3, 2, 2, 2, 286, 287, 7, 15,
	2, 2, 287, 288, 5, 252, 127, 2, 288, 3, 3, 2, 2, 2, 289, 292, 5, 226, 114,
	2, 290, 292, 5, 232, 117, 2, 291, 289, 3, 2, 2, 2, 291, 290, 3, 2, 2, 2,
	292, 5, 3, 2, 2, 2, 293, 295, 7, 32, 2, 2, 294, 296, 5, 8, 5, 2, 295, 294,
	3, 2, 2, 2, 295, 296, 3, 2, 2, 2, 296, 297, 3, 2, 2, 2, 297, 298, 7, 33,
	2, 2, 298, 7, 3, 2, 2, 2, 299, 304, 5, 10, 6, 2, 300, 301, 7, 14, 2, 2,
	301, 303, 5, 10, 6, 2, 302, 300, 3, 2, 2, 2, 303, 306, 3, 2, 2, 2, 304,
	302, 3, 2, 2, 2, 304, 305, 3, 2, 2, 2, 305, 9, 3, 2, 2, 2, 306, 304, 3,
	2, 2, 2, 307, 309, 7, 126, 2, 2, 308, 310, 5, 12, 7, 2, 309, 308, 3, 2,
	2, 2, 309, 310, 3, 2, 2, 2, 310, 313, 3, 2, 2, 2, 311, 313, 5, 6, 4, 2,
	312, 307, 3, 2, 2, 2, 312, 311, 3, 2, 2, 2, 313, 11, 3, 2, 2, 2, 314, 315,
	7, 96, 2, 2, 315, 316, 5, 20, 11, 2, 316, 13, 3, 2, 2, 2, 317, 319, 7,
	32, 2, 2, 318, 320, 5, 16, 9, 2, 319, 318, 3, 2, 2, 2, 319, 320, 3, 2,
	2, 2, 320, 321, 3, 2, 2, 2, 321, 322, 7, 33, 2, 2, 322, 15, 3, 2, 2, 2,
	323, 328, 5, 18, 10, 2, 324, 325, 7, 14, 2, 2, 325, 327, 5, 18, 10, 2,
	326, 324, 3, 2, 2, 2, 327, 330, 3, 2, 2, 2, 328, 326, 3, 2, 2, 2, 328,
	329, 3, 2, 2, 2, 329, 17, 3, 2, 2, 2, 330, 328, 3, 2, 2, 2, 331, 332, 5,
	20, 11, 2, 332, 19, 3, 2, 2, 2, 333, 339, 5, 22, 12, 2, 334, 339, 5, 52,
	27, 2, 335, 339, 5, 54, 28, 2, 336, 339, 5, 32, 17, 2, 337, 339, 7, 127,
	2, 2, 338, 333, 3, 2, 2, 2, 338, 334, 3, 2, 2, 2, 338, 335, 3, 2, 2, 2,
	338, 336, 3, 2, 2, 2, 338, 337, 3, 2, 2, 2, 339, 21, 3, 2, 2, 2, 340, 341,
	8, 12, 1, 2, 341, 342, 5, 24, 13, 2, 342, 351, 3, 2, 2, 2, 343, 344, 12,
	5, 2, 2, 344, 345, 7, 42, 2, 2, 345, 350, 5, 22, 12, 6, 346, 347, 12, 4,
	2, 2, 347, 348, 7, 40, 2, 2, 348, 350, 5, 22, 12, 5, 349, 343, 3, 2, 2,
	2, 349, 346, 3, 2, 2, 2, 350, 353, 3, 2, 2, 2, 351, 349, 3, 2, 2, 2, 351,
	352, 3, 2, 2, 2, 352, 23, 3, 2, 2, 2, 353, 351, 3, 2, 2, 2, 354, 355, 8,
	13, 1, 2, 355, 356, 7, 8, 2, 2, 356, 357, 5, 20, 11, 2, 357, 358, 7, 9,
	2, 2, 358, 373, 3, 2, 2, 2, 359, 373, 5, 26, 14, 2, 360, 373, 5, 28, 15,
	2, 361, 373, 5, 38, 20, 2, 362, 363, 7, 6, 2, 2, 363, 364, 5, 50, 26, 2,
	364, 365, 7, 7, 2, 2, 365, 373, 3, 2, 2, 2, 366, 373, 5, 56, 29, 2, 367,
	373, 7, 82, 2, 2, 368, 369, 5, 28, 15, 2, 369, 370, 7, 124, 2, 2, 370,
	371, 5, 24, 13, 3, 371, 373, 3, 2, 2, 2, 372, 354, 3, 2, 2, 2, 372, 359,
	3, 2, 2, 2, 372, 360, 3, 2, 2, 2, 372, 361, 3, 2, 2, 2, 372, 362, 3, 2,
	2, 2, 372, 366, 3, 2, 2, 2, 372, 367, 3, 2, 2, 2, 372, 368, 3, 2, 2, 2,
	373, 380, 3, 2, 2, 2, 374, 375, 12, 7, 2, 2, 375, 376, 6, 13, 5, 2, 376,
	377, 7, 6, 2, 2, 377, 379, 7, 7, 2, 2, 378, 374, 3, 2, 2, 2, 379, 382,
	3, 2, 2, 2, 380, 378, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2, 381, 25, 3, 2,
	2, 2, 382, 380, 3, 2, 2, 2, 383, 384, 9, 2, 2, 2, 384, 27, 3, 2, 2, 2,
	385, 387, 5, 36, 19, 2, 386, 388, 5, 30, 16, 2, 387, 386, 3, 2, 2, 2, 387,
	388, 3, 2, 2, 2, 388, 29, 3, 2, 2, 2, 389, 392, 5, 34, 18, 2, 390, 392,
	5, 32, 17, 2, 391, 389, 3, 2, 2, 2, 391, 390, 3, 2, 2, 2, 392, 31, 3, 2,
	2, 2, 393, 394, 7, 32, 2, 2, 394, 395, 5, 16, 9, 2, 395, 396, 7, 33, 2,
	2, 396, 33, 3, 2, 2, 2, 397, 398, 7, 32, 2, 2, 398, 399, 5, 16, 9, 2, 399,
	400, 7, 32, 2, 2, 400, 406, 5, 16, 9, 2, 401, 402, 7, 33, 2, 2, 402, 403,
	5, 4, 3, 2, 403, 404, 7, 33, 2, 2, 404, 407, 3, 2, 2, 2, 405, 407, 7, 29,
	2, 2, 406, 401, 3, 2, 2, 2, 406, 405, 3, 2, 2, 2, 407, 35, 3, 2, 2, 2,
	408, 411, 7, 126, 2, 2, 409, 411, 5, 108, 55, 2, 410, 408, 3, 2, 2, 2,
	410, 409, 3, 2, 2, 2, 411, 37, 3, 2, 2, 2, 412, 414, 7, 10, 2, 2, 413,
	415, 5, 40, 21, 2, 414, 413, 3, 2, 2, 2, 414, 415, 3, 2, 2, 2, 415, 416,
	3, 2, 2, 2, 416, 417, 7, 12, 2, 2, 417, 39, 3, 2, 2, 2, 418, 420, 5, 42,
	22, 2, 419, 421, 9, 3, 2, 2, 420, 419, 3, 2, 2, 2, 420, 421, 3, 2, 2, 2,
	421, 41, 3, 2, 2, 2, 422, 427, 5, 44, 23, 2, 423, 424, 9, 3, 2, 2, 424,
	426, 5, 44, 23, 2, 425, 423, 3, 2, 2, 2, 426, 429, 3, 2, 2, 2, 427, 425,
	3, 2, 2, 2, 427, 428, 3, 2, 2, 2, 428, 43, 3, 2, 2, 2, 429, 427, 3, 2,
	2, 2, 430, 440, 5, 60, 31, 2, 431, 440, 5, 64, 33, 2, 432, 440, 5, 82,
	42, 2, 433, 440, 5, 84, 43, 2, 434, 437, 5, 86, 44, 2, 435, 436, 7, 56,
	2, 2, 436, 438, 5, 20, 11, 2, 437, 435, 3, 2, 2, 2, 437, 438, 3, 2, 2,
	2, 438, 440, 3, 2, 2, 2, 439, 430, 3, 2, 2, 2, 439, 431, 3, 2, 2, 2, 439,
	432, 3, 2, 2, 2, 439, 433, 3, 2, 2, 2, 439, 434, 3, 2, 2, 2, 440, 45, 3,
	2, 2, 2, 441, 442, 5, 24, 13, 2, 442, 443, 6, 24, 6, 2, 443, 444, 7, 6,
	2, 2, 444, 445, 7, 7, 2, 2, 445, 47, 3, 2, 2, 2, 446, 447, 7, 6, 2, 2,
	447, 448, 5, 50, 26, 2, 448, 449, 7, 7, 2, 2, 449, 49, 3, 2, 2, 2, 450,
	455, 5, 20, 11, 2, 451, 452, 7, 14, 2, 2, 452, 454, 5, 20, 11, 2, 453,
	451, 3, 2, 2, 2, 454, 457, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 455, 456,
	3, 2, 2, 2, 456, 51, 3, 2, 2, 2, 457, 455, 3, 2, 2, 2, 458, 460, 5, 6,
	4, 2, 459, 458, 3, 2, 2, 2, 459, 460, 3, 2, 2, 2, 460, 461, 3, 2, 2, 2,
	461, 463, 7, 8, 2, 2, 462, 464, 5, 66, 34, 2, 463, 462, 3, 2, 2, 2, 463,
	464, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466, 7, 9, 2, 2, 466, 467,
	7, 56, 2, 2, 467, 468, 5, 20, 11, 2, 468, 53, 3, 2, 2, 2, 469, 471, 7,
	70, 2, 2, 470, 472, 5, 6, 4, 2, 471, 470, 3, 2, 2, 2, 471, 472, 3, 2, 2,
	2, 472, 473, 3, 2, 2, 2, 473, 475, 7, 8, 2, 2, 474, 476, 5, 66, 34, 2,
	475, 474, 3, 2, 2, 2, 475, 476, 3, 2, 2, 2, 476, 477, 3, 2, 2, 2, 477,
	478, 7, 9, 2, 2, 478, 479, 7, 56, 2, 2, 479, 480, 5, 20, 11, 2, 480, 55,
	3, 2, 2, 2, 481, 482, 7, 67, 2, 2, 482, 483, 5, 58, 30, 2, 483, 57, 3,
	2, 2, 2, 484, 495, 7, 126, 2, 2, 485, 486, 5, 272, 137, 2, 486, 487, 7,
	19, 2, 2, 487, 489, 3, 2, 2, 2, 488, 485, 3, 2, 2, 2, 489, 490, 3, 2, 2,
	2, 490, 488, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492,
	493, 5, 272, 137, 2, 493, 495, 3, 2, 2, 2, 494, 484, 3, 2, 2, 2, 494, 488,
	3, 2, 2, 2, 495, 59, 3, 2, 2, 2, 496, 498, 7, 92, 2, 2, 497, 496, 3, 2,
	2, 2, 497, 498, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 501, 5, 240, 121,
	2, 500, 502, 7, 16, 2, 2, 501, 500, 3, 2, 2, 2, 501, 502, 3, 2, 2, 2, 502,
	504, 3, 2, 2, 2, 503, 505, 5, 62, 32, 2, 504, 503, 3, 2, 2, 2, 504, 505,
	3, 2, 2, 2, 505, 508, 3, 2, 2, 2, 506, 507, 7, 56, 2, 2, 507, 509, 5, 20,
	11, 2, 508, 506, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 61, 3, 2, 2, 2,
	510, 511, 7, 17, 2, 2, 511, 512, 5, 20, 11, 2, 512, 63, 3, 2, 2, 2, 513,
	515, 5, 6, 4, 2, 514, 513, 3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515, 516,
	3, 2, 2, 2, 516, 518, 7, 8, 2, 2, 517, 519, 5, 66, 34, 2, 518, 517, 3,
	2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 520, 3, 2, 2, 2, 520, 522, 7, 9, 2,
	2, 521, 523, 5, 62, 32, 2, 522, 521, 3, 2, 2, 2, 522, 523, 3, 2, 2, 2,
	523, 65, 3, 2, 2, 2, 524, 538, 5, 74, 38, 2, 525, 530, 5, 70, 36, 2, 526,
	527, 7, 14, 2, 2, 527, 529, 5, 70, 36, 2, 528, 526, 3, 2, 2, 2, 529, 532,
	3, 2, 2, 2, 530, 528, 3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 535, 3, 2,
	2, 2, 532, 530, 3, 2, 2, 2, 533, 534, 7, 14, 2, 2, 534, 536, 5, 74, 38,
	2, 535, 533, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 538, 3, 2, 2, 2, 537,
	524, 3, 2, 2, 2, 537, 525, 3, 2, 2, 2, 538, 67, 3, 2, 2, 2, 539, 544, 5,
	76, 39, 2, 540, 541, 7, 14, 2, 2, 541, 543, 5, 76, 39, 2, 542, 540, 3,
	2, 2, 2, 543, 546, 3, 2, 2, 2, 544, 542, 3, 2, 2, 2, 544, 545, 3, 2, 2,
	2, 545, 69, 3, 2, 2, 2, 546, 544, 3, 2, 2, 2, 547, 550, 5, 76, 39, 2, 548,
	550, 5, 72, 37, 2, 549, 547, 3, 2, 2, 2, 549, 548, 3, 2, 2, 2, 550, 71,
	3, 2, 2, 2, 551, 553, 5, 112, 57, 2, 552, 551, 3, 2, 2, 2, 552, 553, 3,
	2, 2, 2, 553, 555, 3, 2, 2, 2, 554, 556, 5, 78, 40, 2, 555, 554, 3, 2,
	2, 2, 555, 556, 3, 2, 2, 2, 556, 557, 3, 2, 2, 2, 557, 566, 5, 80, 41,
	2, 558, 560, 7, 16, 2, 2, 559, 561, 5, 62, 32, 2, 560, 559, 3, 2, 2, 2,
	560, 561, 3, 2, 2, 2, 561, 567, 3, 2, 2, 2, 562, 564, 5, 62, 32, 2, 563,
	562, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 567,
	5, 2, 2, 2, 566, 558, 3, 2, 2, 2, 566, 563, 3, 2, 2, 2, 567, 73, 3, 2,
	2, 2, 568, 569, 7, 18, 2, 2, 569, 571, 5, 252, 127, 2, 570, 572, 5, 62,
	32, 2, 571, 570, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2, 572, 75, 3, 2, 2, 2,
	573, 575, 5, 112, 57, 2, 574, 573, 3, 2, 2, 2, 574, 575, 3, 2, 2, 2, 575,
	577, 3, 2, 2, 2, 576, 578, 5, 78, 40, 2, 577, 576, 3, 2, 2, 2, 577, 578,
	3, 2, 2, 2, 578, 579, 3, 2, 2, 2, 579, 581, 5, 80, 41, 2, 580, 582, 5,
	62, 32, 2, 581, 580, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2, 582, 77, 3, 2, 2,
	2, 583, 584, 9, 4, 2, 2, 584, 79, 3, 2, 2, 2, 585, 588, 5, 272, 137, 2,
	586, 588, 5, 4, 3, 2, 587, 585, 3, 2, 2, 2, 587, 586, 3, 2, 2, 2, 588,
	81, 3, 2, 2, 2, 589, 591, 7, 70, 2, 2, 590, 592, 5, 6, 4, 2, 591, 590,
	3, 2, 2, 2, 591, 592, 3, 2, 2, 2, 592, 593, 3, 2, 2, 2, 593, 595, 7, 8,
	2, 2, 594, 596, 5, 66, 34, 2, 595, 594, 3, 2, 2, 2, 595, 596, 3, 2, 2,
	2, 596, 597, 3, 2, 2, 2, 597, 599, 7, 9, 2, 2, 598, 600, 5, 62, 32, 2,
	599, 598, 3, 2, 2, 2, 599, 600, 3, 2, 2, 2, 600, 83, 3, 2, 2, 2, 601, 602,
	7, 6, 2, 2, 602, 603, 7, 126, 2, 2, 603, 604, 7, 17, 2, 2, 604, 605, 9,
	5, 2, 2, 605, 606, 7, 7, 2, 2, 606, 607, 5, 62, 32, 2, 607, 85, 3, 2, 2,
	2, 608, 610, 5, 240, 121, 2, 609, 611, 7, 16, 2, 2, 610, 609, 3, 2, 2,
	2, 610, 611, 3, 2, 2, 2, 611, 612, 3, 2, 2, 2, 612, 613, 5, 64, 33, 2,
	613, 87, 3, 2, 2, 2, 614, 615, 7, 115, 2, 2, 615, 617, 7, 126, 2, 2, 616,
	618, 5, 6, 4, 2, 617, 616, 3, 2, 2, 2, 617, 618, 3, 2, 2, 2, 618, 619,
	3, 2, 2, 2, 619, 620, 7, 15, 2, 2, 620, 621, 5, 20, 11, 2, 621, 622, 7,
	13, 2, 2, 622, 89, 3, 2, 2, 2, 623, 625, 5, 78, 40, 2, 624, 623, 3, 2,
	2, 2, 624, 625, 3, 2, 2, 2, 625, 626, 3, 2, 2, 2, 626, 627, 7, 118, 2,
	2, 627, 629, 7, 8, 2, 2, 628, 630, 5, 218, 110, 2, 629, 628, 3, 2, 2, 2,
	629, 630, 3, 2, 2, 2, 630, 631, 3, 2, 2, 2, 631, 637, 7, 9, 2, 2, 632,
	633, 7, 10, 2, 2, 633, 634, 5, 224, 113, 2, 634, 635, 7, 12, 2, 2, 635,
	638, 3, 2, 2, 2, 636, 638, 7, 13, 2, 2, 637, 632, 3, 2, 2, 2, 637, 636,
	3, 2, 2, 2, 637, 638, 3, 2, 2, 2, 638, 91, 3, 2, 2, 2, 639, 641, 7, 99,
	2, 2, 640, 639, 3, 2, 2, 2, 640, 641, 3, 2, 2, 2, 641, 643, 3, 2, 2, 2,
	642, 644, 7, 122, 2, 2, 643, 642, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644,
	645, 3, 2, 2, 2, 645, 646, 7, 105, 2, 2, 646, 648, 7, 126, 2, 2, 647, 649,
	5, 6, 4, 2, 648, 647, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649, 651, 3, 2,
	2, 2, 650, 652, 5, 94, 48, 2, 651, 650, 3, 2, 2, 2, 651, 652, 3, 2, 2,
	2, 652, 653, 3, 2, 2, 2, 653, 655, 5, 38, 20, 2, 654, 656, 7, 13, 2, 2,
	655, 654, 3, 2, 2, 2, 655, 656, 3, 2, 2, 2, 656, 93, 3, 2, 2, 2, 657, 658,
	7, 96, 2, 2, 658, 659, 5, 96, 49, 2, 659, 95, 3, 2, 2, 2, 660, 665, 5,
	28, 15, 2, 661, 662, 7, 14, 2, 2, 662, 664, 5, 28, 15, 2, 663, 661, 3,
	2, 2, 2, 664, 667, 3, 2, 2, 2, 665, 663, 3, 2, 2, 2, 665, 666, 3, 2, 2,
	2, 666, 97, 3, 2, 2, 2, 667, 665, 3, 2, 2, 2, 668, 670, 7, 98, 2, 2, 669,
	668, 3, 2, 2, 2, 669, 670, 3, 2, 2, 2, 670, 671, 3, 2, 2, 2, 671, 672,
	7, 95, 2, 2, 672, 673, 7, 126, 2, 2, 673, 675, 7, 10, 2, 2, 674, 676, 5,
	100, 51, 2, 675, 674, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 677, 3, 2,
	2, 2, 677, 678, 7, 12, 2, 2, 678, 99, 3, 2, 2, 2, 679, 681, 5, 102, 52,
	2, 680, 682, 7, 14, 2, 2, 681, 680, 3, 2, 2, 2, 681, 682, 3, 2, 2, 2, 682,
	101, 3, 2, 2, 2, 683, 688, 5, 104, 53, 2, 684, 685, 7, 14, 2, 2, 685, 687,
	5, 104, 53, 2, 686, 684, 3, 2, 2, 2, 687, 690, 3, 2, 2, 2, 688, 686, 3,
	2, 2, 2, 688, 689, 3, 2, 2, 2, 689, 103, 3, 2, 2, 2, 690, 688, 3, 2, 2,
	2, 691, 694, 5, 240, 121, 2, 692, 693, 7, 15, 2, 2, 693, 695, 5, 252, 127,
	2, 694, 692, 3, 2, 2, 2, 694, 695, 3, 2, 2, 2, 695, 105, 3, 2, 2, 2, 696,
	697, 7, 119, 2, 2, 697, 698, 5, 108, 55, 2, 698, 700, 7, 10, 2, 2, 699,
	701, 5, 126, 64, 2, 700, 699, 3, 2, 2, 2, 700, 701, 3, 2, 2, 2, 701, 702,
	3, 2, 2, 2, 702, 703, 7, 12, 2, 2, 703, 107, 3, 2, 2, 2, 704, 713, 7, 126,
	2, 2, 705, 707, 7, 19, 2, 2, 706, 705, 3, 2, 2, 2, 707, 708, 3, 2, 2, 2,
	708, 706, 3, 2, 2, 2, 708, 709, 3, 2, 2, 2, 709, 710, 3, 2, 2, 2, 710,
	712, 7, 126, 2, 2, 711, 706, 3, 2, 2, 2, 712, 715, 3, 2, 2, 2, 713, 711,
	3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 109, 3, 2, 2, 2, 715, 713, 3, 2,
	2, 2, 716, 717, 7, 126, 2, 2, 717, 718, 7, 15, 2, 2, 718, 719, 5, 108,
	55, 2, 719, 720, 7, 13, 2, 2, 720, 111, 3, 2, 2, 2, 721, 723, 5, 114, 58,
	2, 722, 721, 3, 2, 2, 2, 723, 724, 3, 2, 2, 2, 724, 722, 3, 2, 2, 2, 724,
	725, 3, 2, 2, 2, 725, 113, 3, 2, 2, 2, 726, 729, 7, 125, 2, 2, 727, 730,
	5, 116, 59, 2, 728, 730, 5, 118, 60, 2, 729, 727, 3, 2, 2, 2, 729, 728,
	3, 2, 2, 2, 730, 115, 3, 2, 2, 2, 731, 732, 8, 59, 1, 2, 732, 738, 7, 126,
	2, 2, 733, 734, 7, 8, 2, 2, 734, 735, 5, 252, 127, 2, 735, 736, 7, 9, 2,
	2, 736, 738, 3, 2, 2, 2, 737, 731, 3, 2, 2, 2, 737, 733, 3, 2, 2, 2, 738,
	744, 3, 2, 2, 2, 739, 740, 12, 4, 2, 2, 740, 741, 7, 19, 2, 2, 741, 743,
	5, 272, 137, 2, 742, 739, 3, 2, 2, 2, 743, 746, 3, 2, 2, 2, 744, 742, 3,
	2, 2, 2, 744, 745, 3, 2, 2, 2, 745, 117, 3, 2, 2, 2, 746, 744, 3, 2, 2,
	2, 747, 748, 5, 116, 59, 2, 748, 749, 5, 242, 122, 2, 749, 119, 3, 2, 2,
	2, 750, 752, 5, 126, 64, 2, 751, 750, 3, 2, 2, 2, 751, 752, 3, 2, 2, 2,
	752, 753, 3, 2, 2, 2, 753, 754, 7, 2, 2, 3, 754, 121, 3, 2, 2, 2, 755,
	784, 5, 124, 63, 2, 756, 784, 5, 130, 66, 2, 757, 784, 5, 136, 69, 2, 758,
	784, 5, 144, 73, 2, 759, 784, 5, 128, 65, 2, 760, 784, 5, 112, 57, 2, 761,
	784, 5, 188, 95, 2, 762, 784, 5, 92, 47, 2, 763, 784, 5, 106, 54, 2, 764,
	784, 5, 148, 75, 2, 765, 784, 5, 150, 76, 2, 766, 784, 5, 154, 78, 2, 767,
	784, 5, 156, 79, 2, 768, 784, 5, 158, 80, 2, 769, 784, 5, 160, 81, 2, 770,
	784, 5, 162, 82, 2, 771, 784, 5, 174, 88, 2, 772, 784, 5, 164, 83, 2, 773,
	784, 5, 176, 89, 2, 774, 784, 5, 178, 90, 2, 775, 784, 5, 184, 93, 2, 776,
	784, 5, 186, 94, 2, 777, 784, 5, 256, 129, 2, 778, 784, 5, 208, 105, 2,
	779, 784, 5, 138, 70, 2, 780, 784, 5, 88, 45, 2, 781, 784, 5, 98, 50, 2,
	782, 784, 5, 146, 74, 2, 783, 755, 3, 2, 2, 2, 783, 756, 3, 2, 2, 2, 783,
	757, 3, 2, 2, 2, 783, 758, 3, 2, 2, 2, 783, 759, 3, 2, 2, 2, 783, 760,
	3, 2, 2, 2, 783, 761, 3, 2, 2, 2, 783, 762, 3, 2, 2, 2, 783, 763, 3, 2,
	2, 2, 783, 764, 3, 2, 2, 2, 783, 765, 3, 2, 2, 2, 783, 766, 3, 2, 2, 2,
	783, 767, 3, 2, 2, 2, 783, 768, 3, 2, 2, 2, 783, 769, 3, 2, 2, 2, 783,
	770, 3, 2, 2, 2, 783, 771, 3, 2, 2, 2, 783, 772, 3, 2, 2, 2, 783, 773,
	3, 2, 2, 2, 783, 774, 3, 2, 2, 2, 783, 775, 3, 2, 2, 2, 783, 776, 3, 2,
	2, 2, 783, 777, 3, 2, 2, 2, 783, 778, 3, 2, 2, 2, 783, 779, 3, 2, 2, 2,
	783, 780, 3, 2, 2, 2, 783, 781, 3, 2, 2, 2, 783, 782, 3, 2, 2, 2, 784,
	123, 3, 2, 2, 2, 785, 787, 7, 10, 2, 2, 786, 788, 5, 126, 64, 2, 787, 786,
	3, 2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 790, 7, 12,
	2, 2, 790, 125, 3, 2, 2, 2, 791, 793, 5, 122, 62, 2, 792, 791, 3, 2, 2,
	2, 793, 794, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794, 795, 3, 2, 2, 2, 795,
	127, 3, 2, 2, 2, 796, 800, 7, 123, 2, 2, 797, 798, 7, 126, 2, 2, 798, 801,
	5, 64, 33, 2, 799, 801, 5, 138, 70, 2, 800, 797, 3, 2, 2, 2, 800, 799,
	3, 2, 2, 2, 801, 802, 3, 2, 2, 2, 802, 803, 5, 284, 143, 2, 803, 129, 3,
	2, 2, 2, 804, 807, 7, 100, 2, 2, 805, 808, 5, 132, 67, 2, 806, 808, 5,
	110, 56, 2, 807, 805, 3, 2, 2, 2, 807, 806, 3, 2, 2, 2, 808, 131, 3, 2,
	2, 2, 809, 812, 7, 26, 2, 2, 810, 812, 5, 134, 68, 2, 811, 809, 3, 2, 2,
	2, 811, 810, 3, 2, 2, 2, 812, 815, 3, 2, 2, 2, 813, 814, 7, 90, 2, 2, 814,
	816, 5, 272, 137, 2, 815, 813, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 817,
	3, 2, 2, 2, 817, 818, 7, 91, 2, 2, 818, 819, 7, 127, 2, 2, 819, 820, 5,
	284, 143, 2, 820, 133, 3, 2, 2, 2, 821, 822, 5, 272, 137, 2, 822, 823,
	7, 14, 2, 2, 823, 825, 3, 2, 2, 2, 824, 821, 3, 2, 2, 2, 824, 825, 3, 2,
	2, 2, 825, 826, 3, 2, 2, 2, 826, 827, 7, 10, 2, 2, 827, 832, 5, 272, 137,
	2, 828, 829, 7, 14, 2, 2, 829, 831, 5, 272, 137, 2, 830, 828, 3, 2, 2,
	2, 831, 834, 3, 2, 2, 2, 832, 830, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833,
	835, 3, 2, 2, 2, 834, 832, 3, 2, 2, 2, 835, 836, 7, 12, 2, 2, 836, 135,
	3, 2, 2, 2, 837, 839, 7, 99, 2, 2, 838, 840, 7, 84, 2, 2, 839, 838, 3,
	2, 2, 2, 839, 840, 3, 2, 2, 2, 840, 843, 3, 2, 2, 2, 841, 844, 5, 132,
	67, 2, 842, 844, 5, 122, 62, 2, 843, 841, 3, 2, 2, 2, 843, 842, 3, 2, 2,
	2, 844, 137, 3, 2, 2, 2, 845, 847, 5, 4, 3, 2, 846, 848, 5, 62, 32, 2,
	847, 846, 3, 2, 2, 2, 847, 848, 3, 2, 2, 2, 848, 849, 3, 2, 2, 2, 849,
	851, 5, 2, 2, 2, 850, 852, 7, 13, 2, 2, 851, 850, 3, 2, 2, 2, 851, 852,
	3, 2, 2, 2, 852, 875, 3, 2, 2, 2, 853, 855, 5, 78, 40, 2, 854, 853, 3,
	2, 2, 2, 854, 855, 3, 2, 2, 2, 855, 857, 3, 2, 2, 2, 856, 858, 5, 152,
	77, 2, 857, 856, 3, 2, 2, 2, 857, 858, 3, 2, 2, 2, 858, 860, 3, 2, 2, 2,
	859, 861, 7, 92, 2, 2, 860, 859, 3, 2, 2, 2, 860, 861, 3, 2, 2, 2, 861,
	862, 3, 2, 2, 2, 862, 864, 5, 140, 71, 2, 863, 865, 7, 13, 2, 2, 864, 863,
	3, 2, 2, 2, 864, 865, 3, 2, 2, 2, 865, 875, 3, 2, 2, 2, 866, 868, 7, 122,
	2, 2, 867, 869, 5, 152, 77, 2, 868, 867, 3, 2, 2, 2, 868, 869, 3, 2, 2,
	2, 869, 870, 3, 2, 2, 2, 870, 872, 5, 140, 71, 2, 871, 873, 7, 13, 2, 2,
	872, 871, 3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 875, 3, 2, 2, 2, 874,
	845, 3, 2, 2, 2, 874, 854, 3, 2, 2, 2, 874, 866, 3, 2, 2, 2, 875, 139,
	3, 2, 2, 2, 876, 881, 5, 142, 72, 2, 877, 878, 7, 14, 2, 2, 878, 880, 5,
	142, 72, 2, 879, 877, 3, 2, 2, 2, 880, 883, 3, 2, 2, 2, 881, 879, 3, 2,
	2, 2, 881, 882, 3, 2, 2, 2, 882, 141, 3, 2, 2, 2, 883, 881, 3, 2, 2, 2,
	884, 888, 5, 274, 138, 2, 885, 888, 5, 226, 114, 2, 886, 888, 5, 232, 117,
	2, 887, 884, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2, 887, 886, 3, 2, 2, 2, 888,
	890, 3, 2, 2, 2, 889, 891, 5, 62, 32, 2, 890, 889, 3, 2, 2, 2, 890, 891,
	3, 2, 2, 2, 891, 893, 3, 2, 2, 2, 892, 894, 5, 252, 127, 2, 893, 892, 3,
	2, 2, 2, 893, 894, 3, 2, 2, 2, 894, 900, 3, 2, 2, 2, 895, 897, 7, 15, 2,
	2, 896, 898, 5, 6, 4, 2, 897, 896, 3, 2, 2, 2, 897, 898, 3, 2, 2, 2, 898,
	899, 3, 2, 2, 2, 899, 901, 5, 252, 127, 2, 900, 895, 3, 2, 2, 2, 900, 901,
	3, 2, 2, 2, 901, 143, 3, 2, 2, 2, 902, 903, 7, 13, 2, 2, 903, 145, 3, 2,
	2, 2, 904, 905, 6, 74, 8, 2, 905, 907, 5, 248, 125, 2, 906, 908, 7, 13,
	2, 2, 907, 906, 3, 2, 2, 2, 907, 908, 3, 2, 2, 2, 908, 147, 3, 2, 2, 2,
	909, 910, 7, 85, 2, 2, 910, 911, 7, 8, 2, 2, 911, 912, 5, 248, 125, 2,
	912, 913, 7, 9, 2, 2, 913, 916, 5, 122, 62, 2, 914, 915, 7, 69, 2, 2, 915,
	917, 5, 122, 62, 2, 916, 914, 3, 2, 2, 2, 916, 917, 3, 2, 2, 2, 917, 149,
	3, 2, 2, 2, 918, 919, 7, 65, 2, 2, 919, 920, 5, 122, 62, 2, 920, 921, 7,
	79, 2, 2, 921, 922, 7, 8, 2, 2, 922, 923, 5, 248, 125, 2, 923, 924, 7,
	9, 2, 2, 924, 925, 5, 284, 143, 2, 925, 988, 3, 2, 2, 2, 926, 927, 7, 79,
	2, 2, 927, 928, 7, 8, 2, 2, 928, 929, 5, 248, 125, 2, 929, 930, 7, 9, 2,
	2, 930, 931, 5, 122, 62, 2, 931, 988, 3, 2, 2, 2, 932, 933, 7, 77, 2, 2,
	933, 935, 7, 8, 2, 2, 934, 936, 5, 248, 125, 2, 935, 934, 3, 2, 2, 2, 935,
	936, 3, 2, 2, 2, 936, 937, 3, 2, 2, 2, 937, 939, 7, 13, 2, 2, 938, 940,
	5, 248, 125, 2, 939, 938, 3, 2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 941, 3,
	2, 2, 2, 941, 943, 7, 13, 2, 2, 942, 944, 5, 248, 125, 2, 943, 942, 3,
	2, 2, 2, 943, 944, 3, 2, 2, 2, 944, 945, 3, 2, 2, 2, 945, 946, 7, 9, 2,
	2, 946, 988, 5, 122, 62, 2, 947, 948, 7, 77, 2, 2, 948, 949, 7, 8, 2, 2,
	949, 950, 5, 152, 77, 2, 950, 951, 5, 140, 71, 2, 951, 953, 7, 13, 2, 2,
	952, 954, 5, 248, 125, 2, 953, 952, 3, 2, 2, 2, 953, 954, 3, 2, 2, 2, 954,
	955, 3, 2, 2, 2, 955, 957, 7, 13, 2, 2, 956, 958, 5, 248, 125, 2, 957,
	956, 3, 2, 2, 2, 957, 958, 3, 2, 2, 2, 958, 959, 3, 2, 2, 2, 959, 960,
	7, 9, 2, 2, 960, 961, 5, 122, 62, 2, 961, 988, 3, 2, 2, 2, 962, 963, 7,
	77, 2, 2, 963, 964, 7, 8, 2, 2, 964, 968, 5, 252, 127, 2, 965, 969, 7,
	88, 2, 2, 966, 967, 7, 126, 2, 2, 967, 969, 6, 76, 9, 2, 968, 965, 3, 2,
	2, 2, 968, 966, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 970, 971, 5, 248, 125,
	2, 971, 972, 7, 9, 2, 2, 972, 973, 5, 122, 62, 2, 973, 988, 3, 2, 2, 2,
	974, 975, 7, 77, 2, 2, 975, 976, 7, 8, 2, 2, 976, 977, 5, 152, 77, 2, 977,
	981, 5, 142, 72, 2, 978, 982, 7, 88, 2, 2, 979, 980, 7, 126, 2, 2, 980,
	982, 6, 76, 10, 2, 981, 978, 3, 2, 2, 2, 981, 979, 3, 2, 2, 2, 982, 983,
	3, 2, 2, 2, 983, 984, 5, 248, 125, 2, 984, 985, 7, 9, 2, 2, 985, 986, 5,
	122, 62, 2, 986, 988, 3, 2, 2, 2, 987, 918, 3, 2, 2, 2, 987, 926, 3, 2,
	2, 2, 987, 932, 3, 2, 2, 2, 987, 947, 3, 2, 2, 2, 987, 962, 3, 2, 2, 2,
	987, 974, 3, 2, 2, 2, 988, 151, 3, 2, 2, 2, 989, 990, 9, 6, 2, 2, 990,
	153, 3, 2, 2, 2, 991, 994, 7, 76, 2, 2, 992, 993, 6, 78, 11, 2, 993, 995,
	7, 126, 2, 2, 994, 992, 3, 2, 2, 2, 994, 995, 3, 2, 2, 2, 995, 996, 3,
	2, 2, 2, 996, 997, 5, 284, 143, 2, 997, 155, 3, 2, 2, 2, 998, 1001, 7,
	64, 2, 2, 999, 1000, 6, 79, 12, 2, 1000, 1002, 7, 126, 2, 2, 1001, 999,
	3, 2, 2, 2, 1001, 1002, 3, 2, 2, 2, 1002, 1003, 3, 2, 2, 2, 1003, 1004,
	5, 284, 143, 2, 1004, 157, 3, 2, 2, 2, 1005, 1008, 7, 74, 2, 2, 1006, 1007,
	6, 80, 13, 2, 1007, 1009, 5, 248, 125, 2, 1008, 1006, 3, 2, 2, 2, 1008,
	1009, 3, 2, 2, 2, 1009, 1010, 3, 2, 2, 2, 1010, 1011, 5, 284, 143, 2, 1011,
	159, 3, 2, 2, 2, 1012, 1015, 7, 109, 2, 2, 1013, 1014, 6, 81, 14, 2, 1014,
	1016, 5, 248, 125, 2, 1015, 1013, 3, 2, 2, 2, 1015, 1016, 3, 2, 2, 2, 1016,
	1017, 3, 2, 2, 2, 1017, 1018, 5, 284, 143, 2, 1018, 161, 3, 2, 2, 2, 1019,
	1020, 7, 83, 2, 2, 1020, 1021, 7, 8, 2, 2, 1021, 1022, 5, 248, 125, 2,
	1022, 1023, 7, 9, 2, 2, 1023, 1024, 5, 122, 62, 2, 1024, 163, 3, 2, 2,
	2, 1025, 1026, 7, 78, 2, 2, 1026, 1027, 7, 8, 2, 2, 1027, 1028, 5, 248,
	125, 2, 1028, 1029, 7, 9, 2, 2, 1029, 1030, 5, 166, 84, 2, 1030, 165, 3,
	2, 2, 2, 1031, 1033, 7, 10, 2, 2, 1032, 1034, 5, 168, 85, 2, 1033, 1032,
	3, 2, 2, 2, 1033, 1034, 3, 2, 2, 2, 1034, 1039, 3, 2, 2, 2, 1035, 1037,
	5, 172, 87, 2, 1036, 1038, 5, 168, 85, 2, 1037, 1036, 3, 2, 2, 2, 1037,
	1038, 3, 2, 2, 2, 1038, 1040, 3, 2, 2, 2, 1039, 1035, 3, 2, 2, 2, 1039,
	1040, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041, 1042, 7, 12, 2, 2, 1042,
	167, 3, 2, 2, 2, 1043, 1045, 5, 170, 86, 2, 1044, 1043, 3, 2, 2, 2, 1045,
	1046, 3, 2, 2, 2, 1046, 1044, 3, 2, 2, 2, 1046, 1047, 3, 2, 2, 2, 1047,
	169, 3, 2, 2, 2, 1048, 1049, 7, 68, 2, 2, 1049, 1050, 5, 248, 125, 2, 1050,
	1052, 7, 17, 2, 2, 1051, 1053, 5, 126, 64, 2, 1052, 1051, 3, 2, 2, 2, 1052,
	1053, 3, 2, 2, 2, 1053, 171, 3, 2, 2, 2, 1054, 1055, 7, 84, 2, 2, 1055,
	1057, 7, 17, 2, 2, 1056, 1058, 5, 126, 64, 2, 1057, 1056, 3, 2, 2, 2, 1057,
	1058, 3, 2, 2, 2, 1058, 173, 3, 2, 2, 2, 1059, 1060, 7, 126, 2, 2, 1060,
	1061, 7, 17, 2, 2, 1061, 1062, 5, 122, 62, 2, 1062, 175, 3, 2, 2, 2, 1063,
	1064, 7, 86, 2, 2, 1064, 1065, 6, 89, 15, 2, 1065, 1066, 5, 248, 125, 2,
	1066, 1067, 5, 284, 143, 2, 1067, 177, 3, 2, 2, 2, 1068, 1069, 7, 89, 2,
	2, 1069, 1075, 5, 124, 63, 2, 1070, 1072, 5, 180, 91, 2, 1071, 1073, 5,
	182, 92, 2, 1072, 1071, 3, 2, 2, 2, 1072, 1073, 3, 2, 2, 2, 1073, 1076,
	3, 2, 2, 2, 1074, 1076, 5, 182, 92, 2, 1075, 1070, 3, 2, 2, 2, 1075, 1074,
	3, 2, 2, 2, 1076, 179, 3, 2, 2, 2, 1077, 1078, 7, 72, 2, 2, 1078, 1079,
	7, 8, 2, 2, 1079, 1080, 7, 126, 2, 2, 1080, 1081, 7, 9, 2, 2, 1081, 1082,
	5, 124, 63, 2, 1082, 181, 3, 2, 2, 2, 1083, 1084, 7, 73, 2, 2, 1084, 1085,
	5, 124, 63, 2, 1085, 183, 3, 2, 2, 2, 1086, 1087, 7, 80, 2, 2, 1087, 1088,
	5, 284, 143, 2, 1088, 185, 3, 2, 2, 2, 1089, 1090, 7, 81, 2, 2, 1090, 1091,
	7, 126, 2, 2, 1091, 1097, 5, 64, 33, 2, 1092, 1093, 7, 10, 2, 2, 1093,
	1094, 5, 224, 113, 2, 1094, 1095, 7, 12, 2, 2, 1095, 1098, 3, 2, 2, 2,
	1096, 1098, 7, 13, 2, 2, 1097, 1092, 3, 2, 2, 2, 1097, 1096, 3, 2, 2, 2,
	1098, 187, 3, 2, 2, 2, 1099, 1101, 7, 123, 2, 2, 1100, 1099, 3, 2, 2, 2,
	1100, 1101, 3, 2, 2, 2, 1101, 1102, 3, 2, 2, 2, 1102, 1103, 7, 94, 2, 2,
	1103, 1105, 7, 126, 2, 2, 1104, 1106, 5, 6, 4, 2, 1105, 1104, 3, 2, 2,
	2, 1105, 1106, 3, 2, 2, 2, 1106, 1107, 3, 2, 2, 2, 1107, 1108, 5, 190,
	96, 2, 1108, 1109, 5, 192, 97, 2, 1109, 189, 3, 2, 2, 2, 1110, 1112, 5,
	194, 98, 2, 1111, 1110, 3, 2, 2, 2, 1111, 1112, 3, 2, 2, 2, 1112, 1114,
	3, 2, 2, 2, 1113, 1115, 5, 196, 99, 2, 1114, 1113, 3, 2, 2, 2, 1114, 1115,
	3, 2, 2, 2, 1115, 191, 3, 2, 2, 2, 1116, 1120, 7, 10, 2, 2, 1117, 1119,
	5, 198, 100, 2, 1118, 1117, 3, 2, 2, 2, 1119, 1122, 3, 2, 2, 2, 1120, 1118,
	3, 2, 2, 2, 1120, 1121, 3, 2, 2, 2, 1121, 1123, 3, 2, 2, 2, 1122, 1120,
	3, 2, 2, 2, 1123, 1124, 7, 12, 2, 2, 1124, 193, 3, 2, 2, 2, 1125, 1126,
	7, 96, 2, 2, 1126, 1127, 5, 28, 15, 2, 1127, 195, 3, 2, 2, 2, 1128, 1129,
	7, 101, 2, 2, 1129, 1130, 5, 96, 49, 2, 1130, 197, 3, 2, 2, 2, 1131, 1139,
	5, 90, 46, 2, 1132, 1134, 5, 112, 57, 2, 1133, 1132, 3, 2, 2, 2, 1133,
	1134, 3, 2, 2, 2, 1134, 1135, 3, 2, 2, 2, 1135, 1139, 5, 200, 101, 2, 1136,
	1139, 5, 204, 103, 2, 1137, 1139, 5, 122, 62, 2, 1138, 1131, 3, 2, 2, 2,
	1138, 1133, 3, 2, 2, 2, 1138, 1136, 3, 2, 2, 2, 1138, 1137, 3, 2, 2, 2,
	1139, 199, 3, 2, 2, 2, 1140, 1141, 5, 202, 102, 2, 1141, 1143, 5, 240,
	121, 2, 1142, 1144, 7, 16, 2, 2, 1143, 1142, 3, 2, 2, 2, 1143, 1144, 3,
	2, 2, 2, 1144, 1146, 3, 2, 2, 2, 1145, 1147, 5, 62, 32, 2, 1146, 1145,
	3, 2, 2, 2, 1146, 1147, 3, 2, 2, 2, 1147, 1149, 3, 2, 2, 2, 1148, 1150,
	5, 2, 2, 2, 1149, 1148, 3, 2, 2, 2, 1149, 1150, 3, 2, 2, 2, 1150, 1151,
	3, 2, 2, 2, 1151, 1152, 7, 13, 2, 2, 1152, 1170, 3, 2, 2, 2, 1153, 1154,
	5, 202, 102, 2, 1154, 1155, 5, 240, 121, 2, 1155, 1161, 5, 64, 33, 2, 1156,
	1157, 7, 10, 2, 2, 1157, 1158, 5, 224, 113, 2, 1158, 1159, 7, 12, 2, 2,
	1159, 1162, 3, 2, 2, 2, 1160, 1162, 7, 13, 2, 2, 1161, 1156, 3, 2, 2, 2,
	1161, 1160, 3, 2, 2, 2, 1162, 1170, 3, 2, 2, 2, 1163, 1166, 5, 202, 102,
	2, 1164, 1167, 5, 236, 119, 2, 1165, 1167, 5, 238, 120, 2, 1166, 1164,
	3, 2, 2, 2, 1166, 1165, 3, 2, 2, 2, 1167, 1170, 3, 2, 2, 2, 1168, 1170,
	5, 128, 65, 2, 1169, 1140, 3, 2, 2, 2, 1169, 1153, 3, 2, 2, 2, 1169, 1163,
	3, 2, 2, 2, 1169, 1168, 3, 2, 2, 2, 1170, 201, 3, 2, 2, 2, 1171, 1173,
	7, 93, 2, 2, 1172, 1171, 3, 2, 2, 2, 1172, 1173, 3, 2, 2, 2, 1173, 1175,
	3, 2, 2, 2, 1174, 1176, 5, 78, 40, 2, 1175, 1174, 3, 2, 2, 2, 1175, 1176,
	3, 2, 2, 2, 1176, 1178, 3, 2, 2, 2, 1177, 1179, 7, 108, 2, 2, 1178, 1177,
	3, 2, 2, 2, 1178, 1179, 3, 2, 2, 2, 1179, 1181, 3, 2, 2, 2, 1180, 1182,
	7, 92, 2, 2, 1181, 1180, 3, 2, 2, 2, 1181, 1182, 3, 2, 2, 2, 1182, 203,
	3, 2, 2, 2, 1183, 1184, 5, 84, 43, 2, 1184, 1185, 7, 13, 2, 2, 1185, 205,
	3, 2, 2, 2, 1186, 1188, 7, 26, 2, 2, 1187, 1186, 3, 2, 2, 2, 1187, 1188,
	3, 2, 2, 2, 1188, 1189, 3, 2, 2, 2, 1189, 1190, 7, 126, 2, 2, 1190, 1192,
	7, 8, 2, 2, 1191, 1193, 5, 218, 110, 2, 1192, 1191, 3, 2, 2, 2, 1192, 1193,
	3, 2, 2, 2, 1193, 1194, 3, 2, 2, 2, 1194, 1195, 7, 9, 2, 2, 1195, 1196,
	7, 10, 2, 2, 1196, 1197, 5, 224, 113, 2, 1197, 1198, 7, 12, 2, 2, 1198,
	207, 3, 2, 2, 2, 1199, 1200, 7, 81, 2, 2, 1200, 1202, 7, 26, 2, 2, 1201,
	1203, 7, 126, 2, 2, 1202, 1201, 3, 2, 2, 2, 1202, 1203, 3, 2, 2, 2, 1203,
	1204, 3, 2, 2, 2, 1204, 1206, 7, 8, 2, 2, 1205, 1207, 5, 218, 110, 2, 1206,
	1205, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207, 1208, 3, 2, 2, 2, 1208,
	1209, 7, 9, 2, 2, 1209, 1210, 7, 10, 2, 2, 1210, 1211, 5, 224, 113, 2,
	1211, 1212, 7, 12, 2, 2, 1212, 209, 3, 2, 2, 2, 1213, 1214, 7, 10, 2, 2,
	1214, 1219, 5, 212, 107, 2, 1215, 1216, 7, 14, 2, 2, 1216, 1218, 5, 212,
	107, 2, 1217, 1215, 3, 2, 2, 2, 1218, 1221, 3, 2, 2, 2, 1219, 1217, 3,
	2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220, 1223, 3, 2, 2, 2, 1221, 1219, 3,
	2, 2, 2, 1222, 1224, 7, 14, 2, 2, 1223, 1222, 3, 2, 2, 2, 1223, 1224, 3,
	2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225, 1226, 7, 12, 2, 2, 1226, 211, 3,
	2, 2, 2, 1227, 1228, 7, 26, 2, 2, 1228, 1229, 5, 216, 109, 2, 1229, 213,
	3, 2, 2, 2, 1230, 1231, 7, 10, 2, 2, 1231, 1236, 5, 216, 109, 2, 1232,
	1233, 7, 14, 2, 2, 1233, 1235, 5, 216, 109, 2, 1234, 1232, 3, 2, 2, 2,
	1235, 1238, 3, 2, 2, 2, 1236, 1234, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2,
	1237, 1240, 3, 2, 2, 2, 1238, 1236, 3, 2, 2, 2, 1239, 1241, 7, 14, 2, 2,
	1240, 1239, 3, 2, 2, 2, 1240, 1241, 3, 2, 2, 2, 1241, 1242, 3, 2, 2, 2,
	1242, 1243, 7, 12, 2, 2, 1243, 215, 3, 2, 2, 2, 1244, 1245, 7, 6, 2, 2,
	1245, 1246, 5, 252, 127, 2, 1246, 1247, 7, 7, 2, 2, 1247, 1249, 7, 8, 2,
	2, 1248, 1250, 5, 218, 110, 2, 1249, 1248, 3, 2, 2, 2, 1249, 1250, 3, 2,
	2, 2, 1250, 1251, 3, 2, 2, 2, 1251, 1252, 7, 9, 2, 2, 1252, 1253, 7, 10,
	2, 2, 1253, 1254, 5, 224, 113, 2, 1254, 1255, 7, 12, 2, 2, 1255, 217, 3,
	2, 2, 2, 1256, 1261, 5, 220, 111, 2, 1257, 1258, 7, 14, 2, 2, 1258, 1260,
	5, 220, 111, 2, 1259, 1257, 3, 2, 2, 2, 1260, 1263, 3, 2, 2, 2, 1261, 1259,
	3, 2, 2, 2, 1261, 1262, 3, 2, 2, 2, 1262, 1266, 3, 2, 2, 2, 1263, 1261,
	3, 2, 2, 2, 1264, 1265, 7, 14, 2, 2, 1265, 1267, 5, 222, 112, 2, 1266,
	1264, 3, 2, 2, 2, 1266, 1267, 3, 2, 2, 2, 1267, 1276, 3, 2, 2, 2, 1268,
	1276, 5, 222, 112, 2, 1269, 1276, 5, 226, 114, 2, 1270, 1273, 5, 232, 117,
	2, 1271, 1272, 7, 17, 2, 2, 1272, 1274, 5, 218, 110, 2, 1273, 1271, 3,
	2, 2, 2, 1273, 1274, 3, 2, 2, 2, 1274, 1276, 3, 2, 2, 2, 1275, 1256, 3,
	2, 2, 2, 1275, 1268, 3, 2, 2, 2, 1275, 1269, 3, 2, 2, 2, 1275, 1270, 3,
	2, 2, 2, 1276, 219, 3, 2, 2, 2, 1277, 1279, 5, 114, 58, 2, 1278, 1277,
	3, 2, 2, 2, 1278, 1279, 3, 2, 2, 2, 1279, 1281, 3, 2, 2, 2, 1280, 1282,
	5, 78, 40, 2, 1281, 1280, 3, 2, 2, 2, 1281, 1282, 3, 2, 2, 2, 1282, 1283,
	3, 2, 2, 2, 1283, 1285, 5, 274, 138, 2, 1284, 1286, 7, 16, 2, 2, 1285,
	1284, 3, 2, 2, 2, 1285, 1286, 3, 2, 2, 2, 1286, 1288, 3, 2, 2, 2, 1287,
	1289, 5, 62, 32, 2, 1288, 1287, 3, 2, 2, 2, 1288, 1289, 3, 2, 2, 2, 1289,
	1292, 3, 2, 2, 2, 1290, 1291, 7, 15, 2, 2, 1291, 1293, 5, 252, 127, 2,
	1292, 1290, 3, 2, 2, 2, 1292, 1293, 3, 2, 2, 2, 1293, 221, 3, 2, 2, 2,
	1294, 1295, 7, 18, 2, 2, 1295, 1296, 7, 126, 2, 2, 1296, 223, 3, 2, 2,
	2, 1297, 1299, 5, 126, 64, 2, 1298, 1297, 3, 2, 2, 2, 1298, 1299, 3, 2,
	2, 2, 1299, 225, 3, 2, 2, 2, 1300, 1302, 7, 6, 2, 2, 1301, 1303, 5, 228,
	115, 2, 1302, 1301, 3, 2, 2, 2, 1302, 1303, 3, 2, 2, 2, 1303, 1304, 3,
	2, 2, 2, 1304, 1305, 7, 7, 2, 2, 1305, 227, 3, 2, 2, 2, 1306, 1315, 5,
	230, 116, 2, 1307, 1309, 7, 14, 2, 2, 1308, 1307, 3, 2, 2, 2, 1309, 1310,
	3, 2, 2, 2, 1310, 1308, 3, 2, 2, 2, 1310, 1311, 3, 2, 2, 2, 1311, 1312,
	3, 2, 2, 2, 1312, 1314, 5, 230, 116, 2, 1313, 1308, 3, 2, 2, 2, 1314, 1317,
	3, 2, 2, 2, 1315, 1313, 3, 2, 2, 2, 1315, 1316, 3, 2, 2, 2, 1316, 229,
	3, 2, 2, 2, 1317, 1315, 3, 2, 2, 2, 1318, 1320, 7, 18, 2, 2, 1319, 1318,
	3, 2, 2, 2, 1319, 1320, 3, 2, 2, 2, 1320, 1323, 3, 2, 2, 2, 1321, 1324,
	5, 252, 127, 2, 1322, 1324, 7, 126, 2, 2, 1323, 1321, 3, 2, 2, 2, 1323,
	1322, 3, 2, 2, 2, 1324, 1326, 3, 2, 2, 2, 1325, 1327, 7, 14, 2, 2, 1326,
	1325, 3, 2, 2, 2, 1326, 1327, 3, 2, 2, 2, 1327, 231, 3, 2, 2, 2, 1328,
	1340, 7, 10, 2, 2, 1329, 1334, 5, 234, 118, 2, 1330, 1331, 7, 14, 2, 2,
	1331, 1333, 5, 234, 118, 2, 1332, 1330, 3, 2, 2, 2, 1333, 1336, 3, 2, 2,
	2, 1334, 1332, 3, 2, 2, 2, 1334, 1335, 3, 2, 2, 2, 1335, 1338, 3, 2, 2,
	2, 1336, 1334, 3, 2, 2, 2, 1337, 1339, 7, 14, 2, 2, 1338, 1337, 3, 2, 2,
	2, 1338, 1339, 3, 2, 2, 2, 1339, 1341, 3, 2, 2, 2, 1340, 1329, 3, 2, 2,
	2, 1340, 1341, 3, 2, 2, 2, 1341, 1342, 3, 2, 2, 2, 1342, 1343, 7, 12, 2,
	2, 1343, 233, 3, 2, 2, 2, 1344, 1345, 5, 240, 121, 2, 1345, 1346, 9, 7,
	2, 2, 1346, 1347, 5, 252, 127, 2, 1347, 1360, 3, 2, 2, 2, 1348, 1349, 7,
	6, 2, 2, 1349, 1350, 5, 252, 127, 2, 1350, 1351, 7, 7, 2, 2, 1351, 1352,
	7, 17, 2, 2, 1352, 1353, 5, 252, 127, 2, 1353, 1360, 3, 2, 2, 2, 1354,
	1360, 5, 236, 119, 2, 1355, 1360, 5, 238, 120, 2, 1356, 1360, 5, 206, 104,
	2, 1357, 1360, 5, 274, 138, 2, 1358, 1360, 5, 74, 38, 2, 1359, 1344, 3,
	2, 2, 2, 1359, 1348, 3, 2, 2, 2, 1359, 1354, 3, 2, 2, 2, 1359, 1355, 3,
	2, 2, 2, 1359, 1356, 3, 2, 2, 2, 1359, 1357, 3, 2, 2, 2, 1359, 1358, 3,
	2, 2, 2, 1360, 235, 3, 2, 2, 2, 1361, 1362, 5, 280, 141, 2, 1362, 1363,
	7, 8, 2, 2, 1363, 1365, 7, 9, 2, 2, 1364, 1366, 5, 62, 32, 2, 1365, 1364,
	3, 2, 2, 2, 1365, 1366, 3, 2, 2, 2, 1366, 1367, 3, 2, 2, 2, 1367, 1368,
	7, 10, 2, 2, 1368, 1369, 5, 224, 113, 2, 1369, 1370, 7, 12, 2, 2, 1370,
	237, 3, 2, 2, 2, 1371, 1372, 5, 282, 142, 2, 1372, 1375, 7, 8, 2, 2, 1373,
	1376, 7, 126, 2, 2, 1374, 1376, 5, 4, 3, 2, 1375, 1373, 3, 2, 2, 2, 1375,
	1374, 3, 2, 2, 2, 1376, 1378, 3, 2, 2, 2, 1377, 1379, 5, 62, 32, 2, 1378,
	1377, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379, 1380, 3, 2, 2, 2, 1380,
	1381, 7, 9, 2, 2, 1381, 1382, 7, 10, 2, 2, 1382, 1383, 5, 224, 113, 2,
	1383, 1384, 7, 12, 2, 2, 1384, 239, 3, 2, 2, 2, 1385, 1389, 5, 272, 137,
	2, 1386, 1389, 7, 127, 2, 2, 1387, 1389, 5, 270, 136, 2, 1388, 1385, 3,
	2, 2, 2, 1388, 1386, 3, 2, 2, 2, 1388, 1387, 3, 2, 2, 2, 1389, 241, 3,
	2, 2, 2, 1390, 1395, 7, 8, 2, 2, 1391, 1393, 5, 244, 123, 2, 1392, 1394,
	7, 14, 2, 2, 1393, 1392, 3, 2, 2, 2, 1393, 1394, 3, 2, 2, 2, 1394, 1396,
	3, 2, 2, 2, 1395, 1391, 3, 2, 2, 2, 1395, 1396, 3, 2, 2, 2, 1396, 1397,
	3, 2, 2, 2, 1397, 1398, 7, 9, 2, 2, 1398, 243, 3, 2, 2, 2, 1399, 1404,
	5, 246, 124, 2, 1400, 1401, 7, 14, 2, 2, 1401, 1403, 5, 246, 124, 2, 1402,
	1400, 3, 2, 2, 2, 1403, 1406, 3, 2, 2, 2, 1404, 1402, 3, 2, 2, 2, 1404,
	1405, 3, 2, 2, 2, 1405, 245, 3, 2, 2, 2, 1406, 1404, 3, 2, 2, 2, 1407,
	1409, 7, 18, 2, 2, 1408, 1407, 3, 2, 2, 2, 1408, 1409, 3, 2, 2, 2, 1409,
	1412, 3, 2, 2, 2, 1410, 1413, 5, 252, 127, 2, 1411, 1413, 7, 126, 2, 2,
	1412, 1410, 3, 2, 2, 2, 1412, 1411, 3, 2, 2, 2, 1413, 247, 3, 2, 2, 2,
	1414, 1419, 5, 252, 127, 2, 1415, 1416, 7, 14, 2, 2, 1416, 1418, 5, 252,
	127, 2, 1417, 1415, 3, 2, 2, 2, 1418, 1421, 3, 2, 2, 2, 1419, 1417, 3,
	2, 2, 2, 1419, 1420, 3, 2, 2, 2, 1420, 249, 3, 2, 2, 2, 1421, 1419, 3,
	2, 2, 2, 1422, 1424, 7, 81, 2, 2, 1423, 1425, 7, 126, 2, 2, 1424, 1423,
	3, 2, 2, 2, 1424, 1425, 3, 2, 2, 2, 1425, 1426, 3, 2, 2, 2, 1426, 1428,
	7, 8, 2, 2, 1427, 1429, 5, 218, 110, 2, 1428, 1427, 3, 2, 2, 2, 1428, 1429,
	3, 2, 2, 2, 1429, 1430, 3, 2, 2, 2, 1430, 1432, 7, 9, 2, 2, 1431, 1433,
	5, 62, 32, 2, 1432, 1431, 3, 2, 2, 2, 1432, 1433, 3, 2, 2, 2, 1433, 1434,
	3, 2, 2, 2, 1434, 1435, 7, 10, 2, 2, 1435, 1436, 5, 224, 113, 2, 1436,
	1437, 7, 12, 2, 2, 1437, 251, 3, 2, 2, 2, 1438, 1439, 8, 127, 1, 2, 1439,
	1498, 5, 250, 126, 2, 1440, 1498, 5, 256, 129, 2, 1441, 1443, 7, 94, 2,
	2, 1442, 1444, 7, 126, 2, 2, 1443, 1442, 3, 2, 2, 2, 1443, 1444, 3, 2,
	2, 2, 1444, 1445, 3, 2, 2, 2, 1445, 1498, 5, 192, 97, 2, 1446, 1447, 7,
	70, 2, 2, 1447, 1449, 5, 252, 127, 2, 1448, 1450, 5, 14, 8, 2, 1449, 1448,
	3, 2, 2, 2, 1449, 1450, 3, 2, 2, 2, 1450, 1451, 3, 2, 2, 2, 1451, 1452,
	5, 242, 122, 2, 1452, 1498, 3, 2, 2, 2, 1453, 1454, 7, 70, 2, 2, 1454,
	1456, 5, 252, 127, 2, 1455, 1457, 5, 14, 8, 2, 1456, 1455, 3, 2, 2, 2,
	1456, 1457, 3, 2, 2, 2, 1457, 1498, 3, 2, 2, 2, 1458, 1459, 7, 87, 2, 2,
	1459, 1498, 5, 252, 127, 40, 1460, 1461, 7, 75, 2, 2, 1461, 1498, 5, 252,
	127, 39, 1462, 1463, 7, 67, 2, 2, 1463, 1498, 5, 252, 127, 38, 1464, 1465,
	7, 20, 2, 2, 1465, 1498, 5, 252, 127, 37, 1466, 1467, 7, 21, 2, 2, 1467,
	1498, 5, 252, 127, 36, 1468, 1469, 7, 22, 2, 2, 1469, 1498, 5, 252, 127,
	35, 1470, 1471, 7, 23, 2, 2, 1471, 1498, 5, 252, 127, 34, 1472, 1473, 7,
	24, 2, 2, 1473, 1498, 5, 252, 127, 33, 1474, 1475, 7, 25, 2, 2, 1475, 1498,
	5, 252, 127, 32, 1476, 1498, 5, 214, 108, 2, 1477, 1498, 5, 210, 106, 2,
	1478, 1498, 5, 208, 105, 2, 1479, 1498, 5, 160, 81, 2, 1480, 1498, 7, 82,
	2, 2, 1481, 1483, 5, 272, 137, 2, 1482, 1484, 5, 252, 127, 2, 1483, 1482,
	3, 2, 2, 2, 1483, 1484, 3, 2, 2, 2, 1484, 1498, 3, 2, 2, 2, 1485, 1498,
	7, 97, 2, 2, 1486, 1498, 5, 264, 133, 2, 1487, 1498, 5, 226, 114, 2, 1488,
	1498, 5, 232, 117, 2, 1489, 1490, 7, 8, 2, 2, 1490, 1491, 5, 248, 125,
	2, 1491, 1492, 7, 9, 2, 2, 1492, 1498, 3, 2, 2, 2, 1493, 1495, 5, 14, 8,
	2, 1494, 1496, 5, 248, 125, 2, 1495, 1494, 3, 2, 2, 2, 1495, 1496, 3, 2,
	2, 2, 1496, 1498, 3, 2, 2, 2, 1497, 1438, 3, 2, 2, 2, 1497, 1440, 3, 2,
	2, 2, 1497, 1441, 3, 2, 2, 2, 1497, 1446, 3, 2, 2, 2, 1497, 1453, 3, 2,
	2, 2, 1497, 1458, 3, 2, 2, 2, 1497, 1460, 3, 2, 2, 2, 1497, 1462, 3, 2,
	2, 2, 1497, 1464, 3, 2, 2, 2, 1497, 1466, 3, 2, 2, 2, 1497, 1468, 3, 2,
	2, 2, 1497, 1470, 3, 2, 2, 2, 1497, 1472, 3, 2, 2, 2, 1497, 1474, 3, 2,
	2, 2, 1497, 1476, 3, 2, 2, 2, 1497, 1477, 3, 2, 2, 2, 1497, 1478, 3, 2,
	2, 2, 1497, 1479, 3, 2, 2, 2, 1497, 1480, 3, 2, 2, 2, 1497, 1481, 3, 2,
	2, 2, 1497, 1485, 3, 2, 2, 2, 1497, 1486, 3, 2, 2, 2, 1497, 1487, 3, 2,
	2, 2, 1497, 1488, 3, 2, 2, 2, 1497, 1489, 3, 2, 2, 2, 1497, 1493, 3, 2,
	2, 2, 1498, 1574, 3, 2, 2, 2, 1499, 1500, 12, 31, 2, 2, 1500, 1501, 9,
	8, 2, 2, 1501, 1573, 5, 252, 127, 32, 1502, 1503, 12, 30, 2, 2, 1503, 1504,
	9, 9, 2, 2, 1504, 1573, 5, 252, 127, 31, 1505, 1506, 12, 29, 2, 2, 1506,
	1507, 9, 10, 2, 2, 1507, 1573, 5, 252, 127, 30, 1508, 1509, 12, 28, 2,
	2, 1509, 1510, 9, 11, 2, 2, 1510, 1573, 5, 252, 127, 29, 1511, 1512, 12,
	27, 2, 2, 1512, 1513, 7, 66, 2, 2, 1513, 1573, 5, 252, 127, 28, 1514, 1515,
	12, 26, 2, 2, 1515, 1516, 7, 88, 2, 2, 1516, 1573, 5, 252, 127, 27, 1517,
	1518, 12, 25, 2, 2, 1518, 1519, 9, 12, 2, 2, 1519, 1573, 5, 252, 127, 26,
	1520, 1521, 12, 24, 2, 2, 1521, 1522, 7, 40, 2, 2, 1522, 1573, 5, 252,
	127, 25, 1523, 1524, 12, 23, 2, 2, 1524, 1525, 7, 41, 2, 2, 1525, 1573,
	5, 252, 127, 24, 1526, 1527, 12, 22, 2, 2, 1527, 1528, 7, 42, 2, 2, 1528,
	1573, 5, 252, 127, 23, 1529, 1530, 12, 21, 2, 2, 1530, 1531, 7, 43, 2,
	2, 1531, 1573, 5, 252, 127, 22, 1532, 1533, 12, 20, 2, 2, 1533, 1534, 7,
	44, 2, 2, 1534, 1573, 5, 252, 127, 21, 1535, 1536, 12, 19, 2, 2, 1536,
	1537, 7, 16, 2, 2, 1537, 1538, 5, 252, 127, 2, 1538, 1539, 7, 17, 2, 2,
	1539, 1540, 5, 252, 127, 20, 1540, 1573, 3, 2, 2, 2, 1541, 1542, 12, 18,
	2, 2, 1542, 1543, 7, 15, 2, 2, 1543, 1573, 5, 252, 127, 19, 1544, 1545,
	12, 17, 2, 2, 1545, 1546, 5, 262, 132, 2, 1546, 1547, 5, 252, 127, 18,
	1547, 1573, 3, 2, 2, 2, 1548, 1549, 12, 47, 2, 2, 1549, 1550, 7, 6, 2,
	2, 1550, 1551, 5, 248, 125, 2, 1551, 1552, 7, 7, 2, 2, 1552, 1573, 3, 2,
	2, 2, 1553, 1554, 12, 46, 2, 2, 1554, 1555, 7, 19, 2, 2, 1555, 1557, 5,
	272, 137, 2, 1556, 1558, 5, 30, 16, 2, 1557, 1556, 3, 2, 2, 2, 1557, 1558,
	3, 2, 2, 2, 1558, 1573, 3, 2, 2, 2, 1559, 1560, 12, 43, 2, 2, 1560, 1573,
	5, 242, 122, 2, 1561, 1562, 12, 42, 2, 2, 1562, 1563, 6, 127, 35, 2, 1563,
	1573, 7, 20, 2, 2, 1564, 1565, 12, 41, 2, 2, 1565, 1566, 6, 127, 37, 2,
	1566, 1573, 7, 21, 2, 2, 1567, 1568, 12, 16, 2, 2, 1568, 1573, 5, 266,
	134, 2, 1569, 1570, 12, 3, 2, 2, 1570, 1571, 7, 90, 2, 2, 1571, 1573, 5,
	254, 128, 2, 1572, 1499, 3, 2, 2, 2, 1572, 1502, 3, 2, 2, 2, 1572, 1505,
	3, 2, 2, 2, 1572, 1508, 3, 2, 2, 2, 1572, 1511, 3, 2, 2, 2, 1572, 1514,
	3, 2, 2, 2, 1572, 1517, 3, 2, 2, 2, 1572, 1520, 3, 2, 2, 2, 1572, 1523,
	3, 2, 2, 2, 1572, 1526, 3, 2, 2, 2, 1572, 1529, 3, 2, 2, 2, 1572, 1532,
	3, 2, 2, 2, 1572, 1535, 3, 2, 2, 2, 1572, 1541, 3, 2, 2, 2, 1572, 1544,
	3, 2, 2, 2, 1572, 1548, 3, 2, 2, 2, 1572, 1553, 3, 2, 2, 2, 1572, 1559,
	3, 2, 2, 2, 1572, 1561, 3, 2, 2, 2, 1572, 1564, 3, 2, 2, 2, 1572, 1567,
	3, 2, 2, 2, 1572, 1569, 3, 2, 2, 2, 1573, 1576, 3, 2, 2, 2, 1574, 1572,
	3, 2, 2, 2, 1574, 1575, 3, 2, 2, 2, 1575, 253, 3, 2, 2, 2, 1576, 1574,
	3, 2, 2, 2, 1577, 1580, 5, 26, 14, 2, 1578, 1579, 7, 6, 2, 2, 1579, 1581,
	7, 7, 2, 2, 1580, 1578, 3, 2, 2, 2, 1580, 1581, 3, 2, 2, 2, 1581, 1584,
	3, 2, 2, 2, 1582, 1584, 5, 252, 127, 2, 1583, 1577, 3, 2, 2, 2, 1583, 1582,
	3, 2, 2, 2, 1584, 255, 3, 2, 2, 2, 1585, 1587, 7, 93, 2, 2, 1586, 1585,
	3, 2, 2, 2, 1586, 1587, 3, 2, 2, 2, 1587, 1588, 3, 2, 2, 2, 1588, 1590,
	5, 258, 130, 2, 1589, 1591, 5, 62, 32, 2, 1590, 1589, 3, 2, 2, 2, 1590,
	1591, 3, 2, 2, 2, 1591, 1592, 3, 2, 2, 2, 1592, 1593, 7, 56, 2, 2, 1593,
	1594, 5, 260, 131, 2, 1594, 257, 3, 2, 2, 2, 1595, 1602, 7, 126, 2, 2,
	1596, 1598, 7, 8, 2, 2, 1597, 1599, 5, 218, 110, 2, 1598, 1597, 3, 2, 2,
	2, 1598, 1599, 3, 2, 2, 2, 1599, 1600, 3, 2, 2, 2, 1600, 1602, 7, 9, 2,
	2, 1601, 1595, 3, 2, 2, 2, 1601, 1596, 3, 2, 2, 2, 1602, 259, 3, 2, 2,
	2, 1603, 1609, 5, 252, 127, 2, 1604, 1605, 7, 10, 2, 2, 1605, 1606, 5,
	224, 113, 2, 1606, 1607, 7, 12, 2, 2, 1607, 1609, 3, 2, 2, 2, 1608, 1603,
	3, 2, 2, 2, 1608, 1604, 3, 2, 2, 2, 1609, 261, 3, 2, 2, 2, 1610, 1611,
	9, 13, 2, 2, 1611, 263, 3, 2, 2, 2, 1612, 1619, 7, 57, 2, 2, 1613, 1619,
	7, 58, 2, 2, 1614, 1619, 7, 127, 2, 2, 1615, 1619, 5, 266, 134, 2, 1616,
	1619, 7, 5, 2, 2, 1617, 1619, 5, 270, 136, 2, 1618, 1612, 3, 2, 2, 2, 1618,
	1613, 3, 2, 2, 2, 1618, 1614, 3, 2, 2, 2, 1618, 1615, 3, 2, 2, 2, 1618,
	1616, 3, 2, 2, 2, 1618, 1617, 3, 2, 2, 2, 1619, 265, 3, 2, 2, 2, 1620,
	1624, 7, 128, 2, 2, 1621, 1623, 5, 268, 135, 2, 1622, 1621, 3, 2, 2, 2,
	1623, 1626, 3, 2, 2, 2, 1624, 1622, 3, 2, 2, 2, 1624, 1625, 3, 2, 2, 2,
	1625, 1627, 3, 2, 2, 2, 1626, 1624, 3, 2, 2, 2, 1627, 1628, 7, 128, 2,
	2, 1628, 267, 3, 2, 2, 2, 1629, 1635, 7, 135, 2, 2, 1630, 1631, 7, 134,
	2, 2, 1631, 1632, 5, 252, 127, 2, 1632, 1633, 7, 11, 2, 2, 1633, 1635,
	3, 2, 2, 2, 1634, 1629, 3, 2, 2, 2, 1634, 1630, 3, 2, 2, 2, 1635, 269,
	3, 2, 2, 2, 1636, 1637, 9, 14, 2, 2, 1637, 271, 3, 2, 2, 2, 1638, 1641,
	7, 126, 2, 2, 1639, 1641, 5, 276, 139, 2, 1640, 1638, 3, 2, 2, 2, 1640,
	1639, 3, 2, 2, 2, 1641, 273, 3, 2, 2, 2, 1642, 1643, 9, 15, 2, 2, 1643,
	275, 3, 2, 2, 2, 1644, 1648, 5, 278, 140, 2, 1645, 1648, 7, 57, 2, 2, 1646,
	1648, 7, 58, 2, 2, 1647, 1644, 3, 2, 2, 2, 1647, 1645, 3, 2, 2, 2, 1647,
	1646, 3, 2, 2, 2, 1648, 277, 3, 2, 2, 2, 1649, 1650, 9, 16, 2, 2, 1650,
	279, 3, 2, 2, 2, 1651, 1652, 7, 116, 2, 2, 1652, 1653, 5, 240, 121, 2,
	1653, 281, 3, 2, 2, 2, 1654, 1655, 7, 117, 2, 2, 1655, 1656, 5, 240, 121,
	2, 1656, 283, 3, 2, 2, 2, 1657, 1662, 7, 13, 2, 2, 1658, 1662, 7, 2, 2,
	3, 1659, 1662, 6, 143, 40, 2, 1660, 1662, 6, 143, 41, 2, 1661, 1657, 3,
	2, 2, 2, 1661, 1658, 3, 2, 2, 2, 1661, 1659, 3, 2, 2, 2, 1661, 1660, 3,
	2, 2, 2, 1662, 285, 3, 2, 2, 2, 209, 291, 295, 304, 309, 312, 319, 328,
	338, 349, 351, 372, 380, 387, 391, 406, 410, 414, 420, 427, 437, 439, 455,
	459, 463, 471, 475, 490, 494, 497, 501, 504, 508, 514, 518, 522, 530, 535,
	537, 544, 549, 552, 555, 560, 563, 566, 571, 574, 577, 581, 587, 591, 595,
	599, 610, 617, 624, 629, 637, 640, 643, 648, 651, 655, 665, 669, 675, 681,
	688, 694, 700, 708, 713, 724, 729, 737, 744, 751, 783, 787, 794, 800, 807,
	811, 815, 824, 832, 839, 843, 847, 851, 854, 857, 860, 864, 868, 872, 874,
	881, 887, 890, 893, 897, 900, 907, 916, 935, 939, 943, 953, 957, 968, 981,
	987, 994, 1001, 1008, 1015, 1033, 1037, 1039, 1046, 1052, 1057, 1072, 1075,
	1097, 1100, 1105, 1111, 1114, 1120, 1133, 1138, 1143, 1146, 1149, 1161,
	1166, 1169, 1172, 1175, 1178, 1181, 1187, 1192, 1202, 1206, 1219, 1223,
	1236, 1240, 1249, 1261, 1266, 1273, 1275, 1278, 1281, 1285, 1288, 1292,
	1298, 1302, 1310, 1315, 1319, 1323, 1326, 1334, 1338, 1340, 1359, 1365,
	1375, 1378, 1388, 1393, 1395, 1404, 1408, 1412, 1419, 1424, 1428, 1432,
	1443, 1449, 1456, 1483, 1495, 1497, 1557, 1572, 1574, 1580, 1583, 1586,
	1590, 1598, 1601, 1608, 1618, 1624, 1634, 1640, 1647, 1661,
}
var literalNames = []string{
	"", "", "", "", "'['", "']'", "'('", "')'", "'{'", "", "'}'", "';'", "','",
	"'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'",
	"'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='",
	"'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'",
	"'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='",
	"'&='", "'^='", "'|='", "'=>'", "'null'", "", "", "", "", "", "", "'break'",
	"'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'",
	"'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'", "'switch'",
	"'while'", "'debugger'", "'function'", "'this'", "'with'", "'default'",
	"'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", "'readonly'",
	"'async'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'",
	"'import'", "'implements'", "'let'", "'private'", "'public'", "'interface'",
	"'package'", "'protected'", "'static'", "'yield'", "'any'", "'number'",
	"'boolean'", "'string'", "'symbol'", "'type'", "'get'", "'set'", "'constructor'",
	"'namespace'", "'require'", "'module'", "'declare'", "'abstract'", "'is'",
	"'@'", "", "", "", "", "", "", "", "", "'${'",
}
var symbolicNames = []string{
	"", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral",
	"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace",
	"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark",
	"Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus",
	"BitNot", "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic",
	"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals",
	"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals",
	"BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign",
	"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign",
	"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign",
	"BitXorAssign", "BitOrAssign", "ARROW", "NullLiteral", "BooleanLiteral",
	"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2",
	"BinaryIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case",
	"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue",
	"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default",
	"If", "Throw", "Delete", "In", "Try", "As", "From", "ReadOnly", "Async",
	"Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Implements",
	"Let", "Private", "Public", "Interface", "Package", "Protected", "Static",
	"Yield", "Any", "Number", "Boolean", "Str", "Symbol", "TypeAlias", "Get",
	"Set", "Constructor", "Namespace", "Require", "Module", "Declare", "Abstract",
	"Is", "At", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator",
	"HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression",
	"TemplateStringAtom",
}

var ruleNames = []string{
	"initializer", "bindingPattern", "typeParameters", "typeParameterList",
	"typeParameter", "constraint", "typeArguments", "typeArgumentList", "typeArgument",
	"type_", "unionOrIntersectionOrPrimaryType", "primaryType", "predefinedType",
	"typeReference", "nestedTypeGeneric", "typeGeneric", "typeIncludeGeneric",
	"typeName", "objectType", "typeBody", "typeMemberList", "typeMember", "arrayType",
	"tupleType", "tupleElementTypes", "functionType", "constructorType", "typeQuery",
	"typeQueryExpression", "propertySignatur", "typeAnnotation", "callSignature",
	"parameterList", "requiredParameterList", "parameter", "optionalParameter",
	"restParameter", "requiredParameter", "accessibilityModifier", "identifierOrPattern",
	"constructSignature", "indexSignature", "methodSignature", "typeAliasDeclaration",
	"constructorDeclaration", "interfaceDeclaration", "interfaceExtendsClause",
	"classOrInterfaceTypeList", "enumDeclaration", "enumBody", "enumMemberList",
	"enumMember", "namespaceDeclaration", "namespaceName", "importAliasDeclaration",
	"decoratorList", "decorator", "decoratorMemberExpression", "decoratorCallExpression",
	"program", "statement", "block", "statementList", "abstractDeclaration",
	"importStatement", "fromBlock", "multipleImportStatement", "exportStatement",
	"variableStatement", "variableDeclarationList", "variableDeclaration",
	"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement",
	"varModifier", "continueStatement", "breakStatement", "returnStatement",
	"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses",
	"caseClause", "defaultClause", "labelledStatement", "throwStatement", "tryStatement",
	"catchProduction", "finallyProduction", "debuggerStatement", "functionDeclaration",
	"classDeclaration", "classHeritage", "classTail", "classExtendsClause",
	"implementsClause", "classElement", "propertyMemberDeclaration", "propertyMemberBase",
	"indexMemberDeclaration", "generatorMethod", "generatorFunctionDeclaration",
	"generatorBlock", "generatorDefinition", "iteratorBlock", "iteratorDefinition",
	"formalParameterList", "formalParameterArg", "lastFormalParameterArg",
	"functionBody", "arrayLiteral", "elementList", "arrayElement", "objectLiteral",
	"propertyAssignment", "getAccessor", "setAccessor", "propertyName", "arguments",
	"argumentList", "argument", "expressionSequence", "functionExpressionDeclaration",
	"singleExpression", "asExpression", "arrowFunctionDeclaration", "arrowFunctionParameters",
	"arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral",
	"templateStringAtom", "numericLiteral", "identifierName", "identifierOrKeyWord",
	"reservedWord", "keyword", "getter", "setter", "eos",
}

type TypeScriptParser struct {
	TypeScriptParserBase
}

// NewTypeScriptParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *TypeScriptParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewTypeScriptParser(input antlr.TokenStream) *TypeScriptParser {
	p := new(TypeScriptParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	p.BaseParser = antlr.NewBaseParser(input)

	p.Interpreter = antlr.NewParserATNSimulator(p, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	p.RuleNames = ruleNames
	p.LiteralNames = literalNames
	p.SymbolicNames = symbolicNames
	p.GrammarFileName = "TypeScriptParser.g4"

	return p
}

// TypeScriptParser tokens.
const (
	TypeScriptParserEOF                           = antlr.TokenEOF
	TypeScriptParserMultiLineComment              = 1
	TypeScriptParserSingleLineComment             = 2
	TypeScriptParserRegularExpressionLiteral      = 3
	TypeScriptParserOpenBracket                   = 4
	TypeScriptParserCloseBracket                  = 5
	TypeScriptParserOpenParen                     = 6
	TypeScriptParserCloseParen                    = 7
	TypeScriptParserOpenBrace                     = 8
	TypeScriptParserTemplateCloseBrace            = 9
	TypeScriptParserCloseBrace                    = 10
	TypeScriptParserSemiColon                     = 11
	TypeScriptParserComma                         = 12
	TypeScriptParserAssign                        = 13
	TypeScriptParserQuestionMark                  = 14
	TypeScriptParserColon                         = 15
	TypeScriptParserEllipsis                      = 16
	TypeScriptParserDot                           = 17
	TypeScriptParserPlusPlus                      = 18
	TypeScriptParserMinusMinus                    = 19
	TypeScriptParserPlus                          = 20
	TypeScriptParserMinus                         = 21
	TypeScriptParserBitNot                        = 22
	TypeScriptParserNot                           = 23
	TypeScriptParserMultiply                      = 24
	TypeScriptParserDivide                        = 25
	TypeScriptParserModulus                       = 26
	TypeScriptParserRightShiftArithmetic          = 27
	TypeScriptParserLeftShiftArithmetic           = 28
	TypeScriptParserRightShiftLogical             = 29
	TypeScriptParserLessThan                      = 30
	TypeScriptParserMoreThan                      = 31
	TypeScriptParserLessThanEquals                = 32
	TypeScriptParserGreaterThanEquals             = 33
	TypeScriptParserEquals_                       = 34
	TypeScriptParserNotEquals                     = 35
	TypeScriptParserIdentityEquals                = 36
	TypeScriptParserIdentityNotEquals             = 37
	TypeScriptParserBitAnd                        = 38
	TypeScriptParserBitXOr                        = 39
	TypeScriptParserBitOr                         = 40
	TypeScriptParserAnd                           = 41
	TypeScriptParserOr                            = 42
	TypeScriptParserMultiplyAssign                = 43
	TypeScriptParserDivideAssign                  = 44
	TypeScriptParserModulusAssign                 = 45
	TypeScriptParserPlusAssign                    = 46
	TypeScriptParserMinusAssign                   = 47
	TypeScriptParserLeftShiftArithmeticAssign     = 48
	TypeScriptParserRightShiftArithmeticAssign    = 49
	TypeScriptParserRightShiftLogicalAssign       = 50
	TypeScriptParserBitAndAssign                  = 51
	TypeScriptParserBitXorAssign                  = 52
	TypeScriptParserBitOrAssign                   = 53
	TypeScriptParserARROW                         = 54
	TypeScriptParserNullLiteral                   = 55
	TypeScriptParserBooleanLiteral                = 56
	TypeScriptParserDecimalLiteral                = 57
	TypeScriptParserHexIntegerLiteral             = 58
	TypeScriptParserOctalIntegerLiteral           = 59
	TypeScriptParserOctalIntegerLiteral2          = 60
	TypeScriptParserBinaryIntegerLiteral          = 61
	TypeScriptParserBreak                         = 62
	TypeScriptParserDo                            = 63
	TypeScriptParserInstanceof                    = 64
	TypeScriptParserTypeof                        = 65
	TypeScriptParserCase                          = 66
	TypeScriptParserElse                          = 67
	TypeScriptParserNew                           = 68
	TypeScriptParserVar                           = 69
	TypeScriptParserCatch                         = 70
	TypeScriptParserFinally                       = 71
	TypeScriptParserReturn                        = 72
	TypeScriptParserVoid                          = 73
	TypeScriptParserContinue                      = 74
	TypeScriptParserFor                           = 75
	TypeScriptParserSwitch                        = 76
	TypeScriptParserWhile                         = 77
	TypeScriptParserDebugger                      = 78
	TypeScriptParserFunction_                     = 79
	TypeScriptParserThis                          = 80
	TypeScriptParserWith                          = 81
	TypeScriptParserDefault                       = 82
	TypeScriptParserIf                            = 83
	TypeScriptParserThrow                         = 84
	TypeScriptParserDelete                        = 85
	TypeScriptParserIn                            = 86
	TypeScriptParserTry                           = 87
	TypeScriptParserAs                            = 88
	TypeScriptParserFrom                          = 89
	TypeScriptParserReadOnly                      = 90
	TypeScriptParserAsync                         = 91
	TypeScriptParserClass                         = 92
	TypeScriptParserEnum                          = 93
	TypeScriptParserExtends                       = 94
	TypeScriptParserSuper                         = 95
	TypeScriptParserConst                         = 96
	TypeScriptParserExport                        = 97
	TypeScriptParserImport                        = 98
	TypeScriptParserImplements                    = 99
	TypeScriptParserLet                           = 100
	TypeScriptParserPrivate                       = 101
	TypeScriptParserPublic                        = 102
	TypeScriptParserInterface                     = 103
	TypeScriptParserPackage                       = 104
	TypeScriptParserProtected                     = 105
	TypeScriptParserStatic                        = 106
	TypeScriptParserYield                         = 107
	TypeScriptParserAny                           = 108
	TypeScriptParserNumber                        = 109
	TypeScriptParserBoolean                       = 110
	TypeScriptParserStr                           = 111
	TypeScriptParserSymbol                        = 112
	TypeScriptParserTypeAlias                     = 113
	TypeScriptParserGet                           = 114
	TypeScriptParserSet                           = 115
	TypeScriptParserConstructor                   = 116
	TypeScriptParserNamespace                     = 117
	TypeScriptParserRequire                       = 118
	TypeScriptParserModule                        = 119
	TypeScriptParserDeclare                       = 120
	TypeScriptParserAbstract                      = 121
	TypeScriptParserIs                            = 122
	TypeScriptParserAt                            = 123
	TypeScriptParserIdentifier                    = 124
	TypeScriptParserStringLiteral                 = 125
	TypeScriptParserBackTick                      = 126
	TypeScriptParserWhiteSpaces                   = 127
	TypeScriptParserLineTerminator                = 128
	TypeScriptParserHtmlComment                   = 129
	TypeScriptParserCDataComment                  = 130
	TypeScriptParserUnexpectedCharacter           = 131
	TypeScriptParserTemplateStringStartExpression = 132
	TypeScriptParserTemplateStringAtom            = 133
)

// TypeScriptParser rules.
const (
	TypeScriptParserRULE_initializer                      = 0
	TypeScriptParserRULE_bindingPattern                   = 1
	TypeScriptParserRULE_typeParameters                   = 2
	TypeScriptParserRULE_typeParameterList                = 3
	TypeScriptParserRULE_typeParameter                    = 4
	TypeScriptParserRULE_constraint                       = 5
	TypeScriptParserRULE_typeArguments                    = 6
	TypeScriptParserRULE_typeArgumentList                 = 7
	TypeScriptParserRULE_typeArgument                     = 8
	TypeScriptParserRULE_type_                            = 9
	TypeScriptParserRULE_unionOrIntersectionOrPrimaryType = 10
	TypeScriptParserRULE_primaryType                      = 11
	TypeScriptParserRULE_predefinedType                   = 12
	TypeScriptParserRULE_typeReference                    = 13
	TypeScriptParserRULE_nestedTypeGeneric                = 14
	TypeScriptParserRULE_typeGeneric                      = 15
	TypeScriptParserRULE_typeIncludeGeneric               = 16
	TypeScriptParserRULE_typeName                         = 17
	TypeScriptParserRULE_objectType                       = 18
	TypeScriptParserRULE_typeBody                         = 19
	TypeScriptParserRULE_typeMemberList                   = 20
	TypeScriptParserRULE_typeMember                       = 21
	TypeScriptParserRULE_arrayType                        = 22
	TypeScriptParserRULE_tupleType                        = 23
	TypeScriptParserRULE_tupleElementTypes                = 24
	TypeScriptParserRULE_functionType                     = 25
	TypeScriptParserRULE_constructorType                  = 26
	TypeScriptParserRULE_typeQuery                        = 27
	TypeScriptParserRULE_typeQueryExpression              = 28
	TypeScriptParserRULE_propertySignatur                 = 29
	TypeScriptParserRULE_typeAnnotation                   = 30
	TypeScriptParserRULE_callSignature                    = 31
	TypeScriptParserRULE_parameterList                    = 32
	TypeScriptParserRULE_requiredParameterList            = 33
	TypeScriptParserRULE_parameter                        = 34
	TypeScriptParserRULE_optionalParameter                = 35
	TypeScriptParserRULE_restParameter                    = 36
	TypeScriptParserRULE_requiredParameter                = 37
	TypeScriptParserRULE_accessibilityModifier            = 38
	TypeScriptParserRULE_identifierOrPattern              = 39
	TypeScriptParserRULE_constructSignature               = 40
	TypeScriptParserRULE_indexSignature                   = 41
	TypeScriptParserRULE_methodSignature                  = 42
	TypeScriptParserRULE_typeAliasDeclaration             = 43
	TypeScriptParserRULE_constructorDeclaration           = 44
	TypeScriptParserRULE_interfaceDeclaration             = 45
	TypeScriptParserRULE_interfaceExtendsClause           = 46
	TypeScriptParserRULE_classOrInterfaceTypeList         = 47
	TypeScriptParserRULE_enumDeclaration                  = 48
	TypeScriptParserRULE_enumBody                         = 49
	TypeScriptParserRULE_enumMemberList                   = 50
	TypeScriptParserRULE_enumMember                       = 51
	TypeScriptParserRULE_namespaceDeclaration             = 52
	TypeScriptParserRULE_namespaceName                    = 53
	TypeScriptParserRULE_importAliasDeclaration           = 54
	TypeScriptParserRULE_decoratorList                    = 55
	TypeScriptParserRULE_decorator                        = 56
	TypeScriptParserRULE_decoratorMemberExpression        = 57
	TypeScriptParserRULE_decoratorCallExpression          = 58
	TypeScriptParserRULE_program                          = 59
	TypeScriptParserRULE_statement                        = 60
	TypeScriptParserRULE_block                            = 61
	TypeScriptParserRULE_statementList                    = 62
	TypeScriptParserRULE_abstractDeclaration              = 63
	TypeScriptParserRULE_importStatement                  = 64
	TypeScriptParserRULE_fromBlock                        = 65
	TypeScriptParserRULE_multipleImportStatement          = 66
	TypeScriptParserRULE_exportStatement                  = 67
	TypeScriptParserRULE_variableStatement                = 68
	TypeScriptParserRULE_variableDeclarationList          = 69
	TypeScriptParserRULE_variableDeclaration              = 70
	TypeScriptParserRULE_emptyStatement                   = 71
	TypeScriptParserRULE_expressionStatement              = 72
	TypeScriptParserRULE_ifStatement                      = 73
	TypeScriptParserRULE_iterationStatement               = 74
	TypeScriptParserRULE_varModifier                      = 75
	TypeScriptParserRULE_continueStatement                = 76
	TypeScriptParserRULE_breakStatement                   = 77
	TypeScriptParserRULE_returnStatement                  = 78
	TypeScriptParserRULE_yieldStatement                   = 79
	TypeScriptParserRULE_withStatement                    = 80
	TypeScriptParserRULE_switchStatement                  = 81
	TypeScriptParserRULE_caseBlock                        = 82
	TypeScriptParserRULE_caseClauses                      = 83
	TypeScriptParserRULE_caseClause                       = 84
	TypeScriptParserRULE_defaultClause                    = 85
	TypeScriptParserRULE_labelledStatement                = 86
	TypeScriptParserRULE_throwStatement                   = 87
	TypeScriptParserRULE_tryStatement                     = 88
	TypeScriptParserRULE_catchProduction                  = 89
	TypeScriptParserRULE_finallyProduction                = 90
	TypeScriptParserRULE_debuggerStatement                = 91
	TypeScriptParserRULE_functionDeclaration              = 92
	TypeScriptParserRULE_classDeclaration                 = 93
	TypeScriptParserRULE_classHeritage                    = 94
	TypeScriptParserRULE_classTail                        = 95
	TypeScriptParserRULE_classExtendsClause               = 96
	TypeScriptParserRULE_implementsClause                 = 97
	TypeScriptParserRULE_classElement                     = 98
	TypeScriptParserRULE_propertyMemberDeclaration        = 99
	TypeScriptParserRULE_propertyMemberBase               = 100
	TypeScriptParserRULE_indexMemberDeclaration           = 101
	TypeScriptParserRULE_generatorMethod                  = 102
	TypeScriptParserRULE_generatorFunctionDeclaration     = 103
	TypeScriptParserRULE_generatorBlock                   = 104
	TypeScriptParserRULE_generatorDefinition              = 105
	TypeScriptParserRULE_iteratorBlock                    = 106
	TypeScriptParserRULE_iteratorDefinition               = 107
	TypeScriptParserRULE_formalParameterList              = 108
	TypeScriptParserRULE_formalParameterArg               = 109
	TypeScriptParserRULE_lastFormalParameterArg           = 110
	TypeScriptParserRULE_functionBody                     = 111
	TypeScriptParserRULE_arrayLiteral                     = 112
	TypeScriptParserRULE_elementList                      = 113
	TypeScriptParserRULE_arrayElement                     = 114
	TypeScriptParserRULE_objectLiteral                    = 115
	TypeScriptParserRULE_propertyAssignment               = 116
	TypeScriptParserRULE_getAccessor                      = 117
	TypeScriptParserRULE_setAccessor                      = 118
	TypeScriptParserRULE_propertyName                     = 119
	TypeScriptParserRULE_arguments                        = 120
	TypeScriptParserRULE_argumentList                     = 121
	TypeScriptParserRULE_argument                         = 122
	TypeScriptParserRULE_expressionSequence               = 123
	TypeScriptParserRULE_functionExpressionDeclaration    = 124
	TypeScriptParserRULE_singleExpression                 = 125
	TypeScriptParserRULE_asExpression                     = 126
	TypeScriptParserRULE_arrowFunctionDeclaration         = 127
	TypeScriptParserRULE_arrowFunctionParameters          = 128
	TypeScriptParserRULE_arrowFunctionBody                = 129
	TypeScriptParserRULE_assignmentOperator               = 130
	TypeScriptParserRULE_literal                          = 131
	TypeScriptParserRULE_templateStringLiteral            = 132
	TypeScriptParserRULE_templateStringAtom               = 133
	TypeScriptParserRULE_numericLiteral                   = 134
	TypeScriptParserRULE_identifierName                   = 135
	TypeScriptParserRULE_identifierOrKeyWord              = 136
	TypeScriptParserRULE_reservedWord                     = 137
	TypeScriptParserRULE_keyword                          = 138
	TypeScriptParserRULE_getter                           = 139
	TypeScriptParserRULE_setter                           = 140
	TypeScriptParserRULE_eos                              = 141
)

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *InitializerContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, TypeScriptParserRULE_initializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(284)
		p.Match(TypeScriptParserAssign)
	}
	{
		p.SetState(285)
		p.singleExpression(0)
	}

	return localctx
}

// IBindingPatternContext is an interface to support dynamic dispatch.
type IBindingPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPatternContext differentiates from other interfaces.
	IsBindingPatternContext()
}

type BindingPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPatternContext() *BindingPatternContext {
	var p = new(BindingPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_bindingPattern
	return p
}

func (*BindingPatternContext) IsBindingPatternContext() {}

func NewBindingPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPatternContext {
	var p = new(BindingPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_bindingPattern

	return p
}

func (s *BindingPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPatternContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *BindingPatternContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *BindingPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBindingPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) BindingPattern() (localctx IBindingPatternContext) {
	localctx = NewBindingPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, TypeScriptParserRULE_bindingPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(289)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserOpenBracket:
		{
			p.SetState(287)
			p.ArrayLiteral()
		}

	case TypeScriptParserOpenBrace:
		{
			p.SetState(288)
			p.ObjectLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeParametersContext is an interface to support dynamic dispatch.
type ITypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParametersContext differentiates from other interfaces.
	IsTypeParametersContext()
}

type TypeParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParametersContext() *TypeParametersContext {
	var p = new(TypeParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeParameters
	return p
}

func (*TypeParametersContext) IsTypeParametersContext() {}

func NewTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParametersContext {
	var p = new(TypeParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeParameters

	return p
}

func (s *TypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParametersContext) LessThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThan, 0)
}

func (s *TypeParametersContext) MoreThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMoreThan, 0)
}

func (s *TypeParametersContext) TypeParameterList() ITypeParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterListContext)
}

func (s *TypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeParameters() (localctx ITypeParametersContext) {
	localctx = NewTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, TypeScriptParserRULE_typeParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(291)
		p.Match(TypeScriptParserLessThan)
	}
	p.SetState(293)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan || _la == TypeScriptParserIdentifier {
		{
			p.SetState(292)
			p.TypeParameterList()
		}

	}
	{
		p.SetState(295)
		p.Match(TypeScriptParserMoreThan)
	}

	return localctx
}

// ITypeParameterListContext is an interface to support dynamic dispatch.
type ITypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterListContext differentiates from other interfaces.
	IsTypeParameterListContext()
}

type TypeParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterListContext() *TypeParameterListContext {
	var p = new(TypeParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeParameterList
	return p
}

func (*TypeParameterListContext) IsTypeParameterListContext() {}

func NewTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterListContext {
	var p = new(TypeParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeParameterList

	return p
}

func (s *TypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterListContext) AllTypeParameter() []ITypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem())
	var tst = make([]ITypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeParameterContext)
		}
	}

	return tst
}

func (s *TypeParameterListContext) TypeParameter(i int) ITypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *TypeParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *TypeParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *TypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeParameterList() (localctx ITypeParameterListContext) {
	localctx = NewTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, TypeScriptParserRULE_typeParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(297)
		p.TypeParameter()
	}
	p.SetState(302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(298)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(299)
			p.TypeParameter()
		}

		p.SetState(304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeParameter
	return p
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *TypeParameterContext) Constraint() IConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraintContext)
}

func (s *TypeParameterContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, TypeScriptParserRULE_typeParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(310)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(305)
			p.Match(TypeScriptParserIdentifier)
		}
		p.SetState(307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserExtends {
			{
				p.SetState(306)
				p.Constraint()
			}

		}

	case TypeScriptParserLessThan:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(309)
			p.TypeParameters()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstraintContext is an interface to support dynamic dispatch.
type IConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraintContext differentiates from other interfaces.
	IsConstraintContext()
}

type ConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintContext() *ConstraintContext {
	var p = new(ConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_constraint
	return p
}

func (*ConstraintContext) IsConstraintContext() {}

func NewConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintContext {
	var p = new(ConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_constraint

	return p
}

func (s *ConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintContext) Extends() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExtends, 0)
}

func (s *ConstraintContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Constraint() (localctx IConstraintContext) {
	localctx = NewConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, TypeScriptParserRULE_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(312)
		p.Match(TypeScriptParserExtends)
	}
	{
		p.SetState(313)
		p.Type_()
	}

	return localctx
}

// ITypeArgumentsContext is an interface to support dynamic dispatch.
type ITypeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArgumentsContext differentiates from other interfaces.
	IsTypeArgumentsContext()
}

type TypeArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentsContext() *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeArguments
	return p
}

func (*TypeArgumentsContext) IsTypeArgumentsContext() {}

func NewTypeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeArguments

	return p
}

func (s *TypeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentsContext) LessThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThan, 0)
}

func (s *TypeArgumentsContext) MoreThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMoreThan, 0)
}

func (s *TypeArgumentsContext) TypeArgumentList() ITypeArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentListContext)
}

func (s *TypeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeArguments() (localctx ITypeArgumentsContext) {
	localctx = NewTypeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, TypeScriptParserRULE_typeArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(315)
		p.Match(TypeScriptParserLessThan)
	}
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(TypeScriptParserTypeof-65))|(1<<(TypeScriptParserNew-65))|(1<<(TypeScriptParserVoid-65))|(1<<(TypeScriptParserThis-65)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(TypeScriptParserAny-108))|(1<<(TypeScriptParserNumber-108))|(1<<(TypeScriptParserBoolean-108))|(1<<(TypeScriptParserStr-108))|(1<<(TypeScriptParserSymbol-108))|(1<<(TypeScriptParserIdentifier-108))|(1<<(TypeScriptParserStringLiteral-108)))) != 0) {
		{
			p.SetState(316)
			p.TypeArgumentList()
		}

	}
	{
		p.SetState(319)
		p.Match(TypeScriptParserMoreThan)
	}

	return localctx
}

// ITypeArgumentListContext is an interface to support dynamic dispatch.
type ITypeArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArgumentListContext differentiates from other interfaces.
	IsTypeArgumentListContext()
}

type TypeArgumentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentListContext() *TypeArgumentListContext {
	var p = new(TypeArgumentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeArgumentList
	return p
}

func (*TypeArgumentListContext) IsTypeArgumentListContext() {}

func NewTypeArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentListContext {
	var p = new(TypeArgumentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeArgumentList

	return p
}

func (s *TypeArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentListContext) AllTypeArgument() []ITypeArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeArgumentContext)(nil)).Elem())
	var tst = make([]ITypeArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeArgumentContext)
		}
	}

	return tst
}

func (s *TypeArgumentListContext) TypeArgument(i int) ITypeArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentContext)
}

func (s *TypeArgumentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *TypeArgumentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *TypeArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeArgumentList() (localctx ITypeArgumentListContext) {
	localctx = NewTypeArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, TypeScriptParserRULE_typeArgumentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(321)
		p.TypeArgument()
	}
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(322)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(323)
			p.TypeArgument()
		}

		p.SetState(328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeArgumentContext is an interface to support dynamic dispatch.
type ITypeArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArgumentContext differentiates from other interfaces.
	IsTypeArgumentContext()
}

type TypeArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentContext() *TypeArgumentContext {
	var p = new(TypeArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeArgument
	return p
}

func (*TypeArgumentContext) IsTypeArgumentContext() {}

func NewTypeArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentContext {
	var p = new(TypeArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeArgument

	return p
}

func (s *TypeArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeArgument() (localctx ITypeArgumentContext) {
	localctx = NewTypeArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, TypeScriptParserRULE_typeArgument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(329)
		p.Type_()
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) UnionOrIntersectionOrPrimaryType() IUnionOrIntersectionOrPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionOrIntersectionOrPrimaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionOrIntersectionOrPrimaryTypeContext)
}

func (s *Type_Context) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *Type_Context) ConstructorType() IConstructorTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorTypeContext)
}

func (s *Type_Context) TypeGeneric() ITypeGenericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeGenericContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeGenericContext)
}

func (s *Type_Context) StringLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStringLiteral, 0)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitType_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Type_() (localctx IType_Context) {
	localctx = NewType_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, TypeScriptParserRULE_type_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(336)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(331)
			p.unionOrIntersectionOrPrimaryType(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(332)
			p.FunctionType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(333)
			p.ConstructorType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(334)
			p.TypeGeneric()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(335)
			p.Match(TypeScriptParserStringLiteral)
		}

	}

	return localctx
}

// IUnionOrIntersectionOrPrimaryTypeContext is an interface to support dynamic dispatch.
type IUnionOrIntersectionOrPrimaryTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionOrIntersectionOrPrimaryTypeContext differentiates from other interfaces.
	IsUnionOrIntersectionOrPrimaryTypeContext()
}

type UnionOrIntersectionOrPrimaryTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionOrIntersectionOrPrimaryTypeContext() *UnionOrIntersectionOrPrimaryTypeContext {
	var p = new(UnionOrIntersectionOrPrimaryTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_unionOrIntersectionOrPrimaryType
	return p
}

func (*UnionOrIntersectionOrPrimaryTypeContext) IsUnionOrIntersectionOrPrimaryTypeContext() {}

func NewUnionOrIntersectionOrPrimaryTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionOrIntersectionOrPrimaryTypeContext {
	var p = new(UnionOrIntersectionOrPrimaryTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_unionOrIntersectionOrPrimaryType

	return p
}

func (s *UnionOrIntersectionOrPrimaryTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionOrIntersectionOrPrimaryTypeContext) CopyFrom(ctx *UnionOrIntersectionOrPrimaryTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UnionOrIntersectionOrPrimaryTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionOrIntersectionOrPrimaryTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntersectionContext struct {
	*UnionOrIntersectionOrPrimaryTypeContext
}

func NewIntersectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntersectionContext {
	var p = new(IntersectionContext)

	p.UnionOrIntersectionOrPrimaryTypeContext = NewEmptyUnionOrIntersectionOrPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UnionOrIntersectionOrPrimaryTypeContext))

	return p
}

func (s *IntersectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntersectionContext) AllUnionOrIntersectionOrPrimaryType() []IUnionOrIntersectionOrPrimaryTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionOrIntersectionOrPrimaryTypeContext)(nil)).Elem())
	var tst = make([]IUnionOrIntersectionOrPrimaryTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionOrIntersectionOrPrimaryTypeContext)
		}
	}

	return tst
}

func (s *IntersectionContext) UnionOrIntersectionOrPrimaryType(i int) IUnionOrIntersectionOrPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionOrIntersectionOrPrimaryTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionOrIntersectionOrPrimaryTypeContext)
}

func (s *IntersectionContext) BitAnd() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitAnd, 0)
}

func (s *IntersectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIntersection(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimaryContext struct {
	*UnionOrIntersectionOrPrimaryTypeContext
}

func NewPrimaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryContext {
	var p = new(PrimaryContext)

	p.UnionOrIntersectionOrPrimaryTypeContext = NewEmptyUnionOrIntersectionOrPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UnionOrIntersectionOrPrimaryTypeContext))

	return p
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) PrimaryType() IPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryTypeContext)
}

func (s *PrimaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPrimary(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionContext struct {
	*UnionOrIntersectionOrPrimaryTypeContext
}

func NewUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionContext {
	var p = new(UnionContext)

	p.UnionOrIntersectionOrPrimaryTypeContext = NewEmptyUnionOrIntersectionOrPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UnionOrIntersectionOrPrimaryTypeContext))

	return p
}

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) AllUnionOrIntersectionOrPrimaryType() []IUnionOrIntersectionOrPrimaryTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionOrIntersectionOrPrimaryTypeContext)(nil)).Elem())
	var tst = make([]IUnionOrIntersectionOrPrimaryTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionOrIntersectionOrPrimaryTypeContext)
		}
	}

	return tst
}

func (s *UnionContext) UnionOrIntersectionOrPrimaryType(i int) IUnionOrIntersectionOrPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionOrIntersectionOrPrimaryTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionOrIntersectionOrPrimaryTypeContext)
}

func (s *UnionContext) BitOr() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitOr, 0)
}

func (s *UnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) UnionOrIntersectionOrPrimaryType() (localctx IUnionOrIntersectionOrPrimaryTypeContext) {
	return p.unionOrIntersectionOrPrimaryType(0)
}

func (p *TypeScriptParser) unionOrIntersectionOrPrimaryType(_p int) (localctx IUnionOrIntersectionOrPrimaryTypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewUnionOrIntersectionOrPrimaryTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IUnionOrIntersectionOrPrimaryTypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 20
	p.EnterRecursionRule(localctx, 20, TypeScriptParserRULE_unionOrIntersectionOrPrimaryType, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPrimaryContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(339)
		p.primaryType(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(349)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(347)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
			case 1:
				localctx = NewUnionContext(p, NewUnionOrIntersectionOrPrimaryTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_unionOrIntersectionOrPrimaryType)
				p.SetState(341)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(342)
					p.Match(TypeScriptParserBitOr)
				}
				{
					p.SetState(343)
					p.unionOrIntersectionOrPrimaryType(4)
				}

			case 2:
				localctx = NewIntersectionContext(p, NewUnionOrIntersectionOrPrimaryTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_unionOrIntersectionOrPrimaryType)
				p.SetState(344)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(345)
					p.Match(TypeScriptParserBitAnd)
				}
				{
					p.SetState(346)
					p.unionOrIntersectionOrPrimaryType(3)
				}

			}

		}
		p.SetState(351)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryTypeContext is an interface to support dynamic dispatch.
type IPrimaryTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryTypeContext differentiates from other interfaces.
	IsPrimaryTypeContext()
}

type PrimaryTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryTypeContext() *PrimaryTypeContext {
	var p = new(PrimaryTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_primaryType
	return p
}

func (*PrimaryTypeContext) IsPrimaryTypeContext() {}

func NewPrimaryTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryTypeContext {
	var p = new(PrimaryTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_primaryType

	return p
}

func (s *PrimaryTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryTypeContext) CopyFrom(ctx *PrimaryTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrimaryTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RedefinitionOfTypeContext struct {
	*PrimaryTypeContext
}

func NewRedefinitionOfTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RedefinitionOfTypeContext {
	var p = new(RedefinitionOfTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *RedefinitionOfTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RedefinitionOfTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *RedefinitionOfTypeContext) Is() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIs, 0)
}

func (s *RedefinitionOfTypeContext) PrimaryType() IPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryTypeContext)
}

func (s *RedefinitionOfTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRedefinitionOfType(s)

	default:
		return t.VisitChildren(s)
	}
}

type PredefinedPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewPredefinedPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredefinedPrimTypeContext {
	var p = new(PredefinedPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *PredefinedPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredefinedPrimTypeContext) PredefinedType() IPredefinedTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredefinedTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredefinedTypeContext)
}

func (s *PredefinedPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPredefinedPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewArrayPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayPrimTypeContext {
	var p = new(ArrayPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *ArrayPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayPrimTypeContext) PrimaryType() IPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryTypeContext)
}

func (s *ArrayPrimTypeContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *ArrayPrimTypeContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *ArrayPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrayPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesizedPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewParenthesizedPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedPrimTypeContext {
	var p = new(ParenthesizedPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *ParenthesizedPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedPrimTypeContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ParenthesizedPrimTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ParenthesizedPrimTypeContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ParenthesizedPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitParenthesizedPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type ThisPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewThisPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ThisPrimTypeContext {
	var p = new(ThisPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *ThisPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThisPrimTypeContext) This() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserThis, 0)
}

func (s *ThisPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitThisPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type TuplePrimTypeContext struct {
	*PrimaryTypeContext
}

func NewTuplePrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TuplePrimTypeContext {
	var p = new(TuplePrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *TuplePrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePrimTypeContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *TuplePrimTypeContext) TupleElementTypes() ITupleElementTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleElementTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleElementTypesContext)
}

func (s *TuplePrimTypeContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *TuplePrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTuplePrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type ObjectPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewObjectPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ObjectPrimTypeContext {
	var p = new(ObjectPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *ObjectPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectPrimTypeContext) ObjectType() IObjectTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectTypeContext)
}

func (s *ObjectPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitObjectPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReferencePrimTypeContext struct {
	*PrimaryTypeContext
}

func NewReferencePrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReferencePrimTypeContext {
	var p = new(ReferencePrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *ReferencePrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferencePrimTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ReferencePrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitReferencePrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

type QueryPrimTypeContext struct {
	*PrimaryTypeContext
}

func NewQueryPrimTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryPrimTypeContext {
	var p = new(QueryPrimTypeContext)

	p.PrimaryTypeContext = NewEmptyPrimaryTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryTypeContext))

	return p
}

func (s *QueryPrimTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimTypeContext) TypeQuery() ITypeQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQueryContext)
}

func (s *QueryPrimTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitQueryPrimType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PrimaryType() (localctx IPrimaryTypeContext) {
	return p.primaryType(0)
}

func (p *TypeScriptParser) primaryType(_p int) (localctx IPrimaryTypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPrimaryTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPrimaryTypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, TypeScriptParserRULE_primaryType, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(370)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		localctx = NewParenthesizedPrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(353)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(354)
			p.Type_()
		}
		{
			p.SetState(355)
			p.Match(TypeScriptParserCloseParen)
		}

	case 2:
		localctx = NewPredefinedPrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(357)
			p.PredefinedType()
		}

	case 3:
		localctx = NewReferencePrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(358)
			p.TypeReference()
		}

	case 4:
		localctx = NewObjectPrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(359)
			p.ObjectType()
		}

	case 5:
		localctx = NewTuplePrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(360)
			p.Match(TypeScriptParserOpenBracket)
		}
		{
			p.SetState(361)
			p.TupleElementTypes()
		}
		{
			p.SetState(362)
			p.Match(TypeScriptParserCloseBracket)
		}

	case 6:
		localctx = NewQueryPrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(364)
			p.TypeQuery()
		}

	case 7:
		localctx = NewThisPrimTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(365)
			p.Match(TypeScriptParserThis)
		}

	case 8:
		localctx = NewRedefinitionOfTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(366)
			p.TypeReference()
		}
		{
			p.SetState(367)
			p.Match(TypeScriptParserIs)
		}
		{
			p.SetState(368)
			p.primaryType(1)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArrayPrimTypeContext(p, NewPrimaryTypeContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_primaryType)
			p.SetState(372)

			if !(p.Precpred(p.GetParserRuleContext(), 5)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
			}
			p.SetState(373)

			if !(p.notLineTerminator()) {
				panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
			}
			{
				p.SetState(374)
				p.Match(TypeScriptParserOpenBracket)
			}
			{
				p.SetState(375)
				p.Match(TypeScriptParserCloseBracket)
			}

		}
		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())
	}

	return localctx
}

// IPredefinedTypeContext is an interface to support dynamic dispatch.
type IPredefinedTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredefinedTypeContext differentiates from other interfaces.
	IsPredefinedTypeContext()
}

type PredefinedTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredefinedTypeContext() *PredefinedTypeContext {
	var p = new(PredefinedTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_predefinedType
	return p
}

func (*PredefinedTypeContext) IsPredefinedTypeContext() {}

func NewPredefinedTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredefinedTypeContext {
	var p = new(PredefinedTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_predefinedType

	return p
}

func (s *PredefinedTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PredefinedTypeContext) Any() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAny, 0)
}

func (s *PredefinedTypeContext) Number() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNumber, 0)
}

func (s *PredefinedTypeContext) Boolean() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBoolean, 0)
}

func (s *PredefinedTypeContext) Str() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStr, 0)
}

func (s *PredefinedTypeContext) Symbol() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSymbol, 0)
}

func (s *PredefinedTypeContext) Void() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserVoid, 0)
}

func (s *PredefinedTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredefinedTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredefinedTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPredefinedType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PredefinedType() (localctx IPredefinedTypeContext) {
	localctx = NewPredefinedTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, TypeScriptParserRULE_predefinedType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(381)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TypeScriptParserVoid || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(TypeScriptParserAny-108))|(1<<(TypeScriptParserNumber-108))|(1<<(TypeScriptParserBoolean-108))|(1<<(TypeScriptParserStr-108))|(1<<(TypeScriptParserSymbol-108)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeReference
	return p
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeReferenceContext) NestedTypeGeneric() INestedTypeGenericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedTypeGenericContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedTypeGenericContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, TypeScriptParserRULE_typeReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(383)
		p.TypeName()
	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(384)
			p.NestedTypeGeneric()
		}

	}

	return localctx
}

// INestedTypeGenericContext is an interface to support dynamic dispatch.
type INestedTypeGenericContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNestedTypeGenericContext differentiates from other interfaces.
	IsNestedTypeGenericContext()
}

type NestedTypeGenericContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedTypeGenericContext() *NestedTypeGenericContext {
	var p = new(NestedTypeGenericContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_nestedTypeGeneric
	return p
}

func (*NestedTypeGenericContext) IsNestedTypeGenericContext() {}

func NewNestedTypeGenericContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedTypeGenericContext {
	var p = new(NestedTypeGenericContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_nestedTypeGeneric

	return p
}

func (s *NestedTypeGenericContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedTypeGenericContext) TypeIncludeGeneric() ITypeIncludeGenericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIncludeGenericContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIncludeGenericContext)
}

func (s *NestedTypeGenericContext) TypeGeneric() ITypeGenericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeGenericContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeGenericContext)
}

func (s *NestedTypeGenericContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedTypeGenericContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedTypeGenericContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNestedTypeGeneric(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) NestedTypeGeneric() (localctx INestedTypeGenericContext) {
	localctx = NewNestedTypeGenericContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, TypeScriptParserRULE_nestedTypeGeneric)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(389)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(387)
			p.TypeIncludeGeneric()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(388)
			p.TypeGeneric()
		}

	}

	return localctx
}

// ITypeGenericContext is an interface to support dynamic dispatch.
type ITypeGenericContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeGenericContext differentiates from other interfaces.
	IsTypeGenericContext()
}

type TypeGenericContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeGenericContext() *TypeGenericContext {
	var p = new(TypeGenericContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeGeneric
	return p
}

func (*TypeGenericContext) IsTypeGenericContext() {}

func NewTypeGenericContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeGenericContext {
	var p = new(TypeGenericContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeGeneric

	return p
}

func (s *TypeGenericContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeGenericContext) LessThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThan, 0)
}

func (s *TypeGenericContext) TypeArgumentList() ITypeArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentListContext)
}

func (s *TypeGenericContext) MoreThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMoreThan, 0)
}

func (s *TypeGenericContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeGenericContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeGenericContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeGeneric(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeGeneric() (localctx ITypeGenericContext) {
	localctx = NewTypeGenericContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, TypeScriptParserRULE_typeGeneric)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(391)
		p.Match(TypeScriptParserLessThan)
	}
	{
		p.SetState(392)
		p.TypeArgumentList()
	}
	{
		p.SetState(393)
		p.Match(TypeScriptParserMoreThan)
	}

	return localctx
}

// ITypeIncludeGenericContext is an interface to support dynamic dispatch.
type ITypeIncludeGenericContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIncludeGenericContext differentiates from other interfaces.
	IsTypeIncludeGenericContext()
}

type TypeIncludeGenericContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIncludeGenericContext() *TypeIncludeGenericContext {
	var p = new(TypeIncludeGenericContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeIncludeGeneric
	return p
}

func (*TypeIncludeGenericContext) IsTypeIncludeGenericContext() {}

func NewTypeIncludeGenericContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIncludeGenericContext {
	var p = new(TypeIncludeGenericContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeIncludeGeneric

	return p
}

func (s *TypeIncludeGenericContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIncludeGenericContext) AllLessThan() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserLessThan)
}

func (s *TypeIncludeGenericContext) LessThan(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThan, i)
}

func (s *TypeIncludeGenericContext) AllTypeArgumentList() []ITypeArgumentListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeArgumentListContext)(nil)).Elem())
	var tst = make([]ITypeArgumentListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeArgumentListContext)
		}
	}

	return tst
}

func (s *TypeIncludeGenericContext) TypeArgumentList(i int) ITypeArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentListContext)
}

func (s *TypeIncludeGenericContext) AllMoreThan() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserMoreThan)
}

func (s *TypeIncludeGenericContext) MoreThan(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMoreThan, i)
}

func (s *TypeIncludeGenericContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *TypeIncludeGenericContext) RightShiftArithmetic() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRightShiftArithmetic, 0)
}

func (s *TypeIncludeGenericContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIncludeGenericContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIncludeGenericContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeIncludeGeneric(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeIncludeGeneric() (localctx ITypeIncludeGenericContext) {
	localctx = NewTypeIncludeGenericContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, TypeScriptParserRULE_typeIncludeGeneric)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Match(TypeScriptParserLessThan)
	}
	{
		p.SetState(396)
		p.TypeArgumentList()
	}
	{
		p.SetState(397)
		p.Match(TypeScriptParserLessThan)
	}
	{
		p.SetState(398)
		p.TypeArgumentList()
	}
	p.SetState(404)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserMoreThan:
		{
			p.SetState(399)
			p.Match(TypeScriptParserMoreThan)
		}
		{
			p.SetState(400)
			p.BindingPattern()
		}
		{
			p.SetState(401)
			p.Match(TypeScriptParserMoreThan)
		}

	case TypeScriptParserRightShiftArithmetic:
		{
			p.SetState(403)
			p.Match(TypeScriptParserRightShiftArithmetic)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *TypeNameContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, TypeScriptParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(408)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(406)
			p.Match(TypeScriptParserIdentifier)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(407)
			p.NamespaceName()
		}

	}

	return localctx
}

// IObjectTypeContext is an interface to support dynamic dispatch.
type IObjectTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectTypeContext differentiates from other interfaces.
	IsObjectTypeContext()
}

type ObjectTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectTypeContext() *ObjectTypeContext {
	var p = new(ObjectTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_objectType
	return p
}

func (*ObjectTypeContext) IsObjectTypeContext() {}

func NewObjectTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectTypeContext {
	var p = new(ObjectTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_objectType

	return p
}

func (s *ObjectTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectTypeContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *ObjectTypeContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *ObjectTypeContext) TypeBody() ITypeBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBodyContext)
}

func (s *ObjectTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitObjectType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ObjectType() (localctx IObjectTypeContext) {
	localctx = NewObjectTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, TypeScriptParserRULE_objectType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(410)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserIdentifier || _la == TypeScriptParserStringLiteral {
		{
			p.SetState(411)
			p.TypeBody()
		}

	}
	{
		p.SetState(414)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// ITypeBodyContext is an interface to support dynamic dispatch.
type ITypeBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeBodyContext differentiates from other interfaces.
	IsTypeBodyContext()
}

type TypeBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeBodyContext() *TypeBodyContext {
	var p = new(TypeBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeBody
	return p
}

func (*TypeBodyContext) IsTypeBodyContext() {}

func NewTypeBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBodyContext {
	var p = new(TypeBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeBody

	return p
}

func (s *TypeBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBodyContext) TypeMemberList() ITypeMemberListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeMemberListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeMemberListContext)
}

func (s *TypeBodyContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *TypeBodyContext) Comma() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, 0)
}

func (s *TypeBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeBody() (localctx ITypeBodyContext) {
	localctx = NewTypeBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, TypeScriptParserRULE_typeBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(416)
		p.TypeMemberList()
	}
	p.SetState(418)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserSemiColon || _la == TypeScriptParserComma {
		{
			p.SetState(417)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TypeScriptParserSemiColon || _la == TypeScriptParserComma) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITypeMemberListContext is an interface to support dynamic dispatch.
type ITypeMemberListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeMemberListContext differentiates from other interfaces.
	IsTypeMemberListContext()
}

type TypeMemberListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeMemberListContext() *TypeMemberListContext {
	var p = new(TypeMemberListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeMemberList
	return p
}

func (*TypeMemberListContext) IsTypeMemberListContext() {}

func NewTypeMemberListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeMemberListContext {
	var p = new(TypeMemberListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeMemberList

	return p
}

func (s *TypeMemberListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeMemberListContext) AllTypeMember() []ITypeMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeMemberContext)(nil)).Elem())
	var tst = make([]ITypeMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeMemberContext)
		}
	}

	return tst
}

func (s *TypeMemberListContext) TypeMember(i int) ITypeMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeMemberContext)
}

func (s *TypeMemberListContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserSemiColon)
}

func (s *TypeMemberListContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, i)
}

func (s *TypeMemberListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *TypeMemberListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *TypeMemberListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeMemberListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeMemberListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeMemberList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeMemberList() (localctx ITypeMemberListContext) {
	localctx = NewTypeMemberListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, TypeScriptParserRULE_typeMemberList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		p.TypeMember()
	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(421)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TypeScriptParserSemiColon || _la == TypeScriptParserComma) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(422)
				p.TypeMember()
			}

		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeMemberContext is an interface to support dynamic dispatch.
type ITypeMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeMemberContext differentiates from other interfaces.
	IsTypeMemberContext()
}

type TypeMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeMemberContext() *TypeMemberContext {
	var p = new(TypeMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeMember
	return p
}

func (*TypeMemberContext) IsTypeMemberContext() {}

func NewTypeMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeMemberContext {
	var p = new(TypeMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeMember

	return p
}

func (s *TypeMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeMemberContext) PropertySignatur() IPropertySignaturContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertySignaturContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertySignaturContext)
}

func (s *TypeMemberContext) CallSignature() ICallSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSignatureContext)
}

func (s *TypeMemberContext) ConstructSignature() IConstructSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructSignatureContext)
}

func (s *TypeMemberContext) IndexSignature() IIndexSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexSignatureContext)
}

func (s *TypeMemberContext) MethodSignature() IMethodSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodSignatureContext)
}

func (s *TypeMemberContext) ARROW() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserARROW, 0)
}

func (s *TypeMemberContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeMember() (localctx ITypeMemberContext) {
	localctx = NewTypeMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, TypeScriptParserRULE_typeMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(437)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(428)
			p.PropertySignatur()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(429)
			p.CallSignature()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(430)
			p.ConstructSignature()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(431)
			p.IndexSignature()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(432)
			p.MethodSignature()
		}
		p.SetState(435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserARROW {
			{
				p.SetState(433)
				p.Match(TypeScriptParserARROW)
			}
			{
				p.SetState(434)
				p.Type_()
			}

		}

	}

	return localctx
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrayType
	return p
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) PrimaryType() IPrimaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryTypeContext)
}

func (s *ArrayTypeContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *ArrayTypeContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrayType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, TypeScriptParserRULE_arrayType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(439)
		p.primaryType(0)
	}
	p.SetState(440)

	if !(p.notLineTerminator()) {
		panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
	}
	{
		p.SetState(441)
		p.Match(TypeScriptParserOpenBracket)
	}
	{
		p.SetState(442)
		p.Match(TypeScriptParserCloseBracket)
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *TupleTypeContext) TupleElementTypes() ITupleElementTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleElementTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleElementTypesContext)
}

func (s *TupleTypeContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTupleType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TupleType() (localctx ITupleTypeContext) {
	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, TypeScriptParserRULE_tupleType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(444)
		p.Match(TypeScriptParserOpenBracket)
	}
	{
		p.SetState(445)
		p.TupleElementTypes()
	}
	{
		p.SetState(446)
		p.Match(TypeScriptParserCloseBracket)
	}

	return localctx
}

// ITupleElementTypesContext is an interface to support dynamic dispatch.
type ITupleElementTypesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleElementTypesContext differentiates from other interfaces.
	IsTupleElementTypesContext()
}

type TupleElementTypesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleElementTypesContext() *TupleElementTypesContext {
	var p = new(TupleElementTypesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_tupleElementTypes
	return p
}

func (*TupleElementTypesContext) IsTupleElementTypesContext() {}

func NewTupleElementTypesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleElementTypesContext {
	var p = new(TupleElementTypesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_tupleElementTypes

	return p
}

func (s *TupleElementTypesContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleElementTypesContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *TupleElementTypesContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TupleElementTypesContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *TupleElementTypesContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *TupleElementTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleElementTypesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleElementTypesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTupleElementTypes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TupleElementTypes() (localctx ITupleElementTypesContext) {
	localctx = NewTupleElementTypesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, TypeScriptParserRULE_tupleElementTypes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(448)
		p.Type_()
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(449)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(450)
			p.Type_()
		}

		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *FunctionTypeContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *FunctionTypeContext) ARROW() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserARROW, 0)
}

func (s *FunctionTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *FunctionTypeContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFunctionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, TypeScriptParserRULE_functionType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(456)
			p.TypeParameters()
		}

	}
	{
		p.SetState(459)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserAt || _la == TypeScriptParserIdentifier {
		{
			p.SetState(460)
			p.ParameterList()
		}

	}
	{
		p.SetState(463)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(464)
		p.Match(TypeScriptParserARROW)
	}
	{
		p.SetState(465)
		p.Type_()
	}

	return localctx
}

// IConstructorTypeContext is an interface to support dynamic dispatch.
type IConstructorTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorTypeContext differentiates from other interfaces.
	IsConstructorTypeContext()
}

type ConstructorTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorTypeContext() *ConstructorTypeContext {
	var p = new(ConstructorTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_constructorType
	return p
}

func (*ConstructorTypeContext) IsConstructorTypeContext() {}

func NewConstructorTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorTypeContext {
	var p = new(ConstructorTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_constructorType

	return p
}

func (s *ConstructorTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorTypeContext) New() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNew, 0)
}

func (s *ConstructorTypeContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ConstructorTypeContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ConstructorTypeContext) ARROW() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserARROW, 0)
}

func (s *ConstructorTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConstructorTypeContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ConstructorTypeContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ConstructorTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitConstructorType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ConstructorType() (localctx IConstructorTypeContext) {
	localctx = NewConstructorTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, TypeScriptParserRULE_constructorType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(467)
		p.Match(TypeScriptParserNew)
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(468)
			p.TypeParameters()
		}

	}
	{
		p.SetState(471)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserAt || _la == TypeScriptParserIdentifier {
		{
			p.SetState(472)
			p.ParameterList()
		}

	}
	{
		p.SetState(475)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(476)
		p.Match(TypeScriptParserARROW)
	}
	{
		p.SetState(477)
		p.Type_()
	}

	return localctx
}

// ITypeQueryContext is an interface to support dynamic dispatch.
type ITypeQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQueryContext differentiates from other interfaces.
	IsTypeQueryContext()
}

type TypeQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQueryContext() *TypeQueryContext {
	var p = new(TypeQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeQuery
	return p
}

func (*TypeQueryContext) IsTypeQueryContext() {}

func NewTypeQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQueryContext {
	var p = new(TypeQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeQuery

	return p
}

func (s *TypeQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeQueryContext) Typeof() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeof, 0)
}

func (s *TypeQueryContext) TypeQueryExpression() ITypeQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQueryExpressionContext)
}

func (s *TypeQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeQuery() (localctx ITypeQueryContext) {
	localctx = NewTypeQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, TypeScriptParserRULE_typeQuery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(TypeScriptParserTypeof)
	}
	{
		p.SetState(480)
		p.TypeQueryExpression()
	}

	return localctx
}

// ITypeQueryExpressionContext is an interface to support dynamic dispatch.
type ITypeQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQueryExpressionContext differentiates from other interfaces.
	IsTypeQueryExpressionContext()
}

type TypeQueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQueryExpressionContext() *TypeQueryExpressionContext {
	var p = new(TypeQueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeQueryExpression
	return p
}

func (*TypeQueryExpressionContext) IsTypeQueryExpressionContext() {}

func NewTypeQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQueryExpressionContext {
	var p = new(TypeQueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeQueryExpression

	return p
}

func (s *TypeQueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeQueryExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *TypeQueryExpressionContext) AllIdentifierName() []IIdentifierNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem())
	var tst = make([]IIdentifierNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierNameContext)
		}
	}

	return tst
}

func (s *TypeQueryExpressionContext) IdentifierName(i int) IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *TypeQueryExpressionContext) AllDot() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserDot)
}

func (s *TypeQueryExpressionContext) Dot(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDot, i)
}

func (s *TypeQueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQueryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeQueryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeQueryExpression() (localctx ITypeQueryExpressionContext) {
	localctx = NewTypeQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, TypeScriptParserRULE_typeQueryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(492)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(482)
			p.Match(TypeScriptParserIdentifier)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(486)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(483)
					p.IdentifierName()
				}
				{
					p.SetState(484)
					p.Match(TypeScriptParserDot)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(488)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
		}
		{
			p.SetState(490)
			p.IdentifierName()
		}

	}

	return localctx
}

// IPropertySignaturContext is an interface to support dynamic dispatch.
type IPropertySignaturContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertySignaturContext differentiates from other interfaces.
	IsPropertySignaturContext()
}

type PropertySignaturContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertySignaturContext() *PropertySignaturContext {
	var p = new(PropertySignaturContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_propertySignatur
	return p
}

func (*PropertySignaturContext) IsPropertySignaturContext() {}

func NewPropertySignaturContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertySignaturContext {
	var p = new(PropertySignaturContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_propertySignatur

	return p
}

func (s *PropertySignaturContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertySignaturContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *PropertySignaturContext) ReadOnly() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReadOnly, 0)
}

func (s *PropertySignaturContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *PropertySignaturContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *PropertySignaturContext) ARROW() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserARROW, 0)
}

func (s *PropertySignaturContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PropertySignaturContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertySignaturContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertySignaturContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertySignatur(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PropertySignatur() (localctx IPropertySignaturContext) {
	localctx = NewPropertySignaturContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, TypeScriptParserRULE_propertySignatur)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(495)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(494)
			p.Match(TypeScriptParserReadOnly)
		}

	}
	{
		p.SetState(497)
		p.PropertyName()
	}
	p.SetState(499)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserQuestionMark {
		{
			p.SetState(498)
			p.Match(TypeScriptParserQuestionMark)
		}

	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(501)
			p.TypeAnnotation()
		}

	}
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserARROW {
		{
			p.SetState(504)
			p.Match(TypeScriptParserARROW)
		}
		{
			p.SetState(505)
			p.Type_()
		}

	}

	return localctx
}

// ITypeAnnotationContext is an interface to support dynamic dispatch.
type ITypeAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnnotationContext differentiates from other interfaces.
	IsTypeAnnotationContext()
}

type TypeAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnnotationContext() *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeAnnotation
	return p
}

func (*TypeAnnotationContext) IsTypeAnnotationContext() {}

func NewTypeAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeAnnotation

	return p
}

func (s *TypeAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnnotationContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *TypeAnnotationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeAnnotation() (localctx ITypeAnnotationContext) {
	localctx = NewTypeAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, TypeScriptParserRULE_typeAnnotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(508)
		p.Match(TypeScriptParserColon)
	}
	{
		p.SetState(509)
		p.Type_()
	}

	return localctx
}

// ICallSignatureContext is an interface to support dynamic dispatch.
type ICallSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallSignatureContext differentiates from other interfaces.
	IsCallSignatureContext()
}

type CallSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallSignatureContext() *CallSignatureContext {
	var p = new(CallSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_callSignature
	return p
}

func (*CallSignatureContext) IsCallSignatureContext() {}

func NewCallSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallSignatureContext {
	var p = new(CallSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_callSignature

	return p
}

func (s *CallSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *CallSignatureContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *CallSignatureContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *CallSignatureContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *CallSignatureContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *CallSignatureContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *CallSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCallSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) CallSignature() (localctx ICallSignatureContext) {
	localctx = NewCallSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, TypeScriptParserRULE_callSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(511)
			p.TypeParameters()
		}

	}
	{
		p.SetState(514)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserAt || _la == TypeScriptParserIdentifier {
		{
			p.SetState(515)
			p.ParameterList()
		}

	}
	{
		p.SetState(518)
		p.Match(TypeScriptParserCloseParen)
	}
	p.SetState(520)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(519)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) RestParameter() IRestParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestParameterContext)
}

func (s *ParameterListContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterListContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ParameterList() (localctx IParameterListContext) {
	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, TypeScriptParserRULE_parameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(535)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserEllipsis:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(522)
			p.RestParameter()
		}

	case TypeScriptParserOpenBracket, TypeScriptParserOpenBrace, TypeScriptParserNullLiteral, TypeScriptParserBooleanLiteral, TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire, TypeScriptParserAt, TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(523)
			p.Parameter()
		}
		p.SetState(528)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(524)
					p.Match(TypeScriptParserComma)
				}
				{
					p.SetState(525)
					p.Parameter()
				}

			}
			p.SetState(530)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())
		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserComma {
			{
				p.SetState(531)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(532)
				p.RestParameter()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRequiredParameterListContext is an interface to support dynamic dispatch.
type IRequiredParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRequiredParameterListContext differentiates from other interfaces.
	IsRequiredParameterListContext()
}

type RequiredParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRequiredParameterListContext() *RequiredParameterListContext {
	var p = new(RequiredParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_requiredParameterList
	return p
}

func (*RequiredParameterListContext) IsRequiredParameterListContext() {}

func NewRequiredParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RequiredParameterListContext {
	var p = new(RequiredParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_requiredParameterList

	return p
}

func (s *RequiredParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *RequiredParameterListContext) AllRequiredParameter() []IRequiredParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRequiredParameterContext)(nil)).Elem())
	var tst = make([]IRequiredParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRequiredParameterContext)
		}
	}

	return tst
}

func (s *RequiredParameterListContext) RequiredParameter(i int) IRequiredParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRequiredParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRequiredParameterContext)
}

func (s *RequiredParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *RequiredParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *RequiredParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RequiredParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RequiredParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRequiredParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) RequiredParameterList() (localctx IRequiredParameterListContext) {
	localctx = NewRequiredParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, TypeScriptParserRULE_requiredParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.RequiredParameter()
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(538)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(539)
			p.RequiredParameter()
		}

		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) RequiredParameter() IRequiredParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRequiredParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRequiredParameterContext)
}

func (s *ParameterContext) OptionalParameter() IOptionalParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionalParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionalParameterContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, TypeScriptParserRULE_parameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(545)
			p.RequiredParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(546)
			p.OptionalParameter()
		}

	}

	return localctx
}

// IOptionalParameterContext is an interface to support dynamic dispatch.
type IOptionalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalParameterContext differentiates from other interfaces.
	IsOptionalParameterContext()
}

type OptionalParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalParameterContext() *OptionalParameterContext {
	var p = new(OptionalParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_optionalParameter
	return p
}

func (*OptionalParameterContext) IsOptionalParameterContext() {}

func NewOptionalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalParameterContext {
	var p = new(OptionalParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_optionalParameter

	return p
}

func (s *OptionalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalParameterContext) IdentifierOrPattern() IIdentifierOrPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierOrPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrPatternContext)
}

func (s *OptionalParameterContext) DecoratorList() IDecoratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorListContext)
}

func (s *OptionalParameterContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *OptionalParameterContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *OptionalParameterContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *OptionalParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *OptionalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitOptionalParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) OptionalParameter() (localctx IOptionalParameterContext) {
	localctx = NewOptionalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, TypeScriptParserRULE_optionalParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAt {
		{
			p.SetState(549)
			p.DecoratorList()
		}

	}

	p.SetState(553)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(552)
			p.AccessibilityModifier()
		}

	}
	{
		p.SetState(555)
		p.IdentifierOrPattern()
	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserQuestionMark:
		{
			p.SetState(556)
			p.Match(TypeScriptParserQuestionMark)
		}
		p.SetState(558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserColon {
			{
				p.SetState(557)
				p.TypeAnnotation()
			}

		}

	case TypeScriptParserAssign, TypeScriptParserColon:
		p.SetState(561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserColon {
			{
				p.SetState(560)
				p.TypeAnnotation()
			}

		}
		{
			p.SetState(563)
			p.Initializer()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRestParameterContext is an interface to support dynamic dispatch.
type IRestParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRestParameterContext differentiates from other interfaces.
	IsRestParameterContext()
}

type RestParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestParameterContext() *RestParameterContext {
	var p = new(RestParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_restParameter
	return p
}

func (*RestParameterContext) IsRestParameterContext() {}

func NewRestParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RestParameterContext {
	var p = new(RestParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_restParameter

	return p
}

func (s *RestParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *RestParameterContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEllipsis, 0)
}

func (s *RestParameterContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *RestParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *RestParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RestParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRestParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) RestParameter() (localctx IRestParameterContext) {
	localctx = NewRestParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, TypeScriptParserRULE_restParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(566)
		p.Match(TypeScriptParserEllipsis)
	}
	{
		p.SetState(567)
		p.singleExpression(0)
	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(568)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IRequiredParameterContext is an interface to support dynamic dispatch.
type IRequiredParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRequiredParameterContext differentiates from other interfaces.
	IsRequiredParameterContext()
}

type RequiredParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRequiredParameterContext() *RequiredParameterContext {
	var p = new(RequiredParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_requiredParameter
	return p
}

func (*RequiredParameterContext) IsRequiredParameterContext() {}

func NewRequiredParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RequiredParameterContext {
	var p = new(RequiredParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_requiredParameter

	return p
}

func (s *RequiredParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *RequiredParameterContext) IdentifierOrPattern() IIdentifierOrPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierOrPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrPatternContext)
}

func (s *RequiredParameterContext) DecoratorList() IDecoratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorListContext)
}

func (s *RequiredParameterContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *RequiredParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *RequiredParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RequiredParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RequiredParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRequiredParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) RequiredParameter() (localctx IRequiredParameterContext) {
	localctx = NewRequiredParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, TypeScriptParserRULE_requiredParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAt {
		{
			p.SetState(571)
			p.DecoratorList()
		}

	}
	p.SetState(575)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(574)
			p.AccessibilityModifier()
		}

	}
	{
		p.SetState(577)
		p.IdentifierOrPattern()
	}
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(578)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IAccessibilityModifierContext is an interface to support dynamic dispatch.
type IAccessibilityModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccessibilityModifierContext differentiates from other interfaces.
	IsAccessibilityModifierContext()
}

type AccessibilityModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccessibilityModifierContext() *AccessibilityModifierContext {
	var p = new(AccessibilityModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_accessibilityModifier
	return p
}

func (*AccessibilityModifierContext) IsAccessibilityModifierContext() {}

func NewAccessibilityModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccessibilityModifierContext {
	var p = new(AccessibilityModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_accessibilityModifier

	return p
}

func (s *AccessibilityModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AccessibilityModifierContext) Public() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPublic, 0)
}

func (s *AccessibilityModifierContext) Private() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPrivate, 0)
}

func (s *AccessibilityModifierContext) Protected() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserProtected, 0)
}

func (s *AccessibilityModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccessibilityModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccessibilityModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAccessibilityModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) AccessibilityModifier() (localctx IAccessibilityModifierContext) {
	localctx = NewAccessibilityModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, TypeScriptParserRULE_accessibilityModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(581)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierOrPatternContext is an interface to support dynamic dispatch.
type IIdentifierOrPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierOrPatternContext differentiates from other interfaces.
	IsIdentifierOrPatternContext()
}

type IdentifierOrPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierOrPatternContext() *IdentifierOrPatternContext {
	var p = new(IdentifierOrPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_identifierOrPattern
	return p
}

func (*IdentifierOrPatternContext) IsIdentifierOrPatternContext() {}

func NewIdentifierOrPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierOrPatternContext {
	var p = new(IdentifierOrPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_identifierOrPattern

	return p
}

func (s *IdentifierOrPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierOrPatternContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *IdentifierOrPatternContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *IdentifierOrPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierOrPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierOrPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIdentifierOrPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IdentifierOrPattern() (localctx IIdentifierOrPatternContext) {
	localctx = NewIdentifierOrPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, TypeScriptParserRULE_identifierOrPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(585)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserNullLiteral, TypeScriptParserBooleanLiteral, TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire, TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(583)
			p.IdentifierName()
		}

	case TypeScriptParserOpenBracket, TypeScriptParserOpenBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(584)
			p.BindingPattern()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstructSignatureContext is an interface to support dynamic dispatch.
type IConstructSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructSignatureContext differentiates from other interfaces.
	IsConstructSignatureContext()
}

type ConstructSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructSignatureContext() *ConstructSignatureContext {
	var p = new(ConstructSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_constructSignature
	return p
}

func (*ConstructSignatureContext) IsConstructSignatureContext() {}

func NewConstructSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructSignatureContext {
	var p = new(ConstructSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_constructSignature

	return p
}

func (s *ConstructSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructSignatureContext) New() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNew, 0)
}

func (s *ConstructSignatureContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ConstructSignatureContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ConstructSignatureContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ConstructSignatureContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ConstructSignatureContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *ConstructSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitConstructSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ConstructSignature() (localctx IConstructSignatureContext) {
	localctx = NewConstructSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, TypeScriptParserRULE_constructSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(587)
		p.Match(TypeScriptParserNew)
	}
	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(588)
			p.TypeParameters()
		}

	}
	{
		p.SetState(591)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserAt || _la == TypeScriptParserIdentifier {
		{
			p.SetState(592)
			p.ParameterList()
		}

	}
	{
		p.SetState(595)
		p.Match(TypeScriptParserCloseParen)
	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(596)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IIndexSignatureContext is an interface to support dynamic dispatch.
type IIndexSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexSignatureContext differentiates from other interfaces.
	IsIndexSignatureContext()
}

type IndexSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexSignatureContext() *IndexSignatureContext {
	var p = new(IndexSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_indexSignature
	return p
}

func (*IndexSignatureContext) IsIndexSignatureContext() {}

func NewIndexSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexSignatureContext {
	var p = new(IndexSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_indexSignature

	return p
}

func (s *IndexSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexSignatureContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *IndexSignatureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *IndexSignatureContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *IndexSignatureContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *IndexSignatureContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *IndexSignatureContext) Number() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNumber, 0)
}

func (s *IndexSignatureContext) Str() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStr, 0)
}

func (s *IndexSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIndexSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IndexSignature() (localctx IIndexSignatureContext) {
	localctx = NewIndexSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, TypeScriptParserRULE_indexSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(599)
		p.Match(TypeScriptParserOpenBracket)
	}
	{
		p.SetState(600)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(601)
		p.Match(TypeScriptParserColon)
	}
	{
		p.SetState(602)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TypeScriptParserNumber || _la == TypeScriptParserStr) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(603)
		p.Match(TypeScriptParserCloseBracket)
	}
	{
		p.SetState(604)
		p.TypeAnnotation()
	}

	return localctx
}

// IMethodSignatureContext is an interface to support dynamic dispatch.
type IMethodSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodSignatureContext differentiates from other interfaces.
	IsMethodSignatureContext()
}

type MethodSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodSignatureContext() *MethodSignatureContext {
	var p = new(MethodSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_methodSignature
	return p
}

func (*MethodSignatureContext) IsMethodSignatureContext() {}

func NewMethodSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodSignatureContext {
	var p = new(MethodSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_methodSignature

	return p
}

func (s *MethodSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodSignatureContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *MethodSignatureContext) CallSignature() ICallSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSignatureContext)
}

func (s *MethodSignatureContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *MethodSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMethodSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) MethodSignature() (localctx IMethodSignatureContext) {
	localctx = NewMethodSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, TypeScriptParserRULE_methodSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.PropertyName()
	}
	p.SetState(608)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserQuestionMark {
		{
			p.SetState(607)
			p.Match(TypeScriptParserQuestionMark)
		}

	}
	{
		p.SetState(610)
		p.CallSignature()
	}

	return localctx
}

// ITypeAliasDeclarationContext is an interface to support dynamic dispatch.
type ITypeAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasDeclarationContext differentiates from other interfaces.
	IsTypeAliasDeclarationContext()
}

type TypeAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasDeclarationContext() *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_typeAliasDeclaration
	return p
}

func (*TypeAliasDeclarationContext) IsTypeAliasDeclarationContext() {}

func NewTypeAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_typeAliasDeclaration

	return p
}

func (s *TypeAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasDeclarationContext) TypeAlias() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeAlias, 0)
}

func (s *TypeAliasDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *TypeAliasDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *TypeAliasDeclarationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAliasDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *TypeAliasDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *TypeAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TypeAliasDeclaration() (localctx ITypeAliasDeclarationContext) {
	localctx = NewTypeAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, TypeScriptParserRULE_typeAliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(612)
		p.Match(TypeScriptParserTypeAlias)
	}
	{
		p.SetState(613)
		p.Match(TypeScriptParserIdentifier)
	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(614)
			p.TypeParameters()
		}

	}
	{
		p.SetState(617)
		p.Match(TypeScriptParserAssign)
	}
	{
		p.SetState(618)
		p.Type_()
	}
	{
		p.SetState(619)
		p.Match(TypeScriptParserSemiColon)
	}

	return localctx
}

// IConstructorDeclarationContext is an interface to support dynamic dispatch.
type IConstructorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorDeclarationContext differentiates from other interfaces.
	IsConstructorDeclarationContext()
}

type ConstructorDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorDeclarationContext() *ConstructorDeclarationContext {
	var p = new(ConstructorDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_constructorDeclaration
	return p
}

func (*ConstructorDeclarationContext) IsConstructorDeclarationContext() {}

func NewConstructorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDeclarationContext {
	var p = new(ConstructorDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_constructorDeclaration

	return p
}

func (s *ConstructorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDeclarationContext) Constructor() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserConstructor, 0)
}

func (s *ConstructorDeclarationContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ConstructorDeclarationContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ConstructorDeclarationContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *ConstructorDeclarationContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *ConstructorDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *ConstructorDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *ConstructorDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *ConstructorDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *ConstructorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitConstructorDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ConstructorDeclaration() (localctx IConstructorDeclarationContext) {
	localctx = NewConstructorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, TypeScriptParserRULE_constructorDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(622)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101)))) != 0 {
		{
			p.SetState(621)
			p.AccessibilityModifier()
		}

	}
	{
		p.SetState(624)
		p.Match(TypeScriptParserConstructor)
	}
	{
		p.SetState(625)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
		{
			p.SetState(626)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(629)
		p.Match(TypeScriptParserCloseParen)
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(630)
			p.Match(TypeScriptParserOpenBrace)
		}
		{
			p.SetState(631)
			p.FunctionBody()
		}
		{
			p.SetState(632)
			p.Match(TypeScriptParserCloseBrace)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(634)
			p.Match(TypeScriptParserSemiColon)
		}

	}

	return localctx
}

// IInterfaceDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceDeclarationContext differentiates from other interfaces.
	IsInterfaceDeclarationContext()
}

type InterfaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclarationContext() *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_interfaceDeclaration
	return p
}

func (*InterfaceDeclarationContext) IsInterfaceDeclarationContext() {}

func NewInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_interfaceDeclaration

	return p
}

func (s *InterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclarationContext) Interface() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserInterface, 0)
}

func (s *InterfaceDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *InterfaceDeclarationContext) ObjectType() IObjectTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectTypeContext)
}

func (s *InterfaceDeclarationContext) Export() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExport, 0)
}

func (s *InterfaceDeclarationContext) Declare() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDeclare, 0)
}

func (s *InterfaceDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *InterfaceDeclarationContext) InterfaceExtendsClause() IInterfaceExtendsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceExtendsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceExtendsClauseContext)
}

func (s *InterfaceDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *InterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitInterfaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) InterfaceDeclaration() (localctx IInterfaceDeclarationContext) {
	localctx = NewInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, TypeScriptParserRULE_interfaceDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserExport {
		{
			p.SetState(637)
			p.Match(TypeScriptParserExport)
		}

	}
	p.SetState(641)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserDeclare {
		{
			p.SetState(640)
			p.Match(TypeScriptParserDeclare)
		}

	}
	{
		p.SetState(643)
		p.Match(TypeScriptParserInterface)
	}
	{
		p.SetState(644)
		p.Match(TypeScriptParserIdentifier)
	}
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(645)
			p.TypeParameters()
		}

	}
	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserExtends {
		{
			p.SetState(648)
			p.InterfaceExtendsClause()
		}

	}
	{
		p.SetState(651)
		p.ObjectType()
	}
	p.SetState(653)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(652)
			p.Match(TypeScriptParserSemiColon)
		}

	}

	return localctx
}

// IInterfaceExtendsClauseContext is an interface to support dynamic dispatch.
type IInterfaceExtendsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceExtendsClauseContext differentiates from other interfaces.
	IsInterfaceExtendsClauseContext()
}

type InterfaceExtendsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceExtendsClauseContext() *InterfaceExtendsClauseContext {
	var p = new(InterfaceExtendsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_interfaceExtendsClause
	return p
}

func (*InterfaceExtendsClauseContext) IsInterfaceExtendsClauseContext() {}

func NewInterfaceExtendsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceExtendsClauseContext {
	var p = new(InterfaceExtendsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_interfaceExtendsClause

	return p
}

func (s *InterfaceExtendsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceExtendsClauseContext) Extends() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExtends, 0)
}

func (s *InterfaceExtendsClauseContext) ClassOrInterfaceTypeList() IClassOrInterfaceTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassOrInterfaceTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeListContext)
}

func (s *InterfaceExtendsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceExtendsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceExtendsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitInterfaceExtendsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) InterfaceExtendsClause() (localctx IInterfaceExtendsClauseContext) {
	localctx = NewInterfaceExtendsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, TypeScriptParserRULE_interfaceExtendsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(655)
		p.Match(TypeScriptParserExtends)
	}
	{
		p.SetState(656)
		p.ClassOrInterfaceTypeList()
	}

	return localctx
}

// IClassOrInterfaceTypeListContext is an interface to support dynamic dispatch.
type IClassOrInterfaceTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassOrInterfaceTypeListContext differentiates from other interfaces.
	IsClassOrInterfaceTypeListContext()
}

type ClassOrInterfaceTypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassOrInterfaceTypeListContext() *ClassOrInterfaceTypeListContext {
	var p = new(ClassOrInterfaceTypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classOrInterfaceTypeList
	return p
}

func (*ClassOrInterfaceTypeListContext) IsClassOrInterfaceTypeListContext() {}

func NewClassOrInterfaceTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassOrInterfaceTypeListContext {
	var p = new(ClassOrInterfaceTypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classOrInterfaceTypeList

	return p
}

func (s *ClassOrInterfaceTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassOrInterfaceTypeListContext) AllTypeReference() []ITypeReferenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem())
	var tst = make([]ITypeReferenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeReferenceContext)
		}
	}

	return tst
}

func (s *ClassOrInterfaceTypeListContext) TypeReference(i int) ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ClassOrInterfaceTypeListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ClassOrInterfaceTypeListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ClassOrInterfaceTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassOrInterfaceTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassOrInterfaceTypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassOrInterfaceTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassOrInterfaceTypeList() (localctx IClassOrInterfaceTypeListContext) {
	localctx = NewClassOrInterfaceTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, TypeScriptParserRULE_classOrInterfaceTypeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.TypeReference()
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(659)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(660)
			p.TypeReference()
		}

		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_enumDeclaration
	return p
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) Enum() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEnum, 0)
}

func (s *EnumDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *EnumDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *EnumDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *EnumDeclarationContext) Const() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserConst, 0)
}

func (s *EnumDeclarationContext) EnumBody() IEnumBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumBodyContext)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, TypeScriptParserRULE_enumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserConst {
		{
			p.SetState(666)
			p.Match(TypeScriptParserConst)
		}

	}
	{
		p.SetState(669)
		p.Match(TypeScriptParserEnum)
	}
	{
		p.SetState(670)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(671)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserIdentifier || _la == TypeScriptParserStringLiteral {
		{
			p.SetState(672)
			p.EnumBody()
		}

	}
	{
		p.SetState(675)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IEnumBodyContext is an interface to support dynamic dispatch.
type IEnumBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumBodyContext differentiates from other interfaces.
	IsEnumBodyContext()
}

type EnumBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyContext() *EnumBodyContext {
	var p = new(EnumBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_enumBody
	return p
}

func (*EnumBodyContext) IsEnumBodyContext() {}

func NewEnumBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyContext {
	var p = new(EnumBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_enumBody

	return p
}

func (s *EnumBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyContext) EnumMemberList() IEnumMemberListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMemberListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumMemberListContext)
}

func (s *EnumBodyContext) Comma() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, 0)
}

func (s *EnumBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEnumBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) EnumBody() (localctx IEnumBodyContext) {
	localctx = NewEnumBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, TypeScriptParserRULE_enumBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(677)
		p.EnumMemberList()
	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserComma {
		{
			p.SetState(678)
			p.Match(TypeScriptParserComma)
		}

	}

	return localctx
}

// IEnumMemberListContext is an interface to support dynamic dispatch.
type IEnumMemberListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMemberListContext differentiates from other interfaces.
	IsEnumMemberListContext()
}

type EnumMemberListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMemberListContext() *EnumMemberListContext {
	var p = new(EnumMemberListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_enumMemberList
	return p
}

func (*EnumMemberListContext) IsEnumMemberListContext() {}

func NewEnumMemberListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMemberListContext {
	var p = new(EnumMemberListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_enumMemberList

	return p
}

func (s *EnumMemberListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMemberListContext) AllEnumMember() []IEnumMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem())
	var tst = make([]IEnumMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumMemberContext)
		}
	}

	return tst
}

func (s *EnumMemberListContext) EnumMember(i int) IEnumMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumMemberContext)
}

func (s *EnumMemberListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *EnumMemberListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *EnumMemberListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMemberListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMemberListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEnumMemberList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) EnumMemberList() (localctx IEnumMemberListContext) {
	localctx = NewEnumMemberListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, TypeScriptParserRULE_enumMemberList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(681)
		p.EnumMember()
	}
	p.SetState(686)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(682)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(683)
				p.EnumMember()
			}

		}
		p.SetState(688)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
	}

	return localctx
}

// IEnumMemberContext is an interface to support dynamic dispatch.
type IEnumMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMemberContext differentiates from other interfaces.
	IsEnumMemberContext()
}

type EnumMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMemberContext() *EnumMemberContext {
	var p = new(EnumMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_enumMember
	return p
}

func (*EnumMemberContext) IsEnumMemberContext() {}

func NewEnumMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMemberContext {
	var p = new(EnumMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_enumMember

	return p
}

func (s *EnumMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMemberContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *EnumMemberContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *EnumMemberContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *EnumMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEnumMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) EnumMember() (localctx IEnumMemberContext) {
	localctx = NewEnumMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, TypeScriptParserRULE_enumMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(689)
		p.PropertyName()
	}
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAssign {
		{
			p.SetState(690)
			p.Match(TypeScriptParserAssign)
		}
		{
			p.SetState(691)
			p.singleExpression(0)
		}

	}

	return localctx
}

// INamespaceDeclarationContext is an interface to support dynamic dispatch.
type INamespaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceDeclarationContext differentiates from other interfaces.
	IsNamespaceDeclarationContext()
}

type NamespaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceDeclarationContext() *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_namespaceDeclaration
	return p
}

func (*NamespaceDeclarationContext) IsNamespaceDeclarationContext() {}

func NewNamespaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_namespaceDeclaration

	return p
}

func (s *NamespaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDeclarationContext) Namespace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNamespace, 0)
}

func (s *NamespaceDeclarationContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *NamespaceDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *NamespaceDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *NamespaceDeclarationContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *NamespaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNamespaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) NamespaceDeclaration() (localctx INamespaceDeclarationContext) {
	localctx = NewNamespaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, TypeScriptParserRULE_namespaceDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(694)
		p.Match(TypeScriptParserNamespace)
	}
	{
		p.SetState(695)
		p.NamespaceName()
	}
	{
		p.SetState(696)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(698)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(697)
			p.StatementList()
		}

	}
	{
		p.SetState(700)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// INamespaceNameContext is an interface to support dynamic dispatch.
type INamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceNameContext differentiates from other interfaces.
	IsNamespaceNameContext()
}

type NamespaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceNameContext() *NamespaceNameContext {
	var p = new(NamespaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_namespaceName
	return p
}

func (*NamespaceNameContext) IsNamespaceNameContext() {}

func NewNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceNameContext {
	var p = new(NamespaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_namespaceName

	return p
}

func (s *NamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceNameContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserIdentifier)
}

func (s *NamespaceNameContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, i)
}

func (s *NamespaceNameContext) AllDot() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserDot)
}

func (s *NamespaceNameContext) Dot(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDot, i)
}

func (s *NamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNamespaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) NamespaceName() (localctx INamespaceNameContext) {
	localctx = NewNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, TypeScriptParserRULE_namespaceName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(702)
		p.Match(TypeScriptParserIdentifier)
	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(704)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == TypeScriptParserDot {
				{
					p.SetState(703)
					p.Match(TypeScriptParserDot)
				}

				p.SetState(706)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(708)
				p.Match(TypeScriptParserIdentifier)
			}

		}
		p.SetState(713)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())
	}

	return localctx
}

// IImportAliasDeclarationContext is an interface to support dynamic dispatch.
type IImportAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportAliasDeclarationContext differentiates from other interfaces.
	IsImportAliasDeclarationContext()
}

type ImportAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportAliasDeclarationContext() *ImportAliasDeclarationContext {
	var p = new(ImportAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_importAliasDeclaration
	return p
}

func (*ImportAliasDeclarationContext) IsImportAliasDeclarationContext() {}

func NewImportAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAliasDeclarationContext {
	var p = new(ImportAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_importAliasDeclaration

	return p
}

func (s *ImportAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAliasDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ImportAliasDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *ImportAliasDeclarationContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *ImportAliasDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *ImportAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitImportAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ImportAliasDeclaration() (localctx IImportAliasDeclarationContext) {
	localctx = NewImportAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, TypeScriptParserRULE_importAliasDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(714)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(715)
		p.Match(TypeScriptParserAssign)
	}
	{
		p.SetState(716)
		p.NamespaceName()
	}
	{
		p.SetState(717)
		p.Match(TypeScriptParserSemiColon)
	}

	return localctx
}

// IDecoratorListContext is an interface to support dynamic dispatch.
type IDecoratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecoratorListContext differentiates from other interfaces.
	IsDecoratorListContext()
}

type DecoratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorListContext() *DecoratorListContext {
	var p = new(DecoratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_decoratorList
	return p
}

func (*DecoratorListContext) IsDecoratorListContext() {}

func NewDecoratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorListContext {
	var p = new(DecoratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_decoratorList

	return p
}

func (s *DecoratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorListContext) AllDecorator() []IDecoratorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecoratorContext)(nil)).Elem())
	var tst = make([]IDecoratorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecoratorContext)
		}
	}

	return tst
}

func (s *DecoratorListContext) Decorator(i int) IDecoratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecoratorContext)
}

func (s *DecoratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDecoratorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) DecoratorList() (localctx IDecoratorListContext) {
	localctx = NewDecoratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, TypeScriptParserRULE_decoratorList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(719)
				p.Decorator()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())
	}

	return localctx
}

// IDecoratorContext is an interface to support dynamic dispatch.
type IDecoratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecoratorContext differentiates from other interfaces.
	IsDecoratorContext()
}

type DecoratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorContext() *DecoratorContext {
	var p = new(DecoratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_decorator
	return p
}

func (*DecoratorContext) IsDecoratorContext() {}

func NewDecoratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorContext {
	var p = new(DecoratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_decorator

	return p
}

func (s *DecoratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorContext) At() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAt, 0)
}

func (s *DecoratorContext) DecoratorMemberExpression() IDecoratorMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorMemberExpressionContext)
}

func (s *DecoratorContext) DecoratorCallExpression() IDecoratorCallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorCallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorCallExpressionContext)
}

func (s *DecoratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDecorator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Decorator() (localctx IDecoratorContext) {
	localctx = NewDecoratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, TypeScriptParserRULE_decorator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(724)
		p.Match(TypeScriptParserAt)
	}
	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(725)
			p.decoratorMemberExpression(0)
		}

	case 2:
		{
			p.SetState(726)
			p.DecoratorCallExpression()
		}

	}

	return localctx
}

// IDecoratorMemberExpressionContext is an interface to support dynamic dispatch.
type IDecoratorMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecoratorMemberExpressionContext differentiates from other interfaces.
	IsDecoratorMemberExpressionContext()
}

type DecoratorMemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorMemberExpressionContext() *DecoratorMemberExpressionContext {
	var p = new(DecoratorMemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_decoratorMemberExpression
	return p
}

func (*DecoratorMemberExpressionContext) IsDecoratorMemberExpressionContext() {}

func NewDecoratorMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorMemberExpressionContext {
	var p = new(DecoratorMemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_decoratorMemberExpression

	return p
}

func (s *DecoratorMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorMemberExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *DecoratorMemberExpressionContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *DecoratorMemberExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *DecoratorMemberExpressionContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *DecoratorMemberExpressionContext) DecoratorMemberExpression() IDecoratorMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorMemberExpressionContext)
}

func (s *DecoratorMemberExpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDot, 0)
}

func (s *DecoratorMemberExpressionContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *DecoratorMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorMemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDecoratorMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) DecoratorMemberExpression() (localctx IDecoratorMemberExpressionContext) {
	return p.decoratorMemberExpression(0)
}

func (p *TypeScriptParser) decoratorMemberExpression(_p int) (localctx IDecoratorMemberExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDecoratorMemberExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDecoratorMemberExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 114
	p.EnterRecursionRule(localctx, 114, TypeScriptParserRULE_decoratorMemberExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(735)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserIdentifier:
		{
			p.SetState(730)
			p.Match(TypeScriptParserIdentifier)
		}

	case TypeScriptParserOpenParen:
		{
			p.SetState(731)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(732)
			p.singleExpression(0)
		}
		{
			p.SetState(733)
			p.Match(TypeScriptParserCloseParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDecoratorMemberExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_decoratorMemberExpression)
			p.SetState(737)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(738)
				p.Match(TypeScriptParserDot)
			}
			{
				p.SetState(739)
				p.IdentifierName()
			}

		}
		p.SetState(744)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())
	}

	return localctx
}

// IDecoratorCallExpressionContext is an interface to support dynamic dispatch.
type IDecoratorCallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecoratorCallExpressionContext differentiates from other interfaces.
	IsDecoratorCallExpressionContext()
}

type DecoratorCallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorCallExpressionContext() *DecoratorCallExpressionContext {
	var p = new(DecoratorCallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_decoratorCallExpression
	return p
}

func (*DecoratorCallExpressionContext) IsDecoratorCallExpressionContext() {}

func NewDecoratorCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorCallExpressionContext {
	var p = new(DecoratorCallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_decoratorCallExpression

	return p
}

func (s *DecoratorCallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorCallExpressionContext) DecoratorMemberExpression() IDecoratorMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorMemberExpressionContext)
}

func (s *DecoratorCallExpressionContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *DecoratorCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorCallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDecoratorCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) DecoratorCallExpression() (localctx IDecoratorCallExpressionContext) {
	localctx = NewDecoratorCallExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, TypeScriptParserRULE_decoratorCallExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)
		p.decoratorMemberExpression(0)
	}
	{
		p.SetState(746)
		p.Arguments()
	}

	return localctx
}

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) EOF() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEOF, 0)
}

func (s *ProgramContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, TypeScriptParserRULE_program)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(748)
			p.StatementList()
		}

	}
	{
		p.SetState(751)
		p.Match(TypeScriptParserEOF)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) ImportStatement() IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *StatementContext) EmptyStatement() IEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptyStatementContext)
}

func (s *StatementContext) AbstractDeclaration() IAbstractDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclarationContext)
}

func (s *StatementContext) DecoratorList() IDecoratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorListContext)
}

func (s *StatementContext) ClassDeclaration() IClassDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *StatementContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *StatementContext) NamespaceDeclaration() INamespaceDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceDeclarationContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) IterationStatement() IIterationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) YieldStatement() IYieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldStatementContext)
}

func (s *StatementContext) WithStatement() IWithStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatementContext)
}

func (s *StatementContext) LabelledStatement() ILabelledStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatementContext)
}

func (s *StatementContext) SwitchStatement() ISwitchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) TryStatement() ITryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *StatementContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *StatementContext) ArrowFunctionDeclaration() IArrowFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunctionDeclarationContext)
}

func (s *StatementContext) GeneratorFunctionDeclaration() IGeneratorFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorFunctionDeclarationContext)
}

func (s *StatementContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *StatementContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *StatementContext) EnumDeclaration() IEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, TypeScriptParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(781)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(753)
			p.Block()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(754)
			p.ImportStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(755)
			p.ExportStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(756)
			p.EmptyStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(757)
			p.AbstractDeclaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(758)
			p.DecoratorList()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(759)
			p.ClassDeclaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(760)
			p.InterfaceDeclaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(761)
			p.NamespaceDeclaration()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(762)
			p.IfStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(763)
			p.IterationStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(764)
			p.ContinueStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(765)
			p.BreakStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(766)
			p.ReturnStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(767)
			p.YieldStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(768)
			p.WithStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(769)
			p.LabelledStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(770)
			p.SwitchStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(771)
			p.ThrowStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(772)
			p.TryStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(773)
			p.DebuggerStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(774)
			p.FunctionDeclaration()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(775)
			p.ArrowFunctionDeclaration()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(776)
			p.GeneratorFunctionDeclaration()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(777)
			p.VariableStatement()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(778)
			p.TypeAliasDeclaration()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(779)
			p.EnumDeclaration()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(780)
			p.ExpressionStatement()
		}

	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *BlockContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *BlockContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, TypeScriptParserRULE_block)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(783)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(785)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(784)
			p.StatementList()
		}

	}
	{
		p.SetState(787)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_statementList
	return p
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementListContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) StatementList() (localctx IStatementListContext) {
	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, TypeScriptParserRULE_statementList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(790)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(789)
				p.Statement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(792)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}

	return localctx
}

// IAbstractDeclarationContext is an interface to support dynamic dispatch.
type IAbstractDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractDeclarationContext differentiates from other interfaces.
	IsAbstractDeclarationContext()
}

type AbstractDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractDeclarationContext() *AbstractDeclarationContext {
	var p = new(AbstractDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_abstractDeclaration
	return p
}

func (*AbstractDeclarationContext) IsAbstractDeclarationContext() {}

func NewAbstractDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractDeclarationContext {
	var p = new(AbstractDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_abstractDeclaration

	return p
}

func (s *AbstractDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractDeclarationContext) Abstract() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAbstract, 0)
}

func (s *AbstractDeclarationContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *AbstractDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *AbstractDeclarationContext) CallSignature() ICallSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSignatureContext)
}

func (s *AbstractDeclarationContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *AbstractDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAbstractDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) AbstractDeclaration() (localctx IAbstractDeclarationContext) {
	localctx = NewAbstractDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, TypeScriptParserRULE_abstractDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(794)
		p.Match(TypeScriptParserAbstract)
	}
	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(795)
			p.Match(TypeScriptParserIdentifier)
		}
		{
			p.SetState(796)
			p.CallSignature()
		}

	case 2:
		{
			p.SetState(797)
			p.VariableStatement()
		}

	}
	{
		p.SetState(800)
		p.Eos()
	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) Import() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserImport, 0)
}

func (s *ImportStatementContext) FromBlock() IFromBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromBlockContext)
}

func (s *ImportStatementContext) ImportAliasDeclaration() IImportAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportAliasDeclarationContext)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, TypeScriptParserRULE_importStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(802)
		p.Match(TypeScriptParserImport)
	}
	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(803)
			p.FromBlock()
		}

	case 2:
		{
			p.SetState(804)
			p.ImportAliasDeclaration()
		}

	}

	return localctx
}

// IFromBlockContext is an interface to support dynamic dispatch.
type IFromBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromBlockContext differentiates from other interfaces.
	IsFromBlockContext()
}

type FromBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromBlockContext() *FromBlockContext {
	var p = new(FromBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_fromBlock
	return p
}

func (*FromBlockContext) IsFromBlockContext() {}

func NewFromBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromBlockContext {
	var p = new(FromBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_fromBlock

	return p
}

func (s *FromBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *FromBlockContext) From() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFrom, 0)
}

func (s *FromBlockContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStringLiteral, 0)
}

func (s *FromBlockContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *FromBlockContext) Multiply() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiply, 0)
}

func (s *FromBlockContext) MultipleImportStatement() IMultipleImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleImportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleImportStatementContext)
}

func (s *FromBlockContext) As() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAs, 0)
}

func (s *FromBlockContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *FromBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFromBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FromBlock() (localctx IFromBlockContext) {
	localctx = NewFromBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, TypeScriptParserRULE_fromBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(809)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserMultiply:
		{
			p.SetState(807)
			p.Match(TypeScriptParserMultiply)
		}

	case TypeScriptParserOpenBrace, TypeScriptParserNullLiteral, TypeScriptParserBooleanLiteral, TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire, TypeScriptParserIdentifier:
		{
			p.SetState(808)
			p.MultipleImportStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAs {
		{
			p.SetState(811)
			p.Match(TypeScriptParserAs)
		}
		{
			p.SetState(812)
			p.IdentifierName()
		}

	}
	{
		p.SetState(815)
		p.Match(TypeScriptParserFrom)
	}
	{
		p.SetState(816)
		p.Match(TypeScriptParserStringLiteral)
	}
	{
		p.SetState(817)
		p.Eos()
	}

	return localctx
}

// IMultipleImportStatementContext is an interface to support dynamic dispatch.
type IMultipleImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultipleImportStatementContext differentiates from other interfaces.
	IsMultipleImportStatementContext()
}

type MultipleImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultipleImportStatementContext() *MultipleImportStatementContext {
	var p = new(MultipleImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_multipleImportStatement
	return p
}

func (*MultipleImportStatementContext) IsMultipleImportStatementContext() {}

func NewMultipleImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleImportStatementContext {
	var p = new(MultipleImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_multipleImportStatement

	return p
}

func (s *MultipleImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleImportStatementContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *MultipleImportStatementContext) AllIdentifierName() []IIdentifierNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem())
	var tst = make([]IIdentifierNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierNameContext)
		}
	}

	return tst
}

func (s *MultipleImportStatementContext) IdentifierName(i int) IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *MultipleImportStatementContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *MultipleImportStatementContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *MultipleImportStatementContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *MultipleImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMultipleImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) MultipleImportStatement() (localctx IMultipleImportStatementContext) {
	localctx = NewMultipleImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, TypeScriptParserRULE_multipleImportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserIdentifier {
		{
			p.SetState(819)
			p.IdentifierName()
		}
		{
			p.SetState(820)
			p.Match(TypeScriptParserComma)
		}

	}
	{
		p.SetState(824)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(825)
		p.IdentifierName()
	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		{
			p.SetState(826)
			p.Match(TypeScriptParserComma)
		}
		{
			p.SetState(827)
			p.IdentifierName()
		}

		p.SetState(832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(833)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) Export() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExport, 0)
}

func (s *ExportStatementContext) FromBlock() IFromBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromBlockContext)
}

func (s *ExportStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ExportStatementContext) Default() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDefault, 0)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, TypeScriptParserRULE_exportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(835)
		p.Match(TypeScriptParserExport)
	}
	p.SetState(837)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(836)
			p.Match(TypeScriptParserDefault)
		}

	}
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(839)
			p.FromBlock()
		}

	case 2:
		{
			p.SetState(840)
			p.Statement()
		}

	}

	return localctx
}

// IVariableStatementContext is an interface to support dynamic dispatch.
type IVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatementContext differentiates from other interfaces.
	IsVariableStatementContext()
}

type VariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatementContext() *VariableStatementContext {
	var p = new(VariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_variableStatement
	return p
}

func (*VariableStatementContext) IsVariableStatementContext() {}

func NewVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatementContext {
	var p = new(VariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_variableStatement

	return p
}

func (s *VariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatementContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *VariableStatementContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *VariableStatementContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *VariableStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *VariableStatementContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *VariableStatementContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *VariableStatementContext) VarModifier() IVarModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarModifierContext)
}

func (s *VariableStatementContext) ReadOnly() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReadOnly, 0)
}

func (s *VariableStatementContext) Declare() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDeclare, 0)
}

func (s *VariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) VariableStatement() (localctx IVariableStatementContext) {
	localctx = NewVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, TypeScriptParserRULE_variableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(843)
			p.BindingPattern()
		}
		p.SetState(845)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserColon {
			{
				p.SetState(844)
				p.TypeAnnotation()
			}

		}
		{
			p.SetState(847)
			p.Initializer()
		}
		p.SetState(849)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(848)
				p.Match(TypeScriptParserSemiColon)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101)))) != 0 {
			{
				p.SetState(851)
				p.AccessibilityModifier()
			}

		}
		p.SetState(855)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(TypeScriptParserVar-69))|(1<<(TypeScriptParserConst-69))|(1<<(TypeScriptParserLet-69)))) != 0 {
			{
				p.SetState(854)
				p.VarModifier()
			}

		}
		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserReadOnly {
			{
				p.SetState(857)
				p.Match(TypeScriptParserReadOnly)
			}

		}
		{
			p.SetState(860)
			p.VariableDeclarationList()
		}
		p.SetState(862)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(861)
				p.Match(TypeScriptParserSemiColon)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(864)
			p.Match(TypeScriptParserDeclare)
		}
		p.SetState(866)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(TypeScriptParserVar-69))|(1<<(TypeScriptParserConst-69))|(1<<(TypeScriptParserLet-69)))) != 0 {
			{
				p.SetState(865)
				p.VarModifier()
			}

		}
		{
			p.SetState(868)
			p.VariableDeclarationList()
		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(869)
				p.Match(TypeScriptParserSemiColon)
			}

		}

	}

	return localctx
}

// IVariableDeclarationListContext is an interface to support dynamic dispatch.
type IVariableDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationListContext differentiates from other interfaces.
	IsVariableDeclarationListContext()
}

type VariableDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationListContext() *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_variableDeclarationList
	return p
}

func (*VariableDeclarationListContext) IsVariableDeclarationListContext() {}

func NewVariableDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_variableDeclarationList

	return p
}

func (s *VariableDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationListContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationListContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *VariableDeclarationListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *VariableDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitVariableDeclarationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) VariableDeclarationList() (localctx IVariableDeclarationListContext) {
	localctx = NewVariableDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, TypeScriptParserRULE_variableDeclarationList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.VariableDeclaration()
	}
	p.SetState(879)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(875)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(876)
				p.VariableDeclaration()
			}

		}
		p.SetState(881)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) IdentifierOrKeyWord() IIdentifierOrKeyWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierOrKeyWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrKeyWordContext)
}

func (s *VariableDeclarationContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *VariableDeclarationContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *VariableDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *VariableDeclarationContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *VariableDeclarationContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *VariableDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *VariableDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, TypeScriptParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(885)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserTypeAlias, TypeScriptParserRequire, TypeScriptParserIdentifier:
		{
			p.SetState(882)
			p.IdentifierOrKeyWord()
		}

	case TypeScriptParserOpenBracket:
		{
			p.SetState(883)
			p.ArrayLiteral()
		}

	case TypeScriptParserOpenBrace:
		{
			p.SetState(884)
			p.ObjectLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(888)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(887)
			p.TypeAnnotation()
		}

	}
	p.SetState(891)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(890)
			p.singleExpression(0)
		}

	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(893)
			p.Match(TypeScriptParserAssign)
		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(894)
				p.TypeParameters()
			}

		}
		{
			p.SetState(897)
			p.singleExpression(0)
		}

	}

	return localctx
}

// IEmptyStatementContext is an interface to support dynamic dispatch.
type IEmptyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyStatementContext differentiates from other interfaces.
	IsEmptyStatementContext()
}

type EmptyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStatementContext() *EmptyStatementContext {
	var p = new(EmptyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_emptyStatement
	return p
}

func (*EmptyStatementContext) IsEmptyStatementContext() {}

func NewEmptyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStatementContext {
	var p = new(EmptyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_emptyStatement

	return p
}

func (s *EmptyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptyStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *EmptyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEmptyStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) EmptyStatement() (localctx IEmptyStatementContext) {
	localctx = NewEmptyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, TypeScriptParserRULE_emptyStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(900)
		p.Match(TypeScriptParserSemiColon)
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ExpressionStatementContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, TypeScriptParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(902)

	if !(p.notOpenBraceAndNotFunction()) {
		panic(antlr.NewFailedPredicateException(p, "p.notOpenBraceAndNotFunction()", ""))
	}
	{
		p.SetState(903)
		p.ExpressionSequence()
	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(904)
			p.Match(TypeScriptParserSemiColon)
		}

	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) If() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIf, 0)
}

func (s *IfStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *IfStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *IfStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserElse, 0)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, TypeScriptParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(907)
		p.Match(TypeScriptParserIf)
	}
	{
		p.SetState(908)
		p.Match(TypeScriptParserOpenParen)
	}
	{
		p.SetState(909)
		p.ExpressionSequence()
	}
	{
		p.SetState(910)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(911)
		p.Statement()
	}
	p.SetState(914)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(912)
			p.Match(TypeScriptParserElse)
		}
		{
			p.SetState(913)
			p.Statement()
		}

	}

	return localctx
}

// IIterationStatementContext is an interface to support dynamic dispatch.
type IIterationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatementContext differentiates from other interfaces.
	IsIterationStatementContext()
}

type IterationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatementContext() *IterationStatementContext {
	var p = new(IterationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_iterationStatement
	return p
}

func (*IterationStatementContext) IsIterationStatementContext() {}

func NewIterationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatementContext {
	var p = new(IterationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_iterationStatement

	return p
}

func (s *IterationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatementContext) CopyFrom(ctx *IterationStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IterationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DoStatementContext struct {
	*IterationStatementContext
}

func NewDoStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoStatementContext {
	var p = new(DoStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *DoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDo, 0)
}

func (s *DoStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoStatementContext) While() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserWhile, 0)
}

func (s *DoStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *DoStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *DoStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *DoStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *DoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type ForVarStatementContext struct {
	*IterationStatementContext
}

func NewForVarStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForVarStatementContext {
	var p = new(ForVarStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *ForVarStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForVarStatementContext) For() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFor, 0)
}

func (s *ForVarStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ForVarStatementContext) VarModifier() IVarModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarModifierContext)
}

func (s *ForVarStatementContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *ForVarStatementContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserSemiColon)
}

func (s *ForVarStatementContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, i)
}

func (s *ForVarStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ForVarStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForVarStatementContext) AllExpressionSequence() []IExpressionSequenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem())
	var tst = make([]IExpressionSequenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionSequenceContext)
		}
	}

	return tst
}

func (s *ForVarStatementContext) ExpressionSequence(i int) IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ForVarStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitForVarStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type ForVarInStatementContext struct {
	*IterationStatementContext
}

func NewForVarInStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForVarInStatementContext {
	var p = new(ForVarInStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *ForVarInStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForVarInStatementContext) For() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFor, 0)
}

func (s *ForVarInStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ForVarInStatementContext) VarModifier() IVarModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarModifierContext)
}

func (s *ForVarInStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *ForVarInStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ForVarInStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ForVarInStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForVarInStatementContext) In() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIn, 0)
}

func (s *ForVarInStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ForVarInStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitForVarInStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type WhileStatementContext struct {
	*IterationStatementContext
}

func NewWhileStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) While() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserWhile, 0)
}

func (s *WhileStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *WhileStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *WhileStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type ForStatementContext struct {
	*IterationStatementContext
}

func NewForStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForStatementContext {
	var p = new(ForStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) For() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFor, 0)
}

func (s *ForStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ForStatementContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserSemiColon)
}

func (s *ForStatementContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, i)
}

func (s *ForStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ForStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) AllExpressionSequence() []IExpressionSequenceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem())
	var tst = make([]IExpressionSequenceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionSequenceContext)
		}
	}

	return tst
}

func (s *ForStatementContext) ExpressionSequence(i int) IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type ForInStatementContext struct {
	*IterationStatementContext
}

func NewForInStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForInStatementContext {
	var p = new(ForInStatementContext)

	p.IterationStatementContext = NewEmptyIterationStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IterationStatementContext))

	return p
}

func (s *ForInStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInStatementContext) For() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFor, 0)
}

func (s *ForInStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ForInStatementContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ForInStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ForInStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ForInStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForInStatementContext) In() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIn, 0)
}

func (s *ForInStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ForInStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitForInStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IterationStatement() (localctx IIterationStatementContext) {
	localctx = NewIterationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, TypeScriptParserRULE_iterationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(985)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDoStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(916)
			p.Match(TypeScriptParserDo)
		}
		{
			p.SetState(917)
			p.Statement()
		}
		{
			p.SetState(918)
			p.Match(TypeScriptParserWhile)
		}
		{
			p.SetState(919)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(920)
			p.ExpressionSequence()
		}
		{
			p.SetState(921)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(922)
			p.Eos()
		}

	case 2:
		localctx = NewWhileStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(924)
			p.Match(TypeScriptParserWhile)
		}
		{
			p.SetState(925)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(926)
			p.ExpressionSequence()
		}
		{
			p.SetState(927)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(928)
			p.Statement()
		}

	case 3:
		localctx = NewForStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(930)
			p.Match(TypeScriptParserFor)
		}
		{
			p.SetState(931)
			p.Match(TypeScriptParserOpenParen)
		}
		p.SetState(933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
			{
				p.SetState(932)
				p.ExpressionSequence()
			}

		}
		{
			p.SetState(935)
			p.Match(TypeScriptParserSemiColon)
		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
			{
				p.SetState(936)
				p.ExpressionSequence()
			}

		}
		{
			p.SetState(939)
			p.Match(TypeScriptParserSemiColon)
		}
		p.SetState(941)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
			{
				p.SetState(940)
				p.ExpressionSequence()
			}

		}
		{
			p.SetState(943)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(944)
			p.Statement()
		}

	case 4:
		localctx = NewForVarStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(945)
			p.Match(TypeScriptParserFor)
		}
		{
			p.SetState(946)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(947)
			p.VarModifier()
		}
		{
			p.SetState(948)
			p.VariableDeclarationList()
		}
		{
			p.SetState(949)
			p.Match(TypeScriptParserSemiColon)
		}
		p.SetState(951)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
			{
				p.SetState(950)
				p.ExpressionSequence()
			}

		}
		{
			p.SetState(953)
			p.Match(TypeScriptParserSemiColon)
		}
		p.SetState(955)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
			{
				p.SetState(954)
				p.ExpressionSequence()
			}

		}
		{
			p.SetState(957)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(958)
			p.Statement()
		}

	case 5:
		localctx = NewForInStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(960)
			p.Match(TypeScriptParserFor)
		}
		{
			p.SetState(961)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(962)
			p.singleExpression(0)
		}
		p.SetState(966)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TypeScriptParserIn:
			{
				p.SetState(963)
				p.Match(TypeScriptParserIn)
			}

		case TypeScriptParserIdentifier:
			{
				p.SetState(964)
				p.Match(TypeScriptParserIdentifier)
			}
			p.SetState(965)

			if !(p.p("of")) {
				panic(antlr.NewFailedPredicateException(p, "p.p(\"of\")", ""))
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(968)
			p.ExpressionSequence()
		}
		{
			p.SetState(969)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(970)
			p.Statement()
		}

	case 6:
		localctx = NewForVarInStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(972)
			p.Match(TypeScriptParserFor)
		}
		{
			p.SetState(973)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(974)
			p.VarModifier()
		}
		{
			p.SetState(975)
			p.VariableDeclaration()
		}
		p.SetState(979)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TypeScriptParserIn:
			{
				p.SetState(976)
				p.Match(TypeScriptParserIn)
			}

		case TypeScriptParserIdentifier:
			{
				p.SetState(977)
				p.Match(TypeScriptParserIdentifier)
			}
			p.SetState(978)

			if !(p.p("of")) {
				panic(antlr.NewFailedPredicateException(p, "p.p(\"of\")", ""))
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(981)
			p.ExpressionSequence()
		}
		{
			p.SetState(982)
			p.Match(TypeScriptParserCloseParen)
		}
		{
			p.SetState(983)
			p.Statement()
		}

	}

	return localctx
}

// IVarModifierContext is an interface to support dynamic dispatch.
type IVarModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarModifierContext differentiates from other interfaces.
	IsVarModifierContext()
}

type VarModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarModifierContext() *VarModifierContext {
	var p = new(VarModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_varModifier
	return p
}

func (*VarModifierContext) IsVarModifierContext() {}

func NewVarModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarModifierContext {
	var p = new(VarModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_varModifier

	return p
}

func (s *VarModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *VarModifierContext) Var() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserVar, 0)
}

func (s *VarModifierContext) Let() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLet, 0)
}

func (s *VarModifierContext) Const() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserConst, 0)
}

func (s *VarModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitVarModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) VarModifier() (localctx IVarModifierContext) {
	localctx = NewVarModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, TypeScriptParserRULE_varModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(987)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(TypeScriptParserVar-69))|(1<<(TypeScriptParserConst-69))|(1<<(TypeScriptParserLet-69)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserContinue, 0)
}

func (s *ContinueStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ContinueStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, TypeScriptParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(989)
		p.Match(TypeScriptParserContinue)
	}
	p.SetState(992)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		p.SetState(990)

		if !(p.notLineTerminator()) {
			panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
		}
		{
			p.SetState(991)
			p.Match(TypeScriptParserIdentifier)
		}

	}
	{
		p.SetState(994)
		p.Eos()
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) Break() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBreak, 0)
}

func (s *BreakStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *BreakStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, TypeScriptParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(996)
		p.Match(TypeScriptParserBreak)
	}
	p.SetState(999)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		p.SetState(997)

		if !(p.notLineTerminator()) {
			panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
		}
		{
			p.SetState(998)
			p.Match(TypeScriptParserIdentifier)
		}

	}
	{
		p.SetState(1001)
		p.Eos()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Return() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReturn, 0)
}

func (s *ReturnStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ReturnStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, TypeScriptParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1003)
		p.Match(TypeScriptParserReturn)
	}
	p.SetState(1006)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
		p.SetState(1004)

		if !(p.notLineTerminator()) {
			panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
		}
		{
			p.SetState(1005)
			p.ExpressionSequence()
		}

	}
	{
		p.SetState(1008)
		p.Eos()
	}

	return localctx
}

// IYieldStatementContext is an interface to support dynamic dispatch.
type IYieldStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldStatementContext differentiates from other interfaces.
	IsYieldStatementContext()
}

type YieldStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldStatementContext() *YieldStatementContext {
	var p = new(YieldStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_yieldStatement
	return p
}

func (*YieldStatementContext) IsYieldStatementContext() {}

func NewYieldStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldStatementContext {
	var p = new(YieldStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_yieldStatement

	return p
}

func (s *YieldStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldStatementContext) Yield() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserYield, 0)
}

func (s *YieldStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *YieldStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *YieldStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitYieldStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) YieldStatement() (localctx IYieldStatementContext) {
	localctx = NewYieldStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, TypeScriptParserRULE_yieldStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1010)
		p.Match(TypeScriptParserYield)
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
		p.SetState(1011)

		if !(p.notLineTerminator()) {
			panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
		}
		{
			p.SetState(1012)
			p.ExpressionSequence()
		}

	}
	{
		p.SetState(1015)
		p.Eos()
	}

	return localctx
}

// IWithStatementContext is an interface to support dynamic dispatch.
type IWithStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatementContext differentiates from other interfaces.
	IsWithStatementContext()
}

type WithStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatementContext() *WithStatementContext {
	var p = new(WithStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_withStatement
	return p
}

func (*WithStatementContext) IsWithStatementContext() {}

func NewWithStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatementContext {
	var p = new(WithStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_withStatement

	return p
}

func (s *WithStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatementContext) With() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserWith, 0)
}

func (s *WithStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *WithStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *WithStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *WithStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WithStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitWithStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) WithStatement() (localctx IWithStatementContext) {
	localctx = NewWithStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, TypeScriptParserRULE_withStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1017)
		p.Match(TypeScriptParserWith)
	}
	{
		p.SetState(1018)
		p.Match(TypeScriptParserOpenParen)
	}
	{
		p.SetState(1019)
		p.ExpressionSequence()
	}
	{
		p.SetState(1020)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1021)
		p.Statement()
	}

	return localctx
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_switchStatement
	return p
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) Switch() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSwitch, 0)
}

func (s *SwitchStatementContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *SwitchStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *SwitchStatementContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *SwitchStatementContext) CaseBlock() ICaseBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlockContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) SwitchStatement() (localctx ISwitchStatementContext) {
	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, TypeScriptParserRULE_switchStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1023)
		p.Match(TypeScriptParserSwitch)
	}
	{
		p.SetState(1024)
		p.Match(TypeScriptParserOpenParen)
	}
	{
		p.SetState(1025)
		p.ExpressionSequence()
	}
	{
		p.SetState(1026)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1027)
		p.CaseBlock()
	}

	return localctx
}

// ICaseBlockContext is an interface to support dynamic dispatch.
type ICaseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlockContext differentiates from other interfaces.
	IsCaseBlockContext()
}

type CaseBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlockContext() *CaseBlockContext {
	var p = new(CaseBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_caseBlock
	return p
}

func (*CaseBlockContext) IsCaseBlockContext() {}

func NewCaseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlockContext {
	var p = new(CaseBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_caseBlock

	return p
}

func (s *CaseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlockContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *CaseBlockContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *CaseBlockContext) AllCaseClauses() []ICaseClausesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClausesContext)(nil)).Elem())
	var tst = make([]ICaseClausesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClausesContext)
		}
	}

	return tst
}

func (s *CaseBlockContext) CaseClauses(i int) ICaseClausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClausesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClausesContext)
}

func (s *CaseBlockContext) DefaultClause() IDefaultClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClauseContext)
}

func (s *CaseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCaseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) CaseBlock() (localctx ICaseBlockContext) {
	localctx = NewCaseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, TypeScriptParserRULE_caseBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserCase {
		{
			p.SetState(1030)
			p.CaseClauses()
		}

	}
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserDefault {
		{
			p.SetState(1033)
			p.DefaultClause()
		}
		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserCase {
			{
				p.SetState(1034)
				p.CaseClauses()
			}

		}

	}
	{
		p.SetState(1039)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// ICaseClausesContext is an interface to support dynamic dispatch.
type ICaseClausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClausesContext differentiates from other interfaces.
	IsCaseClausesContext()
}

type CaseClausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClausesContext() *CaseClausesContext {
	var p = new(CaseClausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_caseClauses
	return p
}

func (*CaseClausesContext) IsCaseClausesContext() {}

func NewCaseClausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClausesContext {
	var p = new(CaseClausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_caseClauses

	return p
}

func (s *CaseClausesContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClausesContext) AllCaseClause() []ICaseClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClauseContext)(nil)).Elem())
	var tst = make([]ICaseClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClauseContext)
		}
	}

	return tst
}

func (s *CaseClausesContext) CaseClause(i int) ICaseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClauseContext)
}

func (s *CaseClausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCaseClauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) CaseClauses() (localctx ICaseClausesContext) {
	localctx = NewCaseClausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, TypeScriptParserRULE_caseClauses)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1042)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TypeScriptParserCase {
		{
			p.SetState(1041)
			p.CaseClause()
		}

		p.SetState(1044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICaseClauseContext is an interface to support dynamic dispatch.
type ICaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClauseContext differentiates from other interfaces.
	IsCaseClauseContext()
}

type CaseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClauseContext() *CaseClauseContext {
	var p = new(CaseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_caseClause
	return p
}

func (*CaseClauseContext) IsCaseClauseContext() {}

func NewCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClauseContext {
	var p = new(CaseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_caseClause

	return p
}

func (s *CaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClauseContext) Case() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCase, 0)
}

func (s *CaseClauseContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *CaseClauseContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *CaseClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *CaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCaseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) CaseClause() (localctx ICaseClauseContext) {
	localctx = NewCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, TypeScriptParserRULE_caseClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1046)
		p.Match(TypeScriptParserCase)
	}
	{
		p.SetState(1047)
		p.ExpressionSequence()
	}
	{
		p.SetState(1048)
		p.Match(TypeScriptParserColon)
	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1049)
			p.StatementList()
		}

	}

	return localctx
}

// IDefaultClauseContext is an interface to support dynamic dispatch.
type IDefaultClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClauseContext differentiates from other interfaces.
	IsDefaultClauseContext()
}

type DefaultClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClauseContext() *DefaultClauseContext {
	var p = new(DefaultClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_defaultClause
	return p
}

func (*DefaultClauseContext) IsDefaultClauseContext() {}

func NewDefaultClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClauseContext {
	var p = new(DefaultClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_defaultClause

	return p
}

func (s *DefaultClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClauseContext) Default() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDefault, 0)
}

func (s *DefaultClauseContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *DefaultClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *DefaultClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDefaultClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) DefaultClause() (localctx IDefaultClauseContext) {
	localctx = NewDefaultClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, TypeScriptParserRULE_defaultClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1052)
		p.Match(TypeScriptParserDefault)
	}
	{
		p.SetState(1053)
		p.Match(TypeScriptParserColon)
	}
	p.SetState(1055)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1054)
			p.StatementList()
		}

	}

	return localctx
}

// ILabelledStatementContext is an interface to support dynamic dispatch.
type ILabelledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatementContext differentiates from other interfaces.
	IsLabelledStatementContext()
}

type LabelledStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatementContext() *LabelledStatementContext {
	var p = new(LabelledStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_labelledStatement
	return p
}

func (*LabelledStatementContext) IsLabelledStatementContext() {}

func NewLabelledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatementContext {
	var p = new(LabelledStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_labelledStatement

	return p
}

func (s *LabelledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *LabelledStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *LabelledStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabelledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLabelledStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) LabelledStatement() (localctx ILabelledStatementContext) {
	localctx = NewLabelledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, TypeScriptParserRULE_labelledStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1057)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(1058)
		p.Match(TypeScriptParserColon)
	}
	{
		p.SetState(1059)
		p.Statement()
	}

	return localctx
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatementContext) Throw() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserThrow, 0)
}

func (s *ThrowStatementContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ThrowStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitThrowStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ThrowStatement() (localctx IThrowStatementContext) {
	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, TypeScriptParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1061)
		p.Match(TypeScriptParserThrow)
	}
	p.SetState(1062)

	if !(p.notLineTerminator()) {
		panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
	}
	{
		p.SetState(1063)
		p.ExpressionSequence()
	}
	{
		p.SetState(1064)
		p.Eos()
	}

	return localctx
}

// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_tryStatement
	return p
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) Try() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTry, 0)
}

func (s *TryStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) CatchProduction() ICatchProductionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchProductionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchProductionContext)
}

func (s *TryStatementContext) FinallyProduction() IFinallyProductionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinallyProductionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinallyProductionContext)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTryStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TryStatement() (localctx ITryStatementContext) {
	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, TypeScriptParserRULE_tryStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1066)
		p.Match(TypeScriptParserTry)
	}
	{
		p.SetState(1067)
		p.Block()
	}
	p.SetState(1073)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserCatch:
		{
			p.SetState(1068)
			p.CatchProduction()
		}
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1069)
				p.FinallyProduction()
			}

		}

	case TypeScriptParserFinally:
		{
			p.SetState(1072)
			p.FinallyProduction()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICatchProductionContext is an interface to support dynamic dispatch.
type ICatchProductionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchProductionContext differentiates from other interfaces.
	IsCatchProductionContext()
}

type CatchProductionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchProductionContext() *CatchProductionContext {
	var p = new(CatchProductionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_catchProduction
	return p
}

func (*CatchProductionContext) IsCatchProductionContext() {}

func NewCatchProductionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchProductionContext {
	var p = new(CatchProductionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_catchProduction

	return p
}

func (s *CatchProductionContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchProductionContext) Catch() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCatch, 0)
}

func (s *CatchProductionContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *CatchProductionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *CatchProductionContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *CatchProductionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CatchProductionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchProductionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchProductionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCatchProduction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) CatchProduction() (localctx ICatchProductionContext) {
	localctx = NewCatchProductionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, TypeScriptParserRULE_catchProduction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1075)
		p.Match(TypeScriptParserCatch)
	}
	{
		p.SetState(1076)
		p.Match(TypeScriptParserOpenParen)
	}
	{
		p.SetState(1077)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(1078)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1079)
		p.Block()
	}

	return localctx
}

// IFinallyProductionContext is an interface to support dynamic dispatch.
type IFinallyProductionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinallyProductionContext differentiates from other interfaces.
	IsFinallyProductionContext()
}

type FinallyProductionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinallyProductionContext() *FinallyProductionContext {
	var p = new(FinallyProductionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_finallyProduction
	return p
}

func (*FinallyProductionContext) IsFinallyProductionContext() {}

func NewFinallyProductionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FinallyProductionContext {
	var p = new(FinallyProductionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_finallyProduction

	return p
}

func (s *FinallyProductionContext) GetParser() antlr.Parser { return s.parser }

func (s *FinallyProductionContext) Finally() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFinally, 0)
}

func (s *FinallyProductionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FinallyProductionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FinallyProductionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FinallyProductionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFinallyProduction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FinallyProduction() (localctx IFinallyProductionContext) {
	localctx = NewFinallyProductionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, TypeScriptParserRULE_finallyProduction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1081)
		p.Match(TypeScriptParserFinally)
	}
	{
		p.SetState(1082)
		p.Block()
	}

	return localctx
}

// IDebuggerStatementContext is an interface to support dynamic dispatch.
type IDebuggerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDebuggerStatementContext differentiates from other interfaces.
	IsDebuggerStatementContext()
}

type DebuggerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDebuggerStatementContext() *DebuggerStatementContext {
	var p = new(DebuggerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_debuggerStatement
	return p
}

func (*DebuggerStatementContext) IsDebuggerStatementContext() {}

func NewDebuggerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DebuggerStatementContext {
	var p = new(DebuggerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_debuggerStatement

	return p
}

func (s *DebuggerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DebuggerStatementContext) Debugger() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDebugger, 0)
}

func (s *DebuggerStatementContext) Eos() IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *DebuggerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DebuggerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DebuggerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDebuggerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) DebuggerStatement() (localctx IDebuggerStatementContext) {
	localctx = NewDebuggerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, TypeScriptParserRULE_debuggerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1084)
		p.Match(TypeScriptParserDebugger)
	}
	{
		p.SetState(1085)
		p.Eos()
	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) Function_() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFunction_, 0)
}

func (s *FunctionDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *FunctionDeclarationContext) CallSignature() ICallSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSignatureContext)
}

func (s *FunctionDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *FunctionDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, TypeScriptParserRULE_functionDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1087)
		p.Match(TypeScriptParserFunction_)
	}
	{
		p.SetState(1088)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(1089)
		p.CallSignature()
	}
	p.SetState(1095)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserOpenBrace:
		{
			p.SetState(1090)
			p.Match(TypeScriptParserOpenBrace)
		}
		{
			p.SetState(1091)
			p.FunctionBody()
		}
		{
			p.SetState(1092)
			p.Match(TypeScriptParserCloseBrace)
		}

	case TypeScriptParserSemiColon:
		{
			p.SetState(1094)
			p.Match(TypeScriptParserSemiColon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassDeclarationContext is an interface to support dynamic dispatch.
type IClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclarationContext differentiates from other interfaces.
	IsClassDeclarationContext()
}

type ClassDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclarationContext() *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classDeclaration
	return p
}

func (*ClassDeclarationContext) IsClassDeclarationContext() {}

func NewClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classDeclaration

	return p
}

func (s *ClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclarationContext) Class() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserClass, 0)
}

func (s *ClassDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ClassDeclarationContext) ClassHeritage() IClassHeritageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeritageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeritageContext)
}

func (s *ClassDeclarationContext) ClassTail() IClassTailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTailContext)
}

func (s *ClassDeclarationContext) Abstract() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAbstract, 0)
}

func (s *ClassDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassDeclaration() (localctx IClassDeclarationContext) {
	localctx = NewClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, TypeScriptParserRULE_classDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1098)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAbstract {
		{
			p.SetState(1097)
			p.Match(TypeScriptParserAbstract)
		}

	}
	{
		p.SetState(1100)
		p.Match(TypeScriptParserClass)
	}
	{
		p.SetState(1101)
		p.Match(TypeScriptParserIdentifier)
	}
	p.SetState(1103)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserLessThan {
		{
			p.SetState(1102)
			p.TypeParameters()
		}

	}
	{
		p.SetState(1105)
		p.ClassHeritage()
	}
	{
		p.SetState(1106)
		p.ClassTail()
	}

	return localctx
}

// IClassHeritageContext is an interface to support dynamic dispatch.
type IClassHeritageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeritageContext differentiates from other interfaces.
	IsClassHeritageContext()
}

type ClassHeritageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeritageContext() *ClassHeritageContext {
	var p = new(ClassHeritageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classHeritage
	return p
}

func (*ClassHeritageContext) IsClassHeritageContext() {}

func NewClassHeritageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeritageContext {
	var p = new(ClassHeritageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classHeritage

	return p
}

func (s *ClassHeritageContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeritageContext) ClassExtendsClause() IClassExtendsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassExtendsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassExtendsClauseContext)
}

func (s *ClassHeritageContext) ImplementsClause() IImplementsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementsClauseContext)
}

func (s *ClassHeritageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeritageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeritageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassHeritage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassHeritage() (localctx IClassHeritageContext) {
	localctx = NewClassHeritageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, TypeScriptParserRULE_classHeritage)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1109)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserExtends {
		{
			p.SetState(1108)
			p.ClassExtendsClause()
		}

	}
	p.SetState(1112)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserImplements {
		{
			p.SetState(1111)
			p.ImplementsClause()
		}

	}

	return localctx
}

// IClassTailContext is an interface to support dynamic dispatch.
type IClassTailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassTailContext differentiates from other interfaces.
	IsClassTailContext()
}

type ClassTailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTailContext() *ClassTailContext {
	var p = new(ClassTailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classTail
	return p
}

func (*ClassTailContext) IsClassTailContext() {}

func NewClassTailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTailContext {
	var p = new(ClassTailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classTail

	return p
}

func (s *ClassTailContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTailContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *ClassTailContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *ClassTailContext) AllClassElement() []IClassElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassElementContext)(nil)).Elem())
	var tst = make([]IClassElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassElementContext)
		}
	}

	return tst
}

func (s *ClassTailContext) ClassElement(i int) IClassElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassElementContext)
}

func (s *ClassTailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTailContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassTail(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassTail() (localctx IClassTailContext) {
	localctx = NewClassTailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, TypeScriptParserRULE_classTail)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1114)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(1118)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1115)
				p.ClassElement()
			}

		}
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())
	}
	{
		p.SetState(1121)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IClassExtendsClauseContext is an interface to support dynamic dispatch.
type IClassExtendsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassExtendsClauseContext differentiates from other interfaces.
	IsClassExtendsClauseContext()
}

type ClassExtendsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassExtendsClauseContext() *ClassExtendsClauseContext {
	var p = new(ClassExtendsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classExtendsClause
	return p
}

func (*ClassExtendsClauseContext) IsClassExtendsClauseContext() {}

func NewClassExtendsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassExtendsClauseContext {
	var p = new(ClassExtendsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classExtendsClause

	return p
}

func (s *ClassExtendsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassExtendsClauseContext) Extends() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExtends, 0)
}

func (s *ClassExtendsClauseContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ClassExtendsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExtendsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassExtendsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassExtendsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassExtendsClause() (localctx IClassExtendsClauseContext) {
	localctx = NewClassExtendsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, TypeScriptParserRULE_classExtendsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1123)
		p.Match(TypeScriptParserExtends)
	}
	{
		p.SetState(1124)
		p.TypeReference()
	}

	return localctx
}

// IImplementsClauseContext is an interface to support dynamic dispatch.
type IImplementsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementsClauseContext differentiates from other interfaces.
	IsImplementsClauseContext()
}

type ImplementsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementsClauseContext() *ImplementsClauseContext {
	var p = new(ImplementsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_implementsClause
	return p
}

func (*ImplementsClauseContext) IsImplementsClauseContext() {}

func NewImplementsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementsClauseContext {
	var p = new(ImplementsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_implementsClause

	return p
}

func (s *ImplementsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementsClauseContext) Implements() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserImplements, 0)
}

func (s *ImplementsClauseContext) ClassOrInterfaceTypeList() IClassOrInterfaceTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassOrInterfaceTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassOrInterfaceTypeListContext)
}

func (s *ImplementsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitImplementsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ImplementsClause() (localctx IImplementsClauseContext) {
	localctx = NewImplementsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, TypeScriptParserRULE_implementsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1126)
		p.Match(TypeScriptParserImplements)
	}
	{
		p.SetState(1127)
		p.ClassOrInterfaceTypeList()
	}

	return localctx
}

// IClassElementContext is an interface to support dynamic dispatch.
type IClassElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassElementContext differentiates from other interfaces.
	IsClassElementContext()
}

type ClassElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassElementContext() *ClassElementContext {
	var p = new(ClassElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_classElement
	return p
}

func (*ClassElementContext) IsClassElementContext() {}

func NewClassElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassElementContext {
	var p = new(ClassElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_classElement

	return p
}

func (s *ClassElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassElementContext) ConstructorDeclaration() IConstructorDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorDeclarationContext)
}

func (s *ClassElementContext) PropertyMemberDeclaration() IPropertyMemberDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyMemberDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyMemberDeclarationContext)
}

func (s *ClassElementContext) DecoratorList() IDecoratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorListContext)
}

func (s *ClassElementContext) IndexMemberDeclaration() IIndexMemberDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexMemberDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexMemberDeclarationContext)
}

func (s *ClassElementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ClassElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ClassElement() (localctx IClassElementContext) {
	localctx = NewClassElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, TypeScriptParserRULE_classElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1129)
			p.ConstructorDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserAt {
			{
				p.SetState(1130)
				p.DecoratorList()
			}

		}
		{
			p.SetState(1133)
			p.PropertyMemberDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1134)
			p.IndexMemberDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1135)
			p.Statement()
		}

	}

	return localctx
}

// IPropertyMemberDeclarationContext is an interface to support dynamic dispatch.
type IPropertyMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyMemberDeclarationContext differentiates from other interfaces.
	IsPropertyMemberDeclarationContext()
}

type PropertyMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyMemberDeclarationContext() *PropertyMemberDeclarationContext {
	var p = new(PropertyMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_propertyMemberDeclaration
	return p
}

func (*PropertyMemberDeclarationContext) IsPropertyMemberDeclarationContext() {}

func NewPropertyMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyMemberDeclarationContext {
	var p = new(PropertyMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_propertyMemberDeclaration

	return p
}

func (s *PropertyMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyMemberDeclarationContext) CopyFrom(ctx *PropertyMemberDeclarationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PropertyMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PropertyDeclarationExpressionContext struct {
	*PropertyMemberDeclarationContext
}

func NewPropertyDeclarationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyDeclarationExpressionContext {
	var p = new(PropertyDeclarationExpressionContext)

	p.PropertyMemberDeclarationContext = NewEmptyPropertyMemberDeclarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyMemberDeclarationContext))

	return p
}

func (s *PropertyDeclarationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDeclarationExpressionContext) PropertyMemberBase() IPropertyMemberBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyMemberBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyMemberBaseContext)
}

func (s *PropertyDeclarationExpressionContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *PropertyDeclarationExpressionContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *PropertyDeclarationExpressionContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *PropertyDeclarationExpressionContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *PropertyDeclarationExpressionContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *PropertyDeclarationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyDeclarationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MethodDeclarationExpressionContext struct {
	*PropertyMemberDeclarationContext
}

func NewMethodDeclarationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MethodDeclarationExpressionContext {
	var p = new(MethodDeclarationExpressionContext)

	p.PropertyMemberDeclarationContext = NewEmptyPropertyMemberDeclarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyMemberDeclarationContext))

	return p
}

func (s *MethodDeclarationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDeclarationExpressionContext) PropertyMemberBase() IPropertyMemberBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyMemberBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyMemberBaseContext)
}

func (s *MethodDeclarationExpressionContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *MethodDeclarationExpressionContext) CallSignature() ICallSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSignatureContext)
}

func (s *MethodDeclarationExpressionContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *MethodDeclarationExpressionContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *MethodDeclarationExpressionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *MethodDeclarationExpressionContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *MethodDeclarationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMethodDeclarationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type GetterSetterDeclarationExpressionContext struct {
	*PropertyMemberDeclarationContext
}

func NewGetterSetterDeclarationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GetterSetterDeclarationExpressionContext {
	var p = new(GetterSetterDeclarationExpressionContext)

	p.PropertyMemberDeclarationContext = NewEmptyPropertyMemberDeclarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyMemberDeclarationContext))

	return p
}

func (s *GetterSetterDeclarationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetterSetterDeclarationExpressionContext) PropertyMemberBase() IPropertyMemberBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyMemberBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyMemberBaseContext)
}

func (s *GetterSetterDeclarationExpressionContext) GetAccessor() IGetAccessorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetAccessorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetAccessorContext)
}

func (s *GetterSetterDeclarationExpressionContext) SetAccessor() ISetAccessorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAccessorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAccessorContext)
}

func (s *GetterSetterDeclarationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGetterSetterDeclarationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AbstractMemberDeclarationContext struct {
	*PropertyMemberDeclarationContext
}

func NewAbstractMemberDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AbstractMemberDeclarationContext {
	var p = new(AbstractMemberDeclarationContext)

	p.PropertyMemberDeclarationContext = NewEmptyPropertyMemberDeclarationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyMemberDeclarationContext))

	return p
}

func (s *AbstractMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractMemberDeclarationContext) AbstractDeclaration() IAbstractDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclarationContext)
}

func (s *AbstractMemberDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAbstractMemberDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PropertyMemberDeclaration() (localctx IPropertyMemberDeclarationContext) {
	localctx = NewPropertyMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, TypeScriptParserRULE_propertyMemberDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1167)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPropertyDeclarationExpressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1138)
			p.PropertyMemberBase()
		}
		{
			p.SetState(1139)
			p.PropertyName()
		}
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserQuestionMark {
			{
				p.SetState(1140)
				p.Match(TypeScriptParserQuestionMark)
			}

		}
		p.SetState(1144)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserColon {
			{
				p.SetState(1143)
				p.TypeAnnotation()
			}

		}
		p.SetState(1147)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserAssign {
			{
				p.SetState(1146)
				p.Initializer()
			}

		}
		{
			p.SetState(1149)
			p.Match(TypeScriptParserSemiColon)
		}

	case 2:
		localctx = NewMethodDeclarationExpressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1151)
			p.PropertyMemberBase()
		}
		{
			p.SetState(1152)
			p.PropertyName()
		}
		{
			p.SetState(1153)
			p.CallSignature()
		}
		p.SetState(1159)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TypeScriptParserOpenBrace:
			{
				p.SetState(1154)
				p.Match(TypeScriptParserOpenBrace)
			}
			{
				p.SetState(1155)
				p.FunctionBody()
			}
			{
				p.SetState(1156)
				p.Match(TypeScriptParserCloseBrace)
			}

		case TypeScriptParserSemiColon:
			{
				p.SetState(1158)
				p.Match(TypeScriptParserSemiColon)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		localctx = NewGetterSetterDeclarationExpressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1161)
			p.PropertyMemberBase()
		}
		p.SetState(1164)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TypeScriptParserGet:
			{
				p.SetState(1162)
				p.GetAccessor()
			}

		case TypeScriptParserSet:
			{
				p.SetState(1163)
				p.SetAccessor()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewAbstractMemberDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1166)
			p.AbstractDeclaration()
		}

	}

	return localctx
}

// IPropertyMemberBaseContext is an interface to support dynamic dispatch.
type IPropertyMemberBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyMemberBaseContext differentiates from other interfaces.
	IsPropertyMemberBaseContext()
}

type PropertyMemberBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyMemberBaseContext() *PropertyMemberBaseContext {
	var p = new(PropertyMemberBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_propertyMemberBase
	return p
}

func (*PropertyMemberBaseContext) IsPropertyMemberBaseContext() {}

func NewPropertyMemberBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyMemberBaseContext {
	var p = new(PropertyMemberBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_propertyMemberBase

	return p
}

func (s *PropertyMemberBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyMemberBaseContext) Async() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAsync, 0)
}

func (s *PropertyMemberBaseContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *PropertyMemberBaseContext) Static() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStatic, 0)
}

func (s *PropertyMemberBaseContext) ReadOnly() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReadOnly, 0)
}

func (s *PropertyMemberBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyMemberBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyMemberBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyMemberBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PropertyMemberBase() (localctx IPropertyMemberBaseContext) {
	localctx = NewPropertyMemberBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, TypeScriptParserRULE_propertyMemberBase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1170)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1169)
			p.Match(TypeScriptParserAsync)
		}

	}
	p.SetState(1173)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1172)
			p.AccessibilityModifier()
		}

	}
	p.SetState(1176)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1175)
			p.Match(TypeScriptParserStatic)
		}

	}
	p.SetState(1179)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1178)
			p.Match(TypeScriptParserReadOnly)
		}

	}

	return localctx
}

// IIndexMemberDeclarationContext is an interface to support dynamic dispatch.
type IIndexMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexMemberDeclarationContext differentiates from other interfaces.
	IsIndexMemberDeclarationContext()
}

type IndexMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexMemberDeclarationContext() *IndexMemberDeclarationContext {
	var p = new(IndexMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_indexMemberDeclaration
	return p
}

func (*IndexMemberDeclarationContext) IsIndexMemberDeclarationContext() {}

func NewIndexMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexMemberDeclarationContext {
	var p = new(IndexMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_indexMemberDeclaration

	return p
}

func (s *IndexMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexMemberDeclarationContext) IndexSignature() IIndexSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexSignatureContext)
}

func (s *IndexMemberDeclarationContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *IndexMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexMemberDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIndexMemberDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IndexMemberDeclaration() (localctx IIndexMemberDeclarationContext) {
	localctx = NewIndexMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, TypeScriptParserRULE_indexMemberDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1181)
		p.IndexSignature()
	}
	{
		p.SetState(1182)
		p.Match(TypeScriptParserSemiColon)
	}

	return localctx
}

// IGeneratorMethodContext is an interface to support dynamic dispatch.
type IGeneratorMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorMethodContext differentiates from other interfaces.
	IsGeneratorMethodContext()
}

type GeneratorMethodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorMethodContext() *GeneratorMethodContext {
	var p = new(GeneratorMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_generatorMethod
	return p
}

func (*GeneratorMethodContext) IsGeneratorMethodContext() {}

func NewGeneratorMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorMethodContext {
	var p = new(GeneratorMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_generatorMethod

	return p
}

func (s *GeneratorMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorMethodContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *GeneratorMethodContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *GeneratorMethodContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *GeneratorMethodContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *GeneratorMethodContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *GeneratorMethodContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *GeneratorMethodContext) Multiply() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiply, 0)
}

func (s *GeneratorMethodContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *GeneratorMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) GeneratorMethod() (localctx IGeneratorMethodContext) {
	localctx = NewGeneratorMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, TypeScriptParserRULE_generatorMethod)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserMultiply {
		{
			p.SetState(1184)
			p.Match(TypeScriptParserMultiply)
		}

	}
	{
		p.SetState(1187)
		p.Match(TypeScriptParserIdentifier)
	}
	{
		p.SetState(1188)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1190)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
		{
			p.SetState(1189)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1192)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1193)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1194)
		p.FunctionBody()
	}
	{
		p.SetState(1195)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IGeneratorFunctionDeclarationContext is an interface to support dynamic dispatch.
type IGeneratorFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorFunctionDeclarationContext differentiates from other interfaces.
	IsGeneratorFunctionDeclarationContext()
}

type GeneratorFunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorFunctionDeclarationContext() *GeneratorFunctionDeclarationContext {
	var p = new(GeneratorFunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_generatorFunctionDeclaration
	return p
}

func (*GeneratorFunctionDeclarationContext) IsGeneratorFunctionDeclarationContext() {}

func NewGeneratorFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorFunctionDeclarationContext {
	var p = new(GeneratorFunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_generatorFunctionDeclaration

	return p
}

func (s *GeneratorFunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorFunctionDeclarationContext) Function_() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFunction_, 0)
}

func (s *GeneratorFunctionDeclarationContext) Multiply() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiply, 0)
}

func (s *GeneratorFunctionDeclarationContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *GeneratorFunctionDeclarationContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *GeneratorFunctionDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *GeneratorFunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *GeneratorFunctionDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *GeneratorFunctionDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *GeneratorFunctionDeclarationContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *GeneratorFunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorFunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorFunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) GeneratorFunctionDeclaration() (localctx IGeneratorFunctionDeclarationContext) {
	localctx = NewGeneratorFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, TypeScriptParserRULE_generatorFunctionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1197)
		p.Match(TypeScriptParserFunction_)
	}
	{
		p.SetState(1198)
		p.Match(TypeScriptParserMultiply)
	}
	p.SetState(1200)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserIdentifier {
		{
			p.SetState(1199)
			p.Match(TypeScriptParserIdentifier)
		}

	}
	{
		p.SetState(1202)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
		{
			p.SetState(1203)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1206)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1207)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1208)
		p.FunctionBody()
	}
	{
		p.SetState(1209)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IGeneratorBlockContext is an interface to support dynamic dispatch.
type IGeneratorBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorBlockContext differentiates from other interfaces.
	IsGeneratorBlockContext()
}

type GeneratorBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorBlockContext() *GeneratorBlockContext {
	var p = new(GeneratorBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_generatorBlock
	return p
}

func (*GeneratorBlockContext) IsGeneratorBlockContext() {}

func NewGeneratorBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorBlockContext {
	var p = new(GeneratorBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_generatorBlock

	return p
}

func (s *GeneratorBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorBlockContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *GeneratorBlockContext) AllGeneratorDefinition() []IGeneratorDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGeneratorDefinitionContext)(nil)).Elem())
	var tst = make([]IGeneratorDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGeneratorDefinitionContext)
		}
	}

	return tst
}

func (s *GeneratorBlockContext) GeneratorDefinition(i int) IGeneratorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDefinitionContext)
}

func (s *GeneratorBlockContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *GeneratorBlockContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *GeneratorBlockContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *GeneratorBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) GeneratorBlock() (localctx IGeneratorBlockContext) {
	localctx = NewGeneratorBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, TypeScriptParserRULE_generatorBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1211)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1212)
		p.GeneratorDefinition()
	}
	p.SetState(1217)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1213)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(1214)
				p.GeneratorDefinition()
			}

		}
		p.SetState(1219)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())
	}
	p.SetState(1221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserComma {
		{
			p.SetState(1220)
			p.Match(TypeScriptParserComma)
		}

	}
	{
		p.SetState(1223)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IGeneratorDefinitionContext is an interface to support dynamic dispatch.
type IGeneratorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDefinitionContext differentiates from other interfaces.
	IsGeneratorDefinitionContext()
}

type GeneratorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDefinitionContext() *GeneratorDefinitionContext {
	var p = new(GeneratorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_generatorDefinition
	return p
}

func (*GeneratorDefinitionContext) IsGeneratorDefinitionContext() {}

func NewGeneratorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDefinitionContext {
	var p = new(GeneratorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_generatorDefinition

	return p
}

func (s *GeneratorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDefinitionContext) Multiply() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiply, 0)
}

func (s *GeneratorDefinitionContext) IteratorDefinition() IIteratorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorDefinitionContext)
}

func (s *GeneratorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) GeneratorDefinition() (localctx IGeneratorDefinitionContext) {
	localctx = NewGeneratorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, TypeScriptParserRULE_generatorDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1225)
		p.Match(TypeScriptParserMultiply)
	}
	{
		p.SetState(1226)
		p.IteratorDefinition()
	}

	return localctx
}

// IIteratorBlockContext is an interface to support dynamic dispatch.
type IIteratorBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIteratorBlockContext differentiates from other interfaces.
	IsIteratorBlockContext()
}

type IteratorBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIteratorBlockContext() *IteratorBlockContext {
	var p = new(IteratorBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_iteratorBlock
	return p
}

func (*IteratorBlockContext) IsIteratorBlockContext() {}

func NewIteratorBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorBlockContext {
	var p = new(IteratorBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_iteratorBlock

	return p
}

func (s *IteratorBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorBlockContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *IteratorBlockContext) AllIteratorDefinition() []IIteratorDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIteratorDefinitionContext)(nil)).Elem())
	var tst = make([]IIteratorDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIteratorDefinitionContext)
		}
	}

	return tst
}

func (s *IteratorBlockContext) IteratorDefinition(i int) IIteratorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIteratorDefinitionContext)
}

func (s *IteratorBlockContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *IteratorBlockContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *IteratorBlockContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *IteratorBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIteratorBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IteratorBlock() (localctx IIteratorBlockContext) {
	localctx = NewIteratorBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, TypeScriptParserRULE_iteratorBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1228)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1229)
		p.IteratorDefinition()
	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1230)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(1231)
				p.IteratorDefinition()
			}

		}
		p.SetState(1236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())
	}
	p.SetState(1238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserComma {
		{
			p.SetState(1237)
			p.Match(TypeScriptParserComma)
		}

	}
	{
		p.SetState(1240)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IIteratorDefinitionContext is an interface to support dynamic dispatch.
type IIteratorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIteratorDefinitionContext differentiates from other interfaces.
	IsIteratorDefinitionContext()
}

type IteratorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIteratorDefinitionContext() *IteratorDefinitionContext {
	var p = new(IteratorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_iteratorDefinition
	return p
}

func (*IteratorDefinitionContext) IsIteratorDefinitionContext() {}

func NewIteratorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorDefinitionContext {
	var p = new(IteratorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_iteratorDefinition

	return p
}

func (s *IteratorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorDefinitionContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *IteratorDefinitionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *IteratorDefinitionContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *IteratorDefinitionContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *IteratorDefinitionContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *IteratorDefinitionContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *IteratorDefinitionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *IteratorDefinitionContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *IteratorDefinitionContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *IteratorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIteratorDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IteratorDefinition() (localctx IIteratorDefinitionContext) {
	localctx = NewIteratorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, TypeScriptParserRULE_iteratorDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1242)
		p.Match(TypeScriptParserOpenBracket)
	}
	{
		p.SetState(1243)
		p.singleExpression(0)
	}
	{
		p.SetState(1244)
		p.Match(TypeScriptParserCloseBracket)
	}
	{
		p.SetState(1245)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
		{
			p.SetState(1246)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1249)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1250)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1251)
		p.FunctionBody()
	}
	{
		p.SetState(1252)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IFormalParameterListContext is an interface to support dynamic dispatch.
type IFormalParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterListContext differentiates from other interfaces.
	IsFormalParameterListContext()
}

type FormalParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterListContext() *FormalParameterListContext {
	var p = new(FormalParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_formalParameterList
	return p
}

func (*FormalParameterListContext) IsFormalParameterListContext() {}

func NewFormalParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterListContext {
	var p = new(FormalParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_formalParameterList

	return p
}

func (s *FormalParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterListContext) AllFormalParameterArg() []IFormalParameterArgContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFormalParameterArgContext)(nil)).Elem())
	var tst = make([]IFormalParameterArgContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFormalParameterArgContext)
		}
	}

	return tst
}

func (s *FormalParameterListContext) FormalParameterArg(i int) IFormalParameterArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterArgContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterArgContext)
}

func (s *FormalParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *FormalParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *FormalParameterListContext) LastFormalParameterArg() ILastFormalParameterArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILastFormalParameterArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILastFormalParameterArgContext)
}

func (s *FormalParameterListContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *FormalParameterListContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *FormalParameterListContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *FormalParameterListContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FormalParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFormalParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FormalParameterList() (localctx IFormalParameterListContext) {
	localctx = NewFormalParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, TypeScriptParserRULE_formalParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1273)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserProtected, TypeScriptParserTypeAlias, TypeScriptParserRequire, TypeScriptParserAt, TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1254)
			p.FormalParameterArg()
		}
		p.SetState(1259)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1255)
					p.Match(TypeScriptParserComma)
				}
				{
					p.SetState(1256)
					p.FormalParameterArg()
				}

			}
			p.SetState(1261)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
		}
		p.SetState(1264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserComma {
			{
				p.SetState(1262)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(1263)
				p.LastFormalParameterArg()
			}

		}

	case TypeScriptParserEllipsis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1266)
			p.LastFormalParameterArg()
		}

	case TypeScriptParserOpenBracket:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1267)
			p.ArrayLiteral()
		}

	case TypeScriptParserOpenBrace:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1268)
			p.ObjectLiteral()
		}
		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserColon {
			{
				p.SetState(1269)
				p.Match(TypeScriptParserColon)
			}
			{
				p.SetState(1270)
				p.FormalParameterList()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFormalParameterArgContext is an interface to support dynamic dispatch.
type IFormalParameterArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterArgContext differentiates from other interfaces.
	IsFormalParameterArgContext()
}

type FormalParameterArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterArgContext() *FormalParameterArgContext {
	var p = new(FormalParameterArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_formalParameterArg
	return p
}

func (*FormalParameterArgContext) IsFormalParameterArgContext() {}

func NewFormalParameterArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterArgContext {
	var p = new(FormalParameterArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_formalParameterArg

	return p
}

func (s *FormalParameterArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterArgContext) IdentifierOrKeyWord() IIdentifierOrKeyWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierOrKeyWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrKeyWordContext)
}

func (s *FormalParameterArgContext) Decorator() IDecoratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecoratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecoratorContext)
}

func (s *FormalParameterArgContext) AccessibilityModifier() IAccessibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessibilityModifierContext)
}

func (s *FormalParameterArgContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *FormalParameterArgContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FormalParameterArgContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *FormalParameterArgContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *FormalParameterArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterArgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFormalParameterArg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FormalParameterArg() (localctx IFormalParameterArgContext) {
	localctx = NewFormalParameterArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, TypeScriptParserRULE_formalParameterArg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAt {
		{
			p.SetState(1275)
			p.Decorator()
		}

	}
	p.SetState(1279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101)))) != 0 {
		{
			p.SetState(1278)
			p.AccessibilityModifier()
		}

	}
	{
		p.SetState(1281)
		p.IdentifierOrKeyWord()
	}
	p.SetState(1283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserQuestionMark {
		{
			p.SetState(1282)
			p.Match(TypeScriptParserQuestionMark)
		}

	}
	p.SetState(1286)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(1285)
			p.TypeAnnotation()
		}

	}
	p.SetState(1290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAssign {
		{
			p.SetState(1288)
			p.Match(TypeScriptParserAssign)
		}
		{
			p.SetState(1289)
			p.singleExpression(0)
		}

	}

	return localctx
}

// ILastFormalParameterArgContext is an interface to support dynamic dispatch.
type ILastFormalParameterArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLastFormalParameterArgContext differentiates from other interfaces.
	IsLastFormalParameterArgContext()
}

type LastFormalParameterArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLastFormalParameterArgContext() *LastFormalParameterArgContext {
	var p = new(LastFormalParameterArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_lastFormalParameterArg
	return p
}

func (*LastFormalParameterArgContext) IsLastFormalParameterArgContext() {}

func NewLastFormalParameterArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LastFormalParameterArgContext {
	var p = new(LastFormalParameterArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_lastFormalParameterArg

	return p
}

func (s *LastFormalParameterArgContext) GetParser() antlr.Parser { return s.parser }

func (s *LastFormalParameterArgContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEllipsis, 0)
}

func (s *LastFormalParameterArgContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *LastFormalParameterArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LastFormalParameterArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LastFormalParameterArgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLastFormalParameterArg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) LastFormalParameterArg() (localctx ILastFormalParameterArgContext) {
	localctx = NewLastFormalParameterArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, TypeScriptParserRULE_lastFormalParameterArg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1292)
		p.Match(TypeScriptParserEllipsis)
	}
	{
		p.SetState(1293)
		p.Match(TypeScriptParserIdentifier)
	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, TypeScriptParserRULE_functionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1296)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1295)
			p.StatementList()
		}

	}

	return localctx
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrayLiteral
	return p
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *ArrayLiteralContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *ArrayLiteralContext) ElementList() IElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementListContext)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrayLiteral() (localctx IArrayLiteralContext) {
	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, TypeScriptParserRULE_arrayLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1298)
		p.Match(TypeScriptParserOpenBracket)
	}
	p.SetState(1300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
		{
			p.SetState(1299)
			p.ElementList()
		}

	}
	{
		p.SetState(1302)
		p.Match(TypeScriptParserCloseBracket)
	}

	return localctx
}

// IElementListContext is an interface to support dynamic dispatch.
type IElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementListContext differentiates from other interfaces.
	IsElementListContext()
}

type ElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementListContext() *ElementListContext {
	var p = new(ElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_elementList
	return p
}

func (*ElementListContext) IsElementListContext() {}

func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementListContext {
	var p = new(ElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_elementList

	return p
}

func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementListContext) AllArrayElement() []IArrayElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArrayElementContext)(nil)).Elem())
	var tst = make([]IArrayElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArrayElementContext)
		}
	}

	return tst
}

func (s *ElementListContext) ArrayElement(i int) IArrayElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArrayElementContext)
}

func (s *ElementListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ElementListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ElementList() (localctx IElementListContext) {
	localctx = NewElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, TypeScriptParserRULE_elementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.ArrayElement()
	}
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserComma {
		p.SetState(1306)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TypeScriptParserComma {
			{
				p.SetState(1305)
				p.Match(TypeScriptParserComma)
			}

			p.SetState(1308)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1310)
			p.ArrayElement()
		}

		p.SetState(1315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArrayElementContext is an interface to support dynamic dispatch.
type IArrayElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayElementContext differentiates from other interfaces.
	IsArrayElementContext()
}

type ArrayElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayElementContext() *ArrayElementContext {
	var p = new(ArrayElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrayElement
	return p
}

func (*ArrayElementContext) IsArrayElementContext() {}

func NewArrayElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayElementContext {
	var p = new(ArrayElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrayElement

	return p
}

func (s *ArrayElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayElementContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ArrayElementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ArrayElementContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEllipsis, 0)
}

func (s *ArrayElementContext) Comma() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, 0)
}

func (s *ArrayElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrayElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrayElement() (localctx IArrayElementContext) {
	localctx = NewArrayElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, TypeScriptParserRULE_arrayElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserEllipsis {
		{
			p.SetState(1316)
			p.Match(TypeScriptParserEllipsis)
		}

	}
	p.SetState(1321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1319)
			p.singleExpression(0)
		}

	case 2:
		{
			p.SetState(1320)
			p.Match(TypeScriptParserIdentifier)
		}

	}
	p.SetState(1324)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1323)
			p.Match(TypeScriptParserComma)
		}

	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *ObjectLiteralContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *ObjectLiteralContext) AllPropertyAssignment() []IPropertyAssignmentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyAssignmentContext)(nil)).Elem())
	var tst = make([]IPropertyAssignmentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyAssignmentContext)
		}
	}

	return tst
}

func (s *ObjectLiteralContext) PropertyAssignment(i int) IPropertyAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyAssignmentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyAssignmentContext)
}

func (s *ObjectLiteralContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ObjectLiteralContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitObjectLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, TypeScriptParserRULE_objectLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1326)
		p.Match(TypeScriptParserOpenBrace)
	}
	p.SetState(1338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserEllipsis)|(1<<TypeScriptParserMultiply))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || _la == TypeScriptParserIdentifier || _la == TypeScriptParserStringLiteral {
		{
			p.SetState(1327)
			p.PropertyAssignment()
		}
		p.SetState(1332)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1328)
					p.Match(TypeScriptParserComma)
				}
				{
					p.SetState(1329)
					p.PropertyAssignment()
				}

			}
			p.SetState(1334)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext())
		}
		p.SetState(1336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserComma {
			{
				p.SetState(1335)
				p.Match(TypeScriptParserComma)
			}

		}

	}
	{
		p.SetState(1340)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IPropertyAssignmentContext is an interface to support dynamic dispatch.
type IPropertyAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyAssignmentContext differentiates from other interfaces.
	IsPropertyAssignmentContext()
}

type PropertyAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyAssignmentContext() *PropertyAssignmentContext {
	var p = new(PropertyAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_propertyAssignment
	return p
}

func (*PropertyAssignmentContext) IsPropertyAssignmentContext() {}

func NewPropertyAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyAssignmentContext {
	var p = new(PropertyAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_propertyAssignment

	return p
}

func (s *PropertyAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyAssignmentContext) CopyFrom(ctx *PropertyAssignmentContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PropertyAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PropertyExpressionAssignmentContext struct {
	*PropertyAssignmentContext
}

func NewPropertyExpressionAssignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyExpressionAssignmentContext {
	var p = new(PropertyExpressionAssignmentContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *PropertyExpressionAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyExpressionAssignmentContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *PropertyExpressionAssignmentContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *PropertyExpressionAssignmentContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *PropertyExpressionAssignmentContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *PropertyExpressionAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyExpressionAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

type ComputedPropertyExpressionAssignmentContext struct {
	*PropertyAssignmentContext
}

func NewComputedPropertyExpressionAssignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ComputedPropertyExpressionAssignmentContext {
	var p = new(ComputedPropertyExpressionAssignmentContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *ComputedPropertyExpressionAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputedPropertyExpressionAssignmentContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *ComputedPropertyExpressionAssignmentContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *ComputedPropertyExpressionAssignmentContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ComputedPropertyExpressionAssignmentContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *ComputedPropertyExpressionAssignmentContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *ComputedPropertyExpressionAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitComputedPropertyExpressionAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

type PropertyShorthandContext struct {
	*PropertyAssignmentContext
}

func NewPropertyShorthandContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyShorthandContext {
	var p = new(PropertyShorthandContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *PropertyShorthandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyShorthandContext) IdentifierOrKeyWord() IIdentifierOrKeyWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierOrKeyWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrKeyWordContext)
}

func (s *PropertyShorthandContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyShorthand(s)

	default:
		return t.VisitChildren(s)
	}
}

type PropertySetterContext struct {
	*PropertyAssignmentContext
}

func NewPropertySetterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertySetterContext {
	var p = new(PropertySetterContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *PropertySetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertySetterContext) SetAccessor() ISetAccessorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAccessorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAccessorContext)
}

func (s *PropertySetterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertySetter(s)

	default:
		return t.VisitChildren(s)
	}
}

type PropertyGetterContext struct {
	*PropertyAssignmentContext
}

func NewPropertyGetterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyGetterContext {
	var p = new(PropertyGetterContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *PropertyGetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyGetterContext) GetAccessor() IGetAccessorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetAccessorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetAccessorContext)
}

func (s *PropertyGetterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyGetter(s)

	default:
		return t.VisitChildren(s)
	}
}

type RestParameterInObjectContext struct {
	*PropertyAssignmentContext
}

func NewRestParameterInObjectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RestParameterInObjectContext {
	var p = new(RestParameterInObjectContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *RestParameterInObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RestParameterInObjectContext) RestParameter() IRestParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRestParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRestParameterContext)
}

func (s *RestParameterInObjectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRestParameterInObject(s)

	default:
		return t.VisitChildren(s)
	}
}

type MethodPropertyContext struct {
	*PropertyAssignmentContext
}

func NewMethodPropertyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MethodPropertyContext {
	var p = new(MethodPropertyContext)

	p.PropertyAssignmentContext = NewEmptyPropertyAssignmentContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PropertyAssignmentContext))

	return p
}

func (s *MethodPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodPropertyContext) GeneratorMethod() IGeneratorMethodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorMethodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorMethodContext)
}

func (s *MethodPropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMethodProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PropertyAssignment() (localctx IPropertyAssignmentContext) {
	localctx = NewPropertyAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, TypeScriptParserRULE_propertyAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1357)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPropertyExpressionAssignmentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1342)
			p.PropertyName()
		}
		{
			p.SetState(1343)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TypeScriptParserAssign || _la == TypeScriptParserColon) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1344)
			p.singleExpression(0)
		}

	case 2:
		localctx = NewComputedPropertyExpressionAssignmentContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1346)
			p.Match(TypeScriptParserOpenBracket)
		}
		{
			p.SetState(1347)
			p.singleExpression(0)
		}
		{
			p.SetState(1348)
			p.Match(TypeScriptParserCloseBracket)
		}
		{
			p.SetState(1349)
			p.Match(TypeScriptParserColon)
		}
		{
			p.SetState(1350)
			p.singleExpression(0)
		}

	case 3:
		localctx = NewPropertyGetterContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1352)
			p.GetAccessor()
		}

	case 4:
		localctx = NewPropertySetterContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1353)
			p.SetAccessor()
		}

	case 5:
		localctx = NewMethodPropertyContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1354)
			p.GeneratorMethod()
		}

	case 6:
		localctx = NewPropertyShorthandContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1355)
			p.IdentifierOrKeyWord()
		}

	case 7:
		localctx = NewRestParameterInObjectContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1356)
			p.RestParameter()
		}

	}

	return localctx
}

// IGetAccessorContext is an interface to support dynamic dispatch.
type IGetAccessorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetAccessorContext differentiates from other interfaces.
	IsGetAccessorContext()
}

type GetAccessorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetAccessorContext() *GetAccessorContext {
	var p = new(GetAccessorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_getAccessor
	return p
}

func (*GetAccessorContext) IsGetAccessorContext() {}

func NewGetAccessorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetAccessorContext {
	var p = new(GetAccessorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_getAccessor

	return p
}

func (s *GetAccessorContext) GetParser() antlr.Parser { return s.parser }

func (s *GetAccessorContext) Getter() IGetterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetterContext)
}

func (s *GetAccessorContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *GetAccessorContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *GetAccessorContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *GetAccessorContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *GetAccessorContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *GetAccessorContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *GetAccessorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetAccessorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetAccessorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGetAccessor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) GetAccessor() (localctx IGetAccessorContext) {
	localctx = NewGetAccessorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, TypeScriptParserRULE_getAccessor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1359)
		p.Getter()
	}
	{
		p.SetState(1360)
		p.Match(TypeScriptParserOpenParen)
	}
	{
		p.SetState(1361)
		p.Match(TypeScriptParserCloseParen)
	}
	p.SetState(1363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(1362)
			p.TypeAnnotation()
		}

	}
	{
		p.SetState(1365)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1366)
		p.FunctionBody()
	}
	{
		p.SetState(1367)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// ISetAccessorContext is an interface to support dynamic dispatch.
type ISetAccessorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAccessorContext differentiates from other interfaces.
	IsSetAccessorContext()
}

type SetAccessorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAccessorContext() *SetAccessorContext {
	var p = new(SetAccessorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_setAccessor
	return p
}

func (*SetAccessorContext) IsSetAccessorContext() {}

func NewSetAccessorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAccessorContext {
	var p = new(SetAccessorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_setAccessor

	return p
}

func (s *SetAccessorContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAccessorContext) Setter() ISetterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetterContext)
}

func (s *SetAccessorContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *SetAccessorContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *SetAccessorContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *SetAccessorContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *SetAccessorContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *SetAccessorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *SetAccessorContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *SetAccessorContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *SetAccessorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAccessorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAccessorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitSetAccessor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) SetAccessor() (localctx ISetAccessorContext) {
	localctx = NewSetAccessorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, TypeScriptParserRULE_setAccessor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1369)
		p.Setter()
	}
	{
		p.SetState(1370)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1373)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserIdentifier:
		{
			p.SetState(1371)
			p.Match(TypeScriptParserIdentifier)
		}

	case TypeScriptParserOpenBracket, TypeScriptParserOpenBrace:
		{
			p.SetState(1372)
			p.BindingPattern()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(1375)
			p.TypeAnnotation()
		}

	}
	{
		p.SetState(1378)
		p.Match(TypeScriptParserCloseParen)
	}
	{
		p.SetState(1379)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1380)
		p.FunctionBody()
	}
	{
		p.SetState(1381)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// IPropertyNameContext is an interface to support dynamic dispatch.
type IPropertyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyNameContext differentiates from other interfaces.
	IsPropertyNameContext()
}

type PropertyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyNameContext() *PropertyNameContext {
	var p = new(PropertyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_propertyName
	return p
}

func (*PropertyNameContext) IsPropertyNameContext() {}

func NewPropertyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyNameContext {
	var p = new(PropertyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_propertyName

	return p
}

func (s *PropertyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyNameContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *PropertyNameContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStringLiteral, 0)
}

func (s *PropertyNameContext) NumericLiteral() INumericLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *PropertyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPropertyName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) PropertyName() (localctx IPropertyNameContext) {
	localctx = NewPropertyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, TypeScriptParserRULE_propertyName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1386)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserNullLiteral, TypeScriptParserBooleanLiteral, TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire, TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1383)
			p.IdentifierName()
		}

	case TypeScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1384)
			p.Match(TypeScriptParserStringLiteral)
		}

	case TypeScriptParserDecimalLiteral, TypeScriptParserHexIntegerLiteral, TypeScriptParserOctalIntegerLiteral, TypeScriptParserOctalIntegerLiteral2, TypeScriptParserBinaryIntegerLiteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1385)
			p.NumericLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ArgumentsContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ArgumentsContext) ArgumentList() IArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ArgumentsContext) Comma() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, 0)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, TypeScriptParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1388)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRegularExpressionLiteral)|(1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenParen)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis)|(1<<TypeScriptParserPlusPlus)|(1<<TypeScriptParserMinusMinus)|(1<<TypeScriptParserPlus)|(1<<TypeScriptParserMinus)|(1<<TypeScriptParserBitNot)|(1<<TypeScriptParserNot)|(1<<TypeScriptParserLessThan))) != 0) || (((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(TypeScriptParserNullLiteral-55))|(1<<(TypeScriptParserBooleanLiteral-55))|(1<<(TypeScriptParserDecimalLiteral-55))|(1<<(TypeScriptParserHexIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral-55))|(1<<(TypeScriptParserOctalIntegerLiteral2-55))|(1<<(TypeScriptParserBinaryIntegerLiteral-55))|(1<<(TypeScriptParserBreak-55))|(1<<(TypeScriptParserDo-55))|(1<<(TypeScriptParserInstanceof-55))|(1<<(TypeScriptParserTypeof-55))|(1<<(TypeScriptParserCase-55))|(1<<(TypeScriptParserElse-55))|(1<<(TypeScriptParserNew-55))|(1<<(TypeScriptParserVar-55))|(1<<(TypeScriptParserCatch-55))|(1<<(TypeScriptParserFinally-55))|(1<<(TypeScriptParserReturn-55))|(1<<(TypeScriptParserVoid-55))|(1<<(TypeScriptParserContinue-55))|(1<<(TypeScriptParserFor-55))|(1<<(TypeScriptParserSwitch-55))|(1<<(TypeScriptParserWhile-55))|(1<<(TypeScriptParserDebugger-55))|(1<<(TypeScriptParserFunction_-55))|(1<<(TypeScriptParserThis-55))|(1<<(TypeScriptParserWith-55))|(1<<(TypeScriptParserDefault-55))|(1<<(TypeScriptParserIf-55))|(1<<(TypeScriptParserThrow-55))|(1<<(TypeScriptParserDelete-55))|(1<<(TypeScriptParserIn-55)))) != 0) || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(TypeScriptParserTry-87))|(1<<(TypeScriptParserFrom-87))|(1<<(TypeScriptParserReadOnly-87))|(1<<(TypeScriptParserAsync-87))|(1<<(TypeScriptParserClass-87))|(1<<(TypeScriptParserEnum-87))|(1<<(TypeScriptParserExtends-87))|(1<<(TypeScriptParserSuper-87))|(1<<(TypeScriptParserConst-87))|(1<<(TypeScriptParserExport-87))|(1<<(TypeScriptParserImport-87))|(1<<(TypeScriptParserImplements-87))|(1<<(TypeScriptParserLet-87))|(1<<(TypeScriptParserPrivate-87))|(1<<(TypeScriptParserPublic-87))|(1<<(TypeScriptParserInterface-87))|(1<<(TypeScriptParserPackage-87))|(1<<(TypeScriptParserProtected-87))|(1<<(TypeScriptParserStatic-87))|(1<<(TypeScriptParserYield-87))|(1<<(TypeScriptParserStr-87))|(1<<(TypeScriptParserTypeAlias-87))|(1<<(TypeScriptParserGet-87))|(1<<(TypeScriptParserSet-87))|(1<<(TypeScriptParserRequire-87)))) != 0) || (((_la-124)&-(0x1f+1)) == 0 && ((1<<uint((_la-124)))&((1<<(TypeScriptParserIdentifier-124))|(1<<(TypeScriptParserStringLiteral-124))|(1<<(TypeScriptParserBackTick-124)))) != 0) {
		{
			p.SetState(1389)
			p.ArgumentList()
		}
		p.SetState(1391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserComma {
			{
				p.SetState(1390)
				p.Match(TypeScriptParserComma)
			}

		}

	}
	{
		p.SetState(1395)
		p.Match(TypeScriptParserCloseParen)
	}

	return localctx
}

// IArgumentListContext is an interface to support dynamic dispatch.
type IArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentListContext differentiates from other interfaces.
	IsArgumentListContext()
}

type ArgumentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentListContext() *ArgumentListContext {
	var p = new(ArgumentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_argumentList
	return p
}

func (*ArgumentListContext) IsArgumentListContext() {}

func NewArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentListContext {
	var p = new(ArgumentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_argumentList

	return p
}

func (s *ArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentListContext) AllArgument() []IArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArgumentContext)(nil)).Elem())
	var tst = make([]IArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArgumentContext)
		}
	}

	return tst
}

func (s *ArgumentListContext) Argument(i int) IArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArgumentContext)
}

func (s *ArgumentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ArgumentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArgumentList() (localctx IArgumentListContext) {
	localctx = NewArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, TypeScriptParserRULE_argumentList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1397)
		p.Argument()
	}
	p.SetState(1402)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1398)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(1399)
				p.Argument()
			}

		}
		p.SetState(1404)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())
	}

	return localctx
}

// IArgumentContext is an interface to support dynamic dispatch.
type IArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentContext differentiates from other interfaces.
	IsArgumentContext()
}

type ArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentContext() *ArgumentContext {
	var p = new(ArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_argument
	return p
}

func (*ArgumentContext) IsArgumentContext() {}

func NewArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentContext {
	var p = new(ArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_argument

	return p
}

func (s *ArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ArgumentContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ArgumentContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEllipsis, 0)
}

func (s *ArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Argument() (localctx IArgumentContext) {
	localctx = NewArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, TypeScriptParserRULE_argument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserEllipsis {
		{
			p.SetState(1405)
			p.Match(TypeScriptParserEllipsis)
		}

	}
	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1408)
			p.singleExpression(0)
		}

	case 2:
		{
			p.SetState(1409)
			p.Match(TypeScriptParserIdentifier)
		}

	}

	return localctx
}

// IExpressionSequenceContext is an interface to support dynamic dispatch.
type IExpressionSequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionSequenceContext differentiates from other interfaces.
	IsExpressionSequenceContext()
}

type ExpressionSequenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionSequenceContext() *ExpressionSequenceContext {
	var p = new(ExpressionSequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_expressionSequence
	return p
}

func (*ExpressionSequenceContext) IsExpressionSequenceContext() {}

func NewExpressionSequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionSequenceContext {
	var p = new(ExpressionSequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_expressionSequence

	return p
}

func (s *ExpressionSequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionSequenceContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionSequenceContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ExpressionSequenceContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserComma)
}

func (s *ExpressionSequenceContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserComma, i)
}

func (s *ExpressionSequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionSequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionSequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitExpressionSequence(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ExpressionSequence() (localctx IExpressionSequenceContext) {
	localctx = NewExpressionSequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, TypeScriptParserRULE_expressionSequence)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1412)
		p.singleExpression(0)
	}
	p.SetState(1417)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1413)
				p.Match(TypeScriptParserComma)
			}
			{
				p.SetState(1414)
				p.singleExpression(0)
			}

		}
		p.SetState(1419)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext())
	}

	return localctx
}

// IFunctionExpressionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionExpressionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionExpressionDeclarationContext differentiates from other interfaces.
	IsFunctionExpressionDeclarationContext()
}

type FunctionExpressionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionExpressionDeclarationContext() *FunctionExpressionDeclarationContext {
	var p = new(FunctionExpressionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_functionExpressionDeclaration
	return p
}

func (*FunctionExpressionDeclarationContext) IsFunctionExpressionDeclarationContext() {}

func NewFunctionExpressionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionDeclarationContext {
	var p = new(FunctionExpressionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_functionExpressionDeclaration

	return p
}

func (s *FunctionExpressionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionDeclarationContext) Function_() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFunction_, 0)
}

func (s *FunctionExpressionDeclarationContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *FunctionExpressionDeclarationContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *FunctionExpressionDeclarationContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *FunctionExpressionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionExpressionDeclarationContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *FunctionExpressionDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *FunctionExpressionDeclarationContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FunctionExpressionDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FunctionExpressionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFunctionExpressionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) FunctionExpressionDeclaration() (localctx IFunctionExpressionDeclarationContext) {
	localctx = NewFunctionExpressionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, TypeScriptParserRULE_functionExpressionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1420)
		p.Match(TypeScriptParserFunction_)
	}
	p.SetState(1422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserIdentifier {
		{
			p.SetState(1421)
			p.Match(TypeScriptParserIdentifier)
		}

	}
	{
		p.SetState(1424)
		p.Match(TypeScriptParserOpenParen)
	}
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
		{
			p.SetState(1425)
			p.FormalParameterList()
		}

	}
	{
		p.SetState(1428)
		p.Match(TypeScriptParserCloseParen)
	}
	p.SetState(1430)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(1429)
			p.TypeAnnotation()
		}

	}
	{
		p.SetState(1432)
		p.Match(TypeScriptParserOpenBrace)
	}
	{
		p.SetState(1433)
		p.FunctionBody()
	}
	{
		p.SetState(1434)
		p.Match(TypeScriptParserCloseBrace)
	}

	return localctx
}

// ISingleExpressionContext is an interface to support dynamic dispatch.
type ISingleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleExpressionContext differentiates from other interfaces.
	IsSingleExpressionContext()
}

type SingleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleExpressionContext() *SingleExpressionContext {
	var p = new(SingleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_singleExpression
	return p
}

func (*SingleExpressionContext) IsSingleExpressionContext() {}

func NewSingleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleExpressionContext {
	var p = new(SingleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_singleExpression

	return p
}

func (s *SingleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleExpressionContext) CopyFrom(ctx *SingleExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SingleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TemplateStringExpressionContext struct {
	*SingleExpressionContext
}

func NewTemplateStringExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TemplateStringExpressionContext {
	var p = new(TemplateStringExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *TemplateStringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *TemplateStringExpressionContext) TemplateStringLiteral() ITemplateStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateStringLiteralContext)
}

func (s *TemplateStringExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTemplateStringExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type TernaryExpressionContext struct {
	*SingleExpressionContext
}

func NewTernaryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TernaryExpressionContext {
	var p = new(TernaryExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *TernaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TernaryExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *TernaryExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *TernaryExpressionContext) QuestionMark() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserQuestionMark, 0)
}

func (s *TernaryExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserColon, 0)
}

func (s *TernaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTernaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalAndExpressionContext struct {
	*SingleExpressionContext
}

func NewLogicalAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *LogicalAndExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *LogicalAndExpressionContext) And() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAnd, 0)
}

func (s *LogicalAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLogicalAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type GeneratorsExpressionContext struct {
	*SingleExpressionContext
}

func NewGeneratorsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GeneratorsExpressionContext {
	var p = new(GeneratorsExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *GeneratorsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorsExpressionContext) GeneratorBlock() IGeneratorBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBlockContext)
}

func (s *GeneratorsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PreIncrementExpressionContext struct {
	*SingleExpressionContext
}

func NewPreIncrementExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PreIncrementExpressionContext {
	var p = new(PreIncrementExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *PreIncrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreIncrementExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPlusPlus, 0)
}

func (s *PreIncrementExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *PreIncrementExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPreIncrementExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ObjectLiteralExpressionContext struct {
	*SingleExpressionContext
}

func NewObjectLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ObjectLiteralExpressionContext {
	var p = new(ObjectLiteralExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ObjectLiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *ObjectLiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitObjectLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type InExpressionContext struct {
	*SingleExpressionContext
}

func NewInExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InExpressionContext {
	var p = new(InExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *InExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *InExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *InExpressionContext) In() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIn, 0)
}

func (s *InExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitInExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalOrExpressionContext struct {
	*SingleExpressionContext
}

func NewLogicalOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *LogicalOrExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *LogicalOrExpressionContext) Or() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOr, 0)
}

func (s *LogicalOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLogicalOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type GenericTypesContext struct {
	*SingleExpressionContext
}

func NewGenericTypesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericTypesContext {
	var p = new(GenericTypesContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *GenericTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericTypesContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *GenericTypesContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *GenericTypesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGenericTypes(s)

	default:
		return t.VisitChildren(s)
	}
}

type NotExpressionContext struct {
	*SingleExpressionContext
}

func NewNotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NotExpressionContext {
	var p = new(NotExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotExpressionContext) Not() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNot, 0)
}

func (s *NotExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *NotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PreDecreaseExpressionContext struct {
	*SingleExpressionContext
}

func NewPreDecreaseExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PreDecreaseExpressionContext {
	var p = new(PreDecreaseExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *PreDecreaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreDecreaseExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMinusMinus, 0)
}

func (s *PreDecreaseExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *PreDecreaseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPreDecreaseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArgumentsExpressionContext struct {
	*SingleExpressionContext
}

func NewArgumentsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArgumentsExpressionContext {
	var p = new(ArgumentsExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ArgumentsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ArgumentsExpressionContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *ArgumentsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArgumentsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ThisExpressionContext struct {
	*SingleExpressionContext
}

func NewThisExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ThisExpressionContext {
	var p = new(ThisExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ThisExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThisExpressionContext) This() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserThis, 0)
}

func (s *ThisExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitThisExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionExpressionContext struct {
	*SingleExpressionContext
}

func NewFunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) FunctionExpressionDeclaration() IFunctionExpressionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionDeclarationContext)
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnaryMinusExpressionContext struct {
	*SingleExpressionContext
}

func NewUnaryMinusExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryMinusExpressionContext {
	var p = new(UnaryMinusExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *UnaryMinusExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryMinusExpressionContext) Minus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMinus, 0)
}

func (s *UnaryMinusExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *UnaryMinusExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitUnaryMinusExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignmentExpressionContext struct {
	*SingleExpressionContext
}

func NewAssignmentExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *AssignmentExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *AssignmentExpressionContext) Assign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAssign, 0)
}

func (s *AssignmentExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAssignmentExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PostDecreaseExpressionContext struct {
	*SingleExpressionContext
}

func NewPostDecreaseExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PostDecreaseExpressionContext {
	var p = new(PostDecreaseExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *PostDecreaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostDecreaseExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *PostDecreaseExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMinusMinus, 0)
}

func (s *PostDecreaseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPostDecreaseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type TypeofExpressionContext struct {
	*SingleExpressionContext
}

func NewTypeofExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeofExpressionContext {
	var p = new(TypeofExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *TypeofExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeofExpressionContext) Typeof() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeof, 0)
}

func (s *TypeofExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *TypeofExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTypeofExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type InstanceofExpressionContext struct {
	*SingleExpressionContext
}

func NewInstanceofExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InstanceofExpressionContext {
	var p = new(InstanceofExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *InstanceofExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceofExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *InstanceofExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *InstanceofExpressionContext) Instanceof() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserInstanceof, 0)
}

func (s *InstanceofExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitInstanceofExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnaryPlusExpressionContext struct {
	*SingleExpressionContext
}

func NewUnaryPlusExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryPlusExpressionContext {
	var p = new(UnaryPlusExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *UnaryPlusExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryPlusExpressionContext) Plus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPlus, 0)
}

func (s *UnaryPlusExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *UnaryPlusExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitUnaryPlusExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type DeleteExpressionContext struct {
	*SingleExpressionContext
}

func NewDeleteExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DeleteExpressionContext {
	var p = new(DeleteExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *DeleteExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteExpressionContext) Delete() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDelete, 0)
}

func (s *DeleteExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *DeleteExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitDeleteExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type GeneratorsFunctionExpressionContext struct {
	*SingleExpressionContext
}

func NewGeneratorsFunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GeneratorsFunctionExpressionContext {
	var p = new(GeneratorsFunctionExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *GeneratorsFunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorsFunctionExpressionContext) GeneratorFunctionDeclaration() IGeneratorFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorFunctionDeclarationContext)
}

func (s *GeneratorsFunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGeneratorsFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrowFunctionExpressionContext struct {
	*SingleExpressionContext
}

func NewArrowFunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrowFunctionExpressionContext {
	var p = new(ArrowFunctionExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ArrowFunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunctionExpressionContext) ArrowFunctionDeclaration() IArrowFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunctionDeclarationContext)
}

func (s *ArrowFunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrowFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IteratorsExpressionContext struct {
	*SingleExpressionContext
}

func NewIteratorsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IteratorsExpressionContext {
	var p = new(IteratorsExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *IteratorsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorsExpressionContext) IteratorBlock() IIteratorBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorBlockContext)
}

func (s *IteratorsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIteratorsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type EqualityExpressionContext struct {
	*SingleExpressionContext
}

func NewEqualityExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *EqualityExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *EqualityExpressionContext) Equals_() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEquals_, 0)
}

func (s *EqualityExpressionContext) NotEquals() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNotEquals, 0)
}

func (s *EqualityExpressionContext) IdentityEquals() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentityEquals, 0)
}

func (s *EqualityExpressionContext) IdentityNotEquals() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentityNotEquals, 0)
}

func (s *EqualityExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEqualityExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitXOrExpressionContext struct {
	*SingleExpressionContext
}

func NewBitXOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitXOrExpressionContext {
	var p = new(BitXOrExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *BitXOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitXOrExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *BitXOrExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *BitXOrExpressionContext) BitXOr() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitXOr, 0)
}

func (s *BitXOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBitXOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type CastAsExpressionContext struct {
	*SingleExpressionContext
}

func NewCastAsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CastAsExpressionContext {
	var p = new(CastAsExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *CastAsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastAsExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *CastAsExpressionContext) As() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAs, 0)
}

func (s *CastAsExpressionContext) AsExpression() IAsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsExpressionContext)
}

func (s *CastAsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitCastAsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type SuperExpressionContext struct {
	*SingleExpressionContext
}

func NewSuperExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SuperExpressionContext {
	var p = new(SuperExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *SuperExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperExpressionContext) Super() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSuper, 0)
}

func (s *SuperExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitSuperExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MultiplicativeExpressionContext struct {
	*SingleExpressionContext
}

func NewMultiplicativeExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *MultiplicativeExpressionContext) Multiply() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiply, 0)
}

func (s *MultiplicativeExpressionContext) Divide() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDivide, 0)
}

func (s *MultiplicativeExpressionContext) Modulus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserModulus, 0)
}

func (s *MultiplicativeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMultiplicativeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitShiftExpressionContext struct {
	*SingleExpressionContext
}

func NewBitShiftExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitShiftExpressionContext {
	var p = new(BitShiftExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *BitShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitShiftExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *BitShiftExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *BitShiftExpressionContext) LeftShiftArithmetic() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLeftShiftArithmetic, 0)
}

func (s *BitShiftExpressionContext) RightShiftArithmetic() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRightShiftArithmetic, 0)
}

func (s *BitShiftExpressionContext) RightShiftLogical() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRightShiftLogical, 0)
}

func (s *BitShiftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBitShiftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesizedExpressionContext struct {
	*SingleExpressionContext
}

func NewParenthesizedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ParenthesizedExpressionContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *ParenthesizedExpressionContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AdditiveExpressionContext struct {
	*SingleExpressionContext
}

func NewAdditiveExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *AdditiveExpressionContext) Plus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPlus, 0)
}

func (s *AdditiveExpressionContext) Minus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMinus, 0)
}

func (s *AdditiveExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAdditiveExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type RelationalExpressionContext struct {
	*SingleExpressionContext
}

func NewRelationalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *RelationalExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *RelationalExpressionContext) LessThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThan, 0)
}

func (s *RelationalExpressionContext) MoreThan() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMoreThan, 0)
}

func (s *RelationalExpressionContext) LessThanEquals() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLessThanEquals, 0)
}

func (s *RelationalExpressionContext) GreaterThanEquals() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserGreaterThanEquals, 0)
}

func (s *RelationalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitRelationalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PostIncrementExpressionContext struct {
	*SingleExpressionContext
}

func NewPostIncrementExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PostIncrementExpressionContext {
	var p = new(PostIncrementExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *PostIncrementExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostIncrementExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *PostIncrementExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPlusPlus, 0)
}

func (s *PostIncrementExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitPostIncrementExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type YieldExpressionContext struct {
	*SingleExpressionContext
}

func NewYieldExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *YieldExpressionContext {
	var p = new(YieldExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *YieldExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpressionContext) YieldStatement() IYieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldStatementContext)
}

func (s *YieldExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitYieldExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitNotExpressionContext struct {
	*SingleExpressionContext
}

func NewBitNotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitNotExpressionContext {
	var p = new(BitNotExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *BitNotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitNotExpressionContext) BitNot() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitNot, 0)
}

func (s *BitNotExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *BitNotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBitNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type NewExpressionContext struct {
	*SingleExpressionContext
}

func NewNewExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NewExpressionContext {
	var p = new(NewExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *NewExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewExpressionContext) New() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNew, 0)
}

func (s *NewExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *NewExpressionContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *NewExpressionContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *NewExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNewExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralExpressionContext struct {
	*SingleExpressionContext
}

func NewLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayLiteralExpressionContext struct {
	*SingleExpressionContext
}

func NewArrayLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayLiteralExpressionContext {
	var p = new(ArrayLiteralExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ArrayLiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *ArrayLiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrayLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemberDotExpressionContext struct {
	*SingleExpressionContext
}

func NewMemberDotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemberDotExpressionContext {
	var p = new(MemberDotExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *MemberDotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDotExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *MemberDotExpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDot, 0)
}

func (s *MemberDotExpressionContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *MemberDotExpressionContext) NestedTypeGeneric() INestedTypeGenericContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedTypeGenericContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedTypeGenericContext)
}

func (s *MemberDotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMemberDotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ClassExpressionContext struct {
	*SingleExpressionContext
}

func NewClassExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ClassExpressionContext {
	var p = new(ClassExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *ClassExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExpressionContext) Class() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserClass, 0)
}

func (s *ClassExpressionContext) ClassTail() IClassTailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTailContext)
}

func (s *ClassExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ClassExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitClassExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemberIndexExpressionContext struct {
	*SingleExpressionContext
}

func NewMemberIndexExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemberIndexExpressionContext {
	var p = new(MemberIndexExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *MemberIndexExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberIndexExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *MemberIndexExpressionContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *MemberIndexExpressionContext) ExpressionSequence() IExpressionSequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionSequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionSequenceContext)
}

func (s *MemberIndexExpressionContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *MemberIndexExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitMemberIndexExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IdentifierExpressionContext struct {
	*SingleExpressionContext
}

func NewIdentifierExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IdentifierExpressionContext {
	var p = new(IdentifierExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *IdentifierExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierExpressionContext) IdentifierName() IIdentifierNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierNameContext)
}

func (s *IdentifierExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *IdentifierExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIdentifierExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitAndExpressionContext struct {
	*SingleExpressionContext
}

func NewBitAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitAndExpressionContext {
	var p = new(BitAndExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *BitAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitAndExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *BitAndExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *BitAndExpressionContext) BitAnd() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitAnd, 0)
}

func (s *BitAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBitAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitOrExpressionContext struct {
	*SingleExpressionContext
}

func NewBitOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitOrExpressionContext {
	var p = new(BitOrExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *BitOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitOrExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *BitOrExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *BitOrExpressionContext) BitOr() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitOr, 0)
}

func (s *BitOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitBitOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignmentOperatorExpressionContext struct {
	*SingleExpressionContext
}

func NewAssignmentOperatorExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignmentOperatorExpressionContext {
	var p = new(AssignmentOperatorExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *AssignmentOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorExpressionContext) AllSingleExpression() []ISingleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem())
	var tst = make([]ISingleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISingleExpressionContext)
		}
	}

	return tst
}

func (s *AssignmentOperatorExpressionContext) SingleExpression(i int) ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *AssignmentOperatorExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentOperatorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAssignmentOperatorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type VoidExpressionContext struct {
	*SingleExpressionContext
}

func NewVoidExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VoidExpressionContext {
	var p = new(VoidExpressionContext)

	p.SingleExpressionContext = NewEmptySingleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SingleExpressionContext))

	return p
}

func (s *VoidExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VoidExpressionContext) Void() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserVoid, 0)
}

func (s *VoidExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *VoidExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitVoidExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) SingleExpression() (localctx ISingleExpressionContext) {
	return p.singleExpression(0)
}

func (p *TypeScriptParser) singleExpression(_p int) (localctx ISingleExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSingleExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISingleExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 250
	p.EnterRecursionRule(localctx, 250, TypeScriptParserRULE_singleExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1495)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1437)
			p.FunctionExpressionDeclaration()
		}

	case 2:
		localctx = NewArrowFunctionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1438)
			p.ArrowFunctionDeclaration()
		}

	case 3:
		localctx = NewClassExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1439)
			p.Match(TypeScriptParserClass)
		}
		p.SetState(1441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserIdentifier {
			{
				p.SetState(1440)
				p.Match(TypeScriptParserIdentifier)
			}

		}
		{
			p.SetState(1443)
			p.ClassTail()
		}

	case 4:
		localctx = NewNewExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1444)
			p.Match(TypeScriptParserNew)
		}
		{
			p.SetState(1445)
			p.singleExpression(0)
		}
		p.SetState(1447)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TypeScriptParserLessThan {
			{
				p.SetState(1446)
				p.TypeArguments()
			}

		}
		{
			p.SetState(1449)
			p.Arguments()
		}

	case 5:
		localctx = NewNewExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1451)
			p.Match(TypeScriptParserNew)
		}
		{
			p.SetState(1452)
			p.singleExpression(0)
		}
		p.SetState(1454)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1453)
				p.TypeArguments()
			}

		}

	case 6:
		localctx = NewDeleteExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1456)
			p.Match(TypeScriptParserDelete)
		}
		{
			p.SetState(1457)
			p.singleExpression(38)
		}

	case 7:
		localctx = NewVoidExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1458)
			p.Match(TypeScriptParserVoid)
		}
		{
			p.SetState(1459)
			p.singleExpression(37)
		}

	case 8:
		localctx = NewTypeofExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1460)
			p.Match(TypeScriptParserTypeof)
		}
		{
			p.SetState(1461)
			p.singleExpression(36)
		}

	case 9:
		localctx = NewPreIncrementExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1462)
			p.Match(TypeScriptParserPlusPlus)
		}
		{
			p.SetState(1463)
			p.singleExpression(35)
		}

	case 10:
		localctx = NewPreDecreaseExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1464)
			p.Match(TypeScriptParserMinusMinus)
		}
		{
			p.SetState(1465)
			p.singleExpression(34)
		}

	case 11:
		localctx = NewUnaryPlusExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1466)
			p.Match(TypeScriptParserPlus)
		}
		{
			p.SetState(1467)
			p.singleExpression(33)
		}

	case 12:
		localctx = NewUnaryMinusExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1468)
			p.Match(TypeScriptParserMinus)
		}
		{
			p.SetState(1469)
			p.singleExpression(32)
		}

	case 13:
		localctx = NewBitNotExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1470)
			p.Match(TypeScriptParserBitNot)
		}
		{
			p.SetState(1471)
			p.singleExpression(31)
		}

	case 14:
		localctx = NewNotExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1472)
			p.Match(TypeScriptParserNot)
		}
		{
			p.SetState(1473)
			p.singleExpression(30)
		}

	case 15:
		localctx = NewIteratorsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1474)
			p.IteratorBlock()
		}

	case 16:
		localctx = NewGeneratorsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1475)
			p.GeneratorBlock()
		}

	case 17:
		localctx = NewGeneratorsFunctionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1476)
			p.GeneratorFunctionDeclaration()
		}

	case 18:
		localctx = NewYieldExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1477)
			p.YieldStatement()
		}

	case 19:
		localctx = NewThisExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1478)
			p.Match(TypeScriptParserThis)
		}

	case 20:
		localctx = NewIdentifierExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1479)
			p.IdentifierName()
		}
		p.SetState(1481)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1480)
				p.singleExpression(0)
			}

		}

	case 21:
		localctx = NewSuperExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1483)
			p.Match(TypeScriptParserSuper)
		}

	case 22:
		localctx = NewLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1484)
			p.Literal()
		}

	case 23:
		localctx = NewArrayLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1485)
			p.ArrayLiteral()
		}

	case 24:
		localctx = NewObjectLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1486)
			p.ObjectLiteral()
		}

	case 25:
		localctx = NewParenthesizedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1487)
			p.Match(TypeScriptParserOpenParen)
		}
		{
			p.SetState(1488)
			p.ExpressionSequence()
		}
		{
			p.SetState(1489)
			p.Match(TypeScriptParserCloseParen)
		}

	case 26:
		localctx = NewGenericTypesContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1491)
			p.TypeArguments()
		}
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1492)
				p.ExpressionSequence()
			}

		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1570)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMultiplicativeExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1497)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
				}
				{
					p.SetState(1498)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserMultiply)|(1<<TypeScriptParserDivide)|(1<<TypeScriptParserModulus))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1499)
					p.singleExpression(30)
				}

			case 2:
				localctx = NewAdditiveExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1500)

				if !(p.Precpred(p.GetParserRuleContext(), 28)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 28)", ""))
				}
				{
					p.SetState(1501)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TypeScriptParserPlus || _la == TypeScriptParserMinus) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1502)
					p.singleExpression(29)
				}

			case 3:
				localctx = NewBitShiftExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1503)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				{
					p.SetState(1504)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserRightShiftArithmetic)|(1<<TypeScriptParserLeftShiftArithmetic)|(1<<TypeScriptParserRightShiftLogical))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1505)
					p.singleExpression(28)
				}

			case 4:
				localctx = NewRelationalExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1506)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
				}
				{
					p.SetState(1507)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-30)&-(0x1f+1)) == 0 && ((1<<uint((_la-30)))&((1<<(TypeScriptParserLessThan-30))|(1<<(TypeScriptParserMoreThan-30))|(1<<(TypeScriptParserLessThanEquals-30))|(1<<(TypeScriptParserGreaterThanEquals-30)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1508)
					p.singleExpression(27)
				}

			case 5:
				localctx = NewInstanceofExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1509)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(1510)
					p.Match(TypeScriptParserInstanceof)
				}
				{
					p.SetState(1511)
					p.singleExpression(26)
				}

			case 6:
				localctx = NewInExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1512)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				{
					p.SetState(1513)
					p.Match(TypeScriptParserIn)
				}
				{
					p.SetState(1514)
					p.singleExpression(25)
				}

			case 7:
				localctx = NewEqualityExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1515)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(1516)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(TypeScriptParserEquals_-34))|(1<<(TypeScriptParserNotEquals-34))|(1<<(TypeScriptParserIdentityEquals-34))|(1<<(TypeScriptParserIdentityNotEquals-34)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1517)
					p.singleExpression(24)
				}

			case 8:
				localctx = NewBitAndExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1518)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(1519)
					p.Match(TypeScriptParserBitAnd)
				}
				{
					p.SetState(1520)
					p.singleExpression(23)
				}

			case 9:
				localctx = NewBitXOrExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1521)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(1522)
					p.Match(TypeScriptParserBitXOr)
				}
				{
					p.SetState(1523)
					p.singleExpression(22)
				}

			case 10:
				localctx = NewBitOrExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1524)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1525)
					p.Match(TypeScriptParserBitOr)
				}
				{
					p.SetState(1526)
					p.singleExpression(21)
				}

			case 11:
				localctx = NewLogicalAndExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1527)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1528)
					p.Match(TypeScriptParserAnd)
				}
				{
					p.SetState(1529)
					p.singleExpression(20)
				}

			case 12:
				localctx = NewLogicalOrExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1530)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1531)
					p.Match(TypeScriptParserOr)
				}
				{
					p.SetState(1532)
					p.singleExpression(19)
				}

			case 13:
				localctx = NewTernaryExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1533)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1534)
					p.Match(TypeScriptParserQuestionMark)
				}
				{
					p.SetState(1535)
					p.singleExpression(0)
				}
				{
					p.SetState(1536)
					p.Match(TypeScriptParserColon)
				}
				{
					p.SetState(1537)
					p.singleExpression(18)
				}

			case 14:
				localctx = NewAssignmentExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1539)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1540)
					p.Match(TypeScriptParserAssign)
				}
				{
					p.SetState(1541)
					p.singleExpression(17)
				}

			case 15:
				localctx = NewAssignmentOperatorExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1542)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1543)
					p.AssignmentOperator()
				}
				{
					p.SetState(1544)
					p.singleExpression(16)
				}

			case 16:
				localctx = NewMemberIndexExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1546)

				if !(p.Precpred(p.GetParserRuleContext(), 45)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 45)", ""))
				}
				{
					p.SetState(1547)
					p.Match(TypeScriptParserOpenBracket)
				}
				{
					p.SetState(1548)
					p.ExpressionSequence()
				}
				{
					p.SetState(1549)
					p.Match(TypeScriptParserCloseBracket)
				}

			case 17:
				localctx = NewMemberDotExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1551)

				if !(p.Precpred(p.GetParserRuleContext(), 44)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 44)", ""))
				}
				{
					p.SetState(1552)
					p.Match(TypeScriptParserDot)
				}
				{
					p.SetState(1553)
					p.IdentifierName()
				}
				p.SetState(1555)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1554)
						p.NestedTypeGeneric()
					}

				}

			case 18:
				localctx = NewArgumentsExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1557)

				if !(p.Precpred(p.GetParserRuleContext(), 41)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 41)", ""))
				}
				{
					p.SetState(1558)
					p.Arguments()
				}

			case 19:
				localctx = NewPostIncrementExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1559)

				if !(p.Precpred(p.GetParserRuleContext(), 40)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 40)", ""))
				}
				p.SetState(1560)

				if !(p.notLineTerminator()) {
					panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
				}
				{
					p.SetState(1561)
					p.Match(TypeScriptParserPlusPlus)
				}

			case 20:
				localctx = NewPostDecreaseExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1562)

				if !(p.Precpred(p.GetParserRuleContext(), 39)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 39)", ""))
				}
				p.SetState(1563)

				if !(p.notLineTerminator()) {
					panic(antlr.NewFailedPredicateException(p, "p.notLineTerminator()", ""))
				}
				{
					p.SetState(1564)
					p.Match(TypeScriptParserMinusMinus)
				}

			case 21:
				localctx = NewTemplateStringExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1565)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1566)
					p.TemplateStringLiteral()
				}

			case 22:
				localctx = NewCastAsExpressionContext(p, NewSingleExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, TypeScriptParserRULE_singleExpression)
				p.SetState(1567)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1568)
					p.Match(TypeScriptParserAs)
				}
				{
					p.SetState(1569)
					p.AsExpression()
				}

			}

		}
		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())
	}

	return localctx
}

// IAsExpressionContext is an interface to support dynamic dispatch.
type IAsExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsExpressionContext differentiates from other interfaces.
	IsAsExpressionContext()
}

type AsExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsExpressionContext() *AsExpressionContext {
	var p = new(AsExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_asExpression
	return p
}

func (*AsExpressionContext) IsAsExpressionContext() {}

func NewAsExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsExpressionContext {
	var p = new(AsExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_asExpression

	return p
}

func (s *AsExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsExpressionContext) PredefinedType() IPredefinedTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredefinedTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredefinedTypeContext)
}

func (s *AsExpressionContext) OpenBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBracket, 0)
}

func (s *AsExpressionContext) CloseBracket() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBracket, 0)
}

func (s *AsExpressionContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *AsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) AsExpression() (localctx IAsExpressionContext) {
	localctx = NewAsExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, TypeScriptParserRULE_asExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1581)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1575)
			p.PredefinedType()
		}
		p.SetState(1578)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1576)
				p.Match(TypeScriptParserOpenBracket)
			}
			{
				p.SetState(1577)
				p.Match(TypeScriptParserCloseBracket)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1580)
			p.singleExpression(0)
		}

	}

	return localctx
}

// IArrowFunctionDeclarationContext is an interface to support dynamic dispatch.
type IArrowFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunctionDeclarationContext differentiates from other interfaces.
	IsArrowFunctionDeclarationContext()
}

type ArrowFunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunctionDeclarationContext() *ArrowFunctionDeclarationContext {
	var p = new(ArrowFunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionDeclaration
	return p
}

func (*ArrowFunctionDeclarationContext) IsArrowFunctionDeclarationContext() {}

func NewArrowFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunctionDeclarationContext {
	var p = new(ArrowFunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionDeclaration

	return p
}

func (s *ArrowFunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunctionDeclarationContext) ArrowFunctionParameters() IArrowFunctionParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunctionParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunctionParametersContext)
}

func (s *ArrowFunctionDeclarationContext) ARROW() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserARROW, 0)
}

func (s *ArrowFunctionDeclarationContext) ArrowFunctionBody() IArrowFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunctionBodyContext)
}

func (s *ArrowFunctionDeclarationContext) Async() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAsync, 0)
}

func (s *ArrowFunctionDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *ArrowFunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrowFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrowFunctionDeclaration() (localctx IArrowFunctionDeclarationContext) {
	localctx = NewArrowFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, TypeScriptParserRULE_arrowFunctionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1584)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserAsync {
		{
			p.SetState(1583)
			p.Match(TypeScriptParserAsync)
		}

	}
	{
		p.SetState(1586)
		p.ArrowFunctionParameters()
	}
	p.SetState(1588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TypeScriptParserColon {
		{
			p.SetState(1587)
			p.TypeAnnotation()
		}

	}
	{
		p.SetState(1590)
		p.Match(TypeScriptParserARROW)
	}
	{
		p.SetState(1591)
		p.ArrowFunctionBody()
	}

	return localctx
}

// IArrowFunctionParametersContext is an interface to support dynamic dispatch.
type IArrowFunctionParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunctionParametersContext differentiates from other interfaces.
	IsArrowFunctionParametersContext()
}

type ArrowFunctionParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunctionParametersContext() *ArrowFunctionParametersContext {
	var p = new(ArrowFunctionParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionParameters
	return p
}

func (*ArrowFunctionParametersContext) IsArrowFunctionParametersContext() {}

func NewArrowFunctionParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunctionParametersContext {
	var p = new(ArrowFunctionParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionParameters

	return p
}

func (s *ArrowFunctionParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunctionParametersContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *ArrowFunctionParametersContext) OpenParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenParen, 0)
}

func (s *ArrowFunctionParametersContext) CloseParen() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseParen, 0)
}

func (s *ArrowFunctionParametersContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *ArrowFunctionParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunctionParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunctionParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrowFunctionParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrowFunctionParameters() (localctx IArrowFunctionParametersContext) {
	localctx = NewArrowFunctionParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, TypeScriptParserRULE_arrowFunctionParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1599)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1593)
			p.Match(TypeScriptParserIdentifier)
		}

	case TypeScriptParserOpenParen:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1594)
			p.Match(TypeScriptParserOpenParen)
		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TypeScriptParserOpenBracket)|(1<<TypeScriptParserOpenBrace)|(1<<TypeScriptParserEllipsis))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(TypeScriptParserPrivate-101))|(1<<(TypeScriptParserPublic-101))|(1<<(TypeScriptParserProtected-101))|(1<<(TypeScriptParserTypeAlias-101))|(1<<(TypeScriptParserRequire-101))|(1<<(TypeScriptParserAt-101))|(1<<(TypeScriptParserIdentifier-101)))) != 0) {
			{
				p.SetState(1595)
				p.FormalParameterList()
			}

		}
		{
			p.SetState(1598)
			p.Match(TypeScriptParserCloseParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrowFunctionBodyContext is an interface to support dynamic dispatch.
type IArrowFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunctionBodyContext differentiates from other interfaces.
	IsArrowFunctionBodyContext()
}

type ArrowFunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunctionBodyContext() *ArrowFunctionBodyContext {
	var p = new(ArrowFunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionBody
	return p
}

func (*ArrowFunctionBodyContext) IsArrowFunctionBodyContext() {}

func NewArrowFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunctionBodyContext {
	var p = new(ArrowFunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_arrowFunctionBody

	return p
}

func (s *ArrowFunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunctionBodyContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *ArrowFunctionBodyContext) OpenBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOpenBrace, 0)
}

func (s *ArrowFunctionBodyContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *ArrowFunctionBodyContext) CloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCloseBrace, 0)
}

func (s *ArrowFunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitArrowFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ArrowFunctionBody() (localctx IArrowFunctionBodyContext) {
	localctx = NewArrowFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, TypeScriptParserRULE_arrowFunctionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1601)
			p.singleExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1602)
			p.Match(TypeScriptParserOpenBrace)
		}
		{
			p.SetState(1603)
			p.FunctionBody()
		}
		{
			p.SetState(1604)
			p.Match(TypeScriptParserCloseBrace)
		}

	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) MultiplyAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMultiplyAssign, 0)
}

func (s *AssignmentOperatorContext) DivideAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDivideAssign, 0)
}

func (s *AssignmentOperatorContext) ModulusAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserModulusAssign, 0)
}

func (s *AssignmentOperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPlusAssign, 0)
}

func (s *AssignmentOperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserMinusAssign, 0)
}

func (s *AssignmentOperatorContext) LeftShiftArithmeticAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLeftShiftArithmeticAssign, 0)
}

func (s *AssignmentOperatorContext) RightShiftArithmeticAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRightShiftArithmeticAssign, 0)
}

func (s *AssignmentOperatorContext) RightShiftLogicalAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRightShiftLogicalAssign, 0)
}

func (s *AssignmentOperatorContext) BitAndAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitAndAssign, 0)
}

func (s *AssignmentOperatorContext) BitXorAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitXorAssign, 0)
}

func (s *AssignmentOperatorContext) BitOrAssign() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBitOrAssign, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, TypeScriptParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1608)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-43)&-(0x1f+1)) == 0 && ((1<<uint((_la-43)))&((1<<(TypeScriptParserMultiplyAssign-43))|(1<<(TypeScriptParserDivideAssign-43))|(1<<(TypeScriptParserModulusAssign-43))|(1<<(TypeScriptParserPlusAssign-43))|(1<<(TypeScriptParserMinusAssign-43))|(1<<(TypeScriptParserLeftShiftArithmeticAssign-43))|(1<<(TypeScriptParserRightShiftArithmeticAssign-43))|(1<<(TypeScriptParserRightShiftLogicalAssign-43))|(1<<(TypeScriptParserBitAndAssign-43))|(1<<(TypeScriptParserBitXorAssign-43))|(1<<(TypeScriptParserBitOrAssign-43)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNullLiteral, 0)
}

func (s *LiteralContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBooleanLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStringLiteral, 0)
}

func (s *LiteralContext) TemplateStringLiteral() ITemplateStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateStringLiteralContext)
}

func (s *LiteralContext) RegularExpressionLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRegularExpressionLiteral, 0)
}

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, TypeScriptParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1616)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserNullLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1610)
			p.Match(TypeScriptParserNullLiteral)
		}

	case TypeScriptParserBooleanLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1611)
			p.Match(TypeScriptParserBooleanLiteral)
		}

	case TypeScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1612)
			p.Match(TypeScriptParserStringLiteral)
		}

	case TypeScriptParserBackTick:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1613)
			p.TemplateStringLiteral()
		}

	case TypeScriptParserRegularExpressionLiteral:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1614)
			p.Match(TypeScriptParserRegularExpressionLiteral)
		}

	case TypeScriptParserDecimalLiteral, TypeScriptParserHexIntegerLiteral, TypeScriptParserOctalIntegerLiteral, TypeScriptParserOctalIntegerLiteral2, TypeScriptParserBinaryIntegerLiteral:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1615)
			p.NumericLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateStringLiteralContext differentiates from other interfaces.
	IsTemplateStringLiteralContext()
}

type TemplateStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateStringLiteralContext() *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_templateStringLiteral
	return p
}

func (*TemplateStringLiteralContext) IsTemplateStringLiteralContext() {}

func NewTemplateStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_templateStringLiteral

	return p
}

func (s *TemplateStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateStringLiteralContext) AllBackTick() []antlr.TerminalNode {
	return s.GetTokens(TypeScriptParserBackTick)
}

func (s *TemplateStringLiteralContext) BackTick(i int) antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBackTick, i)
}

func (s *TemplateStringLiteralContext) AllTemplateStringAtom() []ITemplateStringAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateStringAtomContext)(nil)).Elem())
	var tst = make([]ITemplateStringAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateStringAtomContext)
		}
	}

	return tst
}

func (s *TemplateStringLiteralContext) TemplateStringAtom(i int) ITemplateStringAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateStringAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateStringAtomContext)
}

func (s *TemplateStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTemplateStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TemplateStringLiteral() (localctx ITemplateStringLiteralContext) {
	localctx = NewTemplateStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, TypeScriptParserRULE_templateStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1618)
		p.Match(TypeScriptParserBackTick)
	}
	p.SetState(1622)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TypeScriptParserTemplateStringStartExpression || _la == TypeScriptParserTemplateStringAtom {
		{
			p.SetState(1619)
			p.TemplateStringAtom()
		}

		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1625)
		p.Match(TypeScriptParserBackTick)
	}

	return localctx
}

// ITemplateStringAtomContext is an interface to support dynamic dispatch.
type ITemplateStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateStringAtomContext differentiates from other interfaces.
	IsTemplateStringAtomContext()
}

type TemplateStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateStringAtomContext() *TemplateStringAtomContext {
	var p = new(TemplateStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_templateStringAtom
	return p
}

func (*TemplateStringAtomContext) IsTemplateStringAtomContext() {}

func NewTemplateStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateStringAtomContext {
	var p = new(TemplateStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_templateStringAtom

	return p
}

func (s *TemplateStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateStringAtomContext) TemplateStringAtom() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTemplateStringAtom, 0)
}

func (s *TemplateStringAtomContext) TemplateStringStartExpression() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTemplateStringStartExpression, 0)
}

func (s *TemplateStringAtomContext) SingleExpression() ISingleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleExpressionContext)
}

func (s *TemplateStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTemplateCloseBrace, 0)
}

func (s *TemplateStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitTemplateStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) TemplateStringAtom() (localctx ITemplateStringAtomContext) {
	localctx = NewTemplateStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, TypeScriptParserRULE_templateStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1632)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserTemplateStringAtom:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1627)
			p.Match(TypeScriptParserTemplateStringAtom)
		}

	case TypeScriptParserTemplateStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1628)
			p.Match(TypeScriptParserTemplateStringStartExpression)
		}
		{
			p.SetState(1629)
			p.singleExpression(0)
		}
		{
			p.SetState(1630)
			p.Match(TypeScriptParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) DecimalLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDecimalLiteral, 0)
}

func (s *NumericLiteralContext) HexIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserHexIntegerLiteral, 0)
}

func (s *NumericLiteralContext) OctalIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOctalIntegerLiteral, 0)
}

func (s *NumericLiteralContext) OctalIntegerLiteral2() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserOctalIntegerLiteral2, 0)
}

func (s *NumericLiteralContext) BinaryIntegerLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBinaryIntegerLiteral, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) NumericLiteral() (localctx INumericLiteralContext) {
	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, TypeScriptParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1634)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-57)&-(0x1f+1)) == 0 && ((1<<uint((_la-57)))&((1<<(TypeScriptParserDecimalLiteral-57))|(1<<(TypeScriptParserHexIntegerLiteral-57))|(1<<(TypeScriptParserOctalIntegerLiteral-57))|(1<<(TypeScriptParserOctalIntegerLiteral2-57))|(1<<(TypeScriptParserBinaryIntegerLiteral-57)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierNameContext is an interface to support dynamic dispatch.
type IIdentifierNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierNameContext differentiates from other interfaces.
	IsIdentifierNameContext()
}

type IdentifierNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierNameContext() *IdentifierNameContext {
	var p = new(IdentifierNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_identifierName
	return p
}

func (*IdentifierNameContext) IsIdentifierNameContext() {}

func NewIdentifierNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierNameContext {
	var p = new(IdentifierNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_identifierName

	return p
}

func (s *IdentifierNameContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *IdentifierNameContext) ReservedWord() IReservedWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReservedWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReservedWordContext)
}

func (s *IdentifierNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIdentifierName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IdentifierName() (localctx IIdentifierNameContext) {
	localctx = NewIdentifierNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, TypeScriptParserRULE_identifierName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1638)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1636)
			p.Match(TypeScriptParserIdentifier)
		}

	case TypeScriptParserNullLiteral, TypeScriptParserBooleanLiteral, TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1637)
			p.ReservedWord()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIdentifierOrKeyWordContext is an interface to support dynamic dispatch.
type IIdentifierOrKeyWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierOrKeyWordContext differentiates from other interfaces.
	IsIdentifierOrKeyWordContext()
}

type IdentifierOrKeyWordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierOrKeyWordContext() *IdentifierOrKeyWordContext {
	var p = new(IdentifierOrKeyWordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_identifierOrKeyWord
	return p
}

func (*IdentifierOrKeyWordContext) IsIdentifierOrKeyWordContext() {}

func NewIdentifierOrKeyWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierOrKeyWordContext {
	var p = new(IdentifierOrKeyWordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_identifierOrKeyWord

	return p
}

func (s *IdentifierOrKeyWordContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierOrKeyWordContext) Identifier() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIdentifier, 0)
}

func (s *IdentifierOrKeyWordContext) TypeAlias() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeAlias, 0)
}

func (s *IdentifierOrKeyWordContext) Require() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRequire, 0)
}

func (s *IdentifierOrKeyWordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierOrKeyWordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierOrKeyWordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitIdentifierOrKeyWord(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) IdentifierOrKeyWord() (localctx IIdentifierOrKeyWordContext) {
	localctx = NewIdentifierOrKeyWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, TypeScriptParserRULE_identifierOrKeyWord)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(TypeScriptParserTypeAlias-113))|(1<<(TypeScriptParserRequire-113))|(1<<(TypeScriptParserIdentifier-113)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IReservedWordContext is an interface to support dynamic dispatch.
type IReservedWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReservedWordContext differentiates from other interfaces.
	IsReservedWordContext()
}

type ReservedWordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReservedWordContext() *ReservedWordContext {
	var p = new(ReservedWordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_reservedWord
	return p
}

func (*ReservedWordContext) IsReservedWordContext() {}

func NewReservedWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReservedWordContext {
	var p = new(ReservedWordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_reservedWord

	return p
}

func (s *ReservedWordContext) GetParser() antlr.Parser { return s.parser }

func (s *ReservedWordContext) Keyword() IKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *ReservedWordContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNullLiteral, 0)
}

func (s *ReservedWordContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBooleanLiteral, 0)
}

func (s *ReservedWordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReservedWordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReservedWordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitReservedWord(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) ReservedWord() (localctx IReservedWordContext) {
	localctx = NewReservedWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, TypeScriptParserRULE_reservedWord)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1645)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TypeScriptParserBreak, TypeScriptParserDo, TypeScriptParserInstanceof, TypeScriptParserTypeof, TypeScriptParserCase, TypeScriptParserElse, TypeScriptParserNew, TypeScriptParserVar, TypeScriptParserCatch, TypeScriptParserFinally, TypeScriptParserReturn, TypeScriptParserVoid, TypeScriptParserContinue, TypeScriptParserFor, TypeScriptParserSwitch, TypeScriptParserWhile, TypeScriptParserDebugger, TypeScriptParserFunction_, TypeScriptParserThis, TypeScriptParserWith, TypeScriptParserDefault, TypeScriptParserIf, TypeScriptParserThrow, TypeScriptParserDelete, TypeScriptParserIn, TypeScriptParserTry, TypeScriptParserFrom, TypeScriptParserReadOnly, TypeScriptParserAsync, TypeScriptParserClass, TypeScriptParserEnum, TypeScriptParserExtends, TypeScriptParserSuper, TypeScriptParserConst, TypeScriptParserExport, TypeScriptParserImport, TypeScriptParserImplements, TypeScriptParserLet, TypeScriptParserPrivate, TypeScriptParserPublic, TypeScriptParserInterface, TypeScriptParserPackage, TypeScriptParserProtected, TypeScriptParserStatic, TypeScriptParserYield, TypeScriptParserStr, TypeScriptParserTypeAlias, TypeScriptParserGet, TypeScriptParserSet, TypeScriptParserRequire:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1642)
			p.Keyword()
		}

	case TypeScriptParserNullLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1643)
			p.Match(TypeScriptParserNullLiteral)
		}

	case TypeScriptParserBooleanLiteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1644)
			p.Match(TypeScriptParserBooleanLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_keyword
	return p
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) Break() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserBreak, 0)
}

func (s *KeywordContext) Do() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDo, 0)
}

func (s *KeywordContext) Instanceof() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserInstanceof, 0)
}

func (s *KeywordContext) Typeof() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeof, 0)
}

func (s *KeywordContext) Case() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCase, 0)
}

func (s *KeywordContext) Else() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserElse, 0)
}

func (s *KeywordContext) New() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserNew, 0)
}

func (s *KeywordContext) Var() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserVar, 0)
}

func (s *KeywordContext) Catch() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserCatch, 0)
}

func (s *KeywordContext) Finally() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFinally, 0)
}

func (s *KeywordContext) Return() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReturn, 0)
}

func (s *KeywordContext) Void() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserVoid, 0)
}

func (s *KeywordContext) Continue() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserContinue, 0)
}

func (s *KeywordContext) For() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFor, 0)
}

func (s *KeywordContext) Switch() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSwitch, 0)
}

func (s *KeywordContext) While() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserWhile, 0)
}

func (s *KeywordContext) Debugger() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDebugger, 0)
}

func (s *KeywordContext) Function_() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFunction_, 0)
}

func (s *KeywordContext) This() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserThis, 0)
}

func (s *KeywordContext) With() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserWith, 0)
}

func (s *KeywordContext) Default() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDefault, 0)
}

func (s *KeywordContext) If() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIf, 0)
}

func (s *KeywordContext) Throw() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserThrow, 0)
}

func (s *KeywordContext) Delete() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserDelete, 0)
}

func (s *KeywordContext) In() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserIn, 0)
}

func (s *KeywordContext) Try() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTry, 0)
}

func (s *KeywordContext) ReadOnly() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserReadOnly, 0)
}

func (s *KeywordContext) Async() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserAsync, 0)
}

func (s *KeywordContext) From() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserFrom, 0)
}

func (s *KeywordContext) Class() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserClass, 0)
}

func (s *KeywordContext) Enum() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEnum, 0)
}

func (s *KeywordContext) Extends() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExtends, 0)
}

func (s *KeywordContext) Super() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSuper, 0)
}

func (s *KeywordContext) Const() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserConst, 0)
}

func (s *KeywordContext) Export() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserExport, 0)
}

func (s *KeywordContext) Import() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserImport, 0)
}

func (s *KeywordContext) Implements() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserImplements, 0)
}

func (s *KeywordContext) Let() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserLet, 0)
}

func (s *KeywordContext) Private() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPrivate, 0)
}

func (s *KeywordContext) Public() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPublic, 0)
}

func (s *KeywordContext) Interface() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserInterface, 0)
}

func (s *KeywordContext) Package() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserPackage, 0)
}

func (s *KeywordContext) Protected() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserProtected, 0)
}

func (s *KeywordContext) Static() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStatic, 0)
}

func (s *KeywordContext) Yield() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserYield, 0)
}

func (s *KeywordContext) Get() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserGet, 0)
}

func (s *KeywordContext) Set() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSet, 0)
}

func (s *KeywordContext) Require() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserRequire, 0)
}

func (s *KeywordContext) TypeAlias() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserTypeAlias, 0)
}

func (s *KeywordContext) Str() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserStr, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, TypeScriptParserRULE_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1647)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(TypeScriptParserBreak-62))|(1<<(TypeScriptParserDo-62))|(1<<(TypeScriptParserInstanceof-62))|(1<<(TypeScriptParserTypeof-62))|(1<<(TypeScriptParserCase-62))|(1<<(TypeScriptParserElse-62))|(1<<(TypeScriptParserNew-62))|(1<<(TypeScriptParserVar-62))|(1<<(TypeScriptParserCatch-62))|(1<<(TypeScriptParserFinally-62))|(1<<(TypeScriptParserReturn-62))|(1<<(TypeScriptParserVoid-62))|(1<<(TypeScriptParserContinue-62))|(1<<(TypeScriptParserFor-62))|(1<<(TypeScriptParserSwitch-62))|(1<<(TypeScriptParserWhile-62))|(1<<(TypeScriptParserDebugger-62))|(1<<(TypeScriptParserFunction_-62))|(1<<(TypeScriptParserThis-62))|(1<<(TypeScriptParserWith-62))|(1<<(TypeScriptParserDefault-62))|(1<<(TypeScriptParserIf-62))|(1<<(TypeScriptParserThrow-62))|(1<<(TypeScriptParserDelete-62))|(1<<(TypeScriptParserIn-62))|(1<<(TypeScriptParserTry-62))|(1<<(TypeScriptParserFrom-62))|(1<<(TypeScriptParserReadOnly-62))|(1<<(TypeScriptParserAsync-62))|(1<<(TypeScriptParserClass-62))|(1<<(TypeScriptParserEnum-62)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(TypeScriptParserExtends-94))|(1<<(TypeScriptParserSuper-94))|(1<<(TypeScriptParserConst-94))|(1<<(TypeScriptParserExport-94))|(1<<(TypeScriptParserImport-94))|(1<<(TypeScriptParserImplements-94))|(1<<(TypeScriptParserLet-94))|(1<<(TypeScriptParserPrivate-94))|(1<<(TypeScriptParserPublic-94))|(1<<(TypeScriptParserInterface-94))|(1<<(TypeScriptParserPackage-94))|(1<<(TypeScriptParserProtected-94))|(1<<(TypeScriptParserStatic-94))|(1<<(TypeScriptParserYield-94))|(1<<(TypeScriptParserStr-94))|(1<<(TypeScriptParserTypeAlias-94))|(1<<(TypeScriptParserGet-94))|(1<<(TypeScriptParserSet-94))|(1<<(TypeScriptParserRequire-94)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IGetterContext is an interface to support dynamic dispatch.
type IGetterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetterContext differentiates from other interfaces.
	IsGetterContext()
}

type GetterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetterContext() *GetterContext {
	var p = new(GetterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_getter
	return p
}

func (*GetterContext) IsGetterContext() {}

func NewGetterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetterContext {
	var p = new(GetterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_getter

	return p
}

func (s *GetterContext) GetParser() antlr.Parser { return s.parser }

func (s *GetterContext) Get() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserGet, 0)
}

func (s *GetterContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *GetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitGetter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Getter() (localctx IGetterContext) {
	localctx = NewGetterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, TypeScriptParserRULE_getter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1649)
		p.Match(TypeScriptParserGet)
	}
	{
		p.SetState(1650)
		p.PropertyName()
	}

	return localctx
}

// ISetterContext is an interface to support dynamic dispatch.
type ISetterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetterContext differentiates from other interfaces.
	IsSetterContext()
}

type SetterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetterContext() *SetterContext {
	var p = new(SetterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_setter
	return p
}

func (*SetterContext) IsSetterContext() {}

func NewSetterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetterContext {
	var p = new(SetterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_setter

	return p
}

func (s *SetterContext) GetParser() antlr.Parser { return s.parser }

func (s *SetterContext) Set() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSet, 0)
}

func (s *SetterContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *SetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitSetter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Setter() (localctx ISetterContext) {
	localctx = NewSetterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, TypeScriptParserRULE_setter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1652)
		p.Match(TypeScriptParserSet)
	}
	{
		p.SetState(1653)
		p.PropertyName()
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TypeScriptParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TypeScriptParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserSemiColon, 0)
}

func (s *EosContext) EOF() antlr.TerminalNode {
	return s.GetToken(TypeScriptParserEOF, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TypeScriptParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TypeScriptParser) Eos() (localctx IEosContext) {
	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, TypeScriptParserRULE_eos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1659)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1655)
			p.Match(TypeScriptParserSemiColon)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1656)
			p.Match(TypeScriptParserEOF)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1657)

		if !(p.lineTerminatorAhead()) {
			panic(antlr.NewFailedPredicateException(p, "p.lineTerminatorAhead()", ""))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1658)

		if !(p.closeBrace()) {
			panic(antlr.NewFailedPredicateException(p, "p.closeBrace()", ""))
		}

	}

	return localctx
}

func (p *TypeScriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 10:
		var t *UnionOrIntersectionOrPrimaryTypeContext = nil
		if localctx != nil {
			t = localctx.(*UnionOrIntersectionOrPrimaryTypeContext)
		}
		return p.UnionOrIntersectionOrPrimaryType_Sempred(t, predIndex)

	case 11:
		var t *PrimaryTypeContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryTypeContext)
		}
		return p.PrimaryType_Sempred(t, predIndex)

	case 22:
		var t *ArrayTypeContext = nil
		if localctx != nil {
			t = localctx.(*ArrayTypeContext)
		}
		return p.ArrayType_Sempred(t, predIndex)

	case 57:
		var t *DecoratorMemberExpressionContext = nil
		if localctx != nil {
			t = localctx.(*DecoratorMemberExpressionContext)
		}
		return p.DecoratorMemberExpression_Sempred(t, predIndex)

	case 72:
		var t *ExpressionStatementContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionStatementContext)
		}
		return p.ExpressionStatement_Sempred(t, predIndex)

	case 74:
		var t *IterationStatementContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatementContext)
		}
		return p.IterationStatement_Sempred(t, predIndex)

	case 76:
		var t *ContinueStatementContext = nil
		if localctx != nil {
			t = localctx.(*ContinueStatementContext)
		}
		return p.ContinueStatement_Sempred(t, predIndex)

	case 77:
		var t *BreakStatementContext = nil
		if localctx != nil {
			t = localctx.(*BreakStatementContext)
		}
		return p.BreakStatement_Sempred(t, predIndex)

	case 78:
		var t *ReturnStatementContext = nil
		if localctx != nil {
			t = localctx.(*ReturnStatementContext)
		}
		return p.ReturnStatement_Sempred(t, predIndex)

	case 79:
		var t *YieldStatementContext = nil
		if localctx != nil {
			t = localctx.(*YieldStatementContext)
		}
		return p.YieldStatement_Sempred(t, predIndex)

	case 87:
		var t *ThrowStatementContext = nil
		if localctx != nil {
			t = localctx.(*ThrowStatementContext)
		}
		return p.ThrowStatement_Sempred(t, predIndex)

	case 125:
		var t *SingleExpressionContext = nil
		if localctx != nil {
			t = localctx.(*SingleExpressionContext)
		}
		return p.SingleExpression_Sempred(t, predIndex)

	case 141:
		var t *EosContext = nil
		if localctx != nil {
			t = localctx.(*EosContext)
		}
		return p.Eos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *TypeScriptParser) UnionOrIntersectionOrPrimaryType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) PrimaryType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 3:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) ArrayType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) DecoratorMemberExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) ExpressionStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.notOpenBraceAndNotFunction()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) IterationStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.p("of")

	case 8:
		return p.p("of")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) ContinueStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) BreakStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) ReturnStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) YieldStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) ThrowStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.notLineTerminator()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) SingleExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 14:
		return p.Precpred(p.GetParserRuleContext(), 29)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 28)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 27)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 29:
		return p.Precpred(p.GetParserRuleContext(), 45)

	case 30:
		return p.Precpred(p.GetParserRuleContext(), 44)

	case 31:
		return p.Precpred(p.GetParserRuleContext(), 41)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 40)

	case 33:
		return p.notLineTerminator()

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 39)

	case 35:
		return p.notLineTerminator()

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 37:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TypeScriptParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
		return p.lineTerminatorAhead()

	case 39:
		return p.closeBrace()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
